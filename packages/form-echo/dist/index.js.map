{"version":3,"sources":["../src/index.ts","../src/utils/inputDateHelpers.ts","../src/utils/index.tsx"],"sourcesContent":["// import * as React from 'react';\n\nexport * from './types';\nexport * from './utils';\n","import type { InputDateTypes } from '../types';\r\n\r\n/**\r\n * Formats a date object to the desired string format based on the type.\r\n * @param {Date} date - The Date object to be formatted.\r\n * @param {string} type - The format type ('date', 'time', 'datetime-local', 'week', or 'month').\r\n * @returns {string} A formatted string based on the specified format.\r\n */\r\nfunction formatDate(date: Date, type: InputDateTypes): string {\r\n\t// Initialize an empty string to hold the formatted date\r\n\tlet formattedDate = '';\r\n\r\n\t// Use a switch statement to determine the appropriate formatting based on the `type` argument\r\n\tswitch (type) {\r\n\t\tcase 'date':\r\n\t\t\t// For the 'date' type, format the date as yyyy-mm-dd using toISOString and slice\r\n\t\t\tformattedDate = date.toISOString().slice(0, 10);\r\n\t\t\tbreak;\r\n\t\tcase 'time':\r\n\t\t\t// For the 'time' type, format the time as hh:mm:ss using toTimeString and slice\r\n\t\t\tformattedDate = date.toTimeString().slice(0, 8);\r\n\t\t\tbreak;\r\n\t\tcase 'datetime-local':\r\n\t\t\t// For the 'datetime-local' type, format the date and time as yyyy-mm-ddThh:mm:ss using toISOString, slice, and replace\r\n\t\t\tformattedDate = date.toISOString().slice(0, 16);\r\n\t\t\tformattedDate = formattedDate.replace('T', ' ');\r\n\t\t\tbreak;\r\n\t\tcase 'week':\r\n\t\t\t// For the 'week' type, format the week as yyyy-Www using getWeekNumber and padStart\r\n\t\t\tconst year = date.getFullYear();\r\n\t\t\tconst weekNumber = getWeekNumber(date);\r\n\t\t\tformattedDate = `${year}-W${\r\n\t\t\t\tweekNumber.toString().length < 2\r\n\t\t\t\t\t? '0' + weekNumber.toString()\r\n\t\t\t\t\t: weekNumber.toString()\r\n\t\t\t}`;\r\n\t\t\t// weekNumber.toString().padStart(2, '0')\r\n\t\t\tbreak;\r\n\t\tcase 'month':\r\n\t\t\t// For the 'month' type, format the month as yyyy-mm using toISOString and slice\r\n\t\t\tformattedDate = date.toISOString().slice(0, 7);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t// If the type is not recognized, return an empty string\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\t// Return the formatted date\r\n\treturn formattedDate;\r\n}\r\n\r\n/**\r\n * Parses a string in the specified format and returns a Date object.\r\n * @param {string} dateString - The string to be parsed.\r\n * @param {string} type - The format type ('date', 'time', 'datetime-local', 'week', or 'month').\r\n * @returns {Date} - The parsed Date object.\r\n */\r\nfunction parseDate(dateString: string | number, type: InputDateTypes): Date {\r\n\t// Declare a variable to hold the parsed date\r\n\tlet parsedDate: Date;\r\n\r\n\t// Use a switch statement to handle the various date/time formats\r\n\tswitch (type) {\r\n\t\tcase 'date':\r\n\t\t\t// For the 'date' type, parse the string as a date in ISO format (yyyy-mm-dd)\r\n\t\t\tparsedDate = new Date(dateString);\r\n\t\t\tbreak;\r\n\t\tcase 'time':\r\n\t\t\t// For the 'time' type, split the string into hours, minutes, and seconds components\r\n\t\t\tconst [hours, minutes, seconds] = dateString.toString().split(':');\r\n\t\t\t// Create a new Date object and set the hours, minutes, and seconds based on the input string\r\n\t\t\tparsedDate = new Date();\r\n\t\t\tparsedDate.setHours(Number(hours));\r\n\t\t\tparsedDate.setMinutes(Number(minutes));\r\n\t\t\tparsedDate.setSeconds(Number(seconds));\r\n\t\t\tbreak;\r\n\t\tcase 'datetime-local':\r\n\t\t\t// For the 'datetime-local' type, replace the space character with 'T' and parse the resulting string as a date in ISO format\r\n\t\t\tparsedDate = new Date(dateString.toString().replace(' ', 'T'));\r\n\t\t\tbreak;\r\n\t\tcase 'week':\r\n\t\t\t// For the 'week' type, split the string into year and week number components\r\n\t\t\tconst [yearString, weekString] = dateString.toString().split('-W');\r\n\t\t\tconst year = Number(yearString);\r\n\t\t\tconst week = Number(weekString);\r\n\t\t\t// Use the getFirstDateOfWeek helper function to calculate the first date of the specified week in the specified year\r\n\t\t\tparsedDate = getFirstDateOfWeek(year, week);\r\n\t\t\tbreak;\r\n\t\tcase 'month':\r\n\t\t\t// For the 'month' type, append '-01' to the input string to represent the first day of the month and parse as a date in ISO format\r\n\t\t\tparsedDate = new Date(`${dateString}-01`);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t// For an unrecognized format, return the current date/time\r\n\t\t\tparsedDate = new Date();\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\t// Return the parsed Date object\r\n\treturn parsedDate;\r\n}\r\n\r\n/**\r\n * Returns the week number of the year for a given date.\r\n * @param {Date} date - The date object for which to calculate the week number.\r\n * @returns {number} - The week number.\r\n */\r\nfunction getWeekNumber(date: Date): number {\r\n\t// Get the date for the first day of the year\r\n\tconst yearStart = new Date(date.getFullYear(), 0, 1);\r\n\r\n\t// Calculate the number of days since the start of the year until the given date\r\n\tconst daysSinceYearStart =\r\n\t\t(date.valueOf() - yearStart.valueOf()) / (1000 * 60 * 60 * 24);\r\n\r\n\t// Calculate the week number by dividing the number of days by 7 and rounding down\r\n\tconst weekNumber = Math.floor(daysSinceYearStart / 7) + 1;\r\n\r\n\treturn weekNumber;\r\n}\r\n\r\n/**\r\n * Returns the first date (Monday) of a given week in a year.\r\n * @param {number} year - The year of the target week.\r\n * @param {number} week - The week number (1-53) of the desired week.\r\n * @returns {Date} - The first date (Monday) of the specified week.\r\n */\r\nfunction getFirstDateOfWeek(year: number, week: number): Date {\r\n\t// Find the date of January 1st for the given year\r\n\tconst januaryFirst = new Date(year, 0, 1);\r\n\r\n\t// Calculate the number of days until the first Monday of the year\r\n\t// 0 represents Sunday, 1 represents Monday, and so on\r\n\tconst daysToFirstMonday = (8 - januaryFirst.getDay()) % 7;\r\n\r\n\t// Set the date object to the first Monday of the year\r\n\tconst firstMonday = new Date(januaryFirst);\r\n\tfirstMonday.setDate(januaryFirst.getDate() + daysToFirstMonday);\r\n\r\n\t// Calculate the number of days until the target Monday of the week\r\n\tconst daysToTargetMonday = (week - 1) * 7;\r\n\r\n\t// Set the date object to the target Monday of the week\r\n\tconst targetMonday = new Date(firstMonday);\r\n\ttargetMonday.setDate(firstMonday.getDate() + daysToTargetMonday);\r\n\r\n\treturn targetMonday;\r\n}\r\n\r\n/**\r\n * A collection of helper functions for working with input date values.\r\n * @namespace\r\n */\r\nconst inputDateHelpers = {\r\n\t/**\r\n\t * Formats a date object to the desired string format based on the type.\r\n\t * @param {Date} date - The Date object to be formatted.\r\n\t * @param {string} type - The format type ('date', 'time', 'datetime-local', 'week', or 'month').\r\n\t * @returns {string} A formatted string based on the specified format.\r\n\t */\r\n\tformatDate,\r\n\r\n\t/**\r\n\t * Parses a string in the specified format and returns a Date object.\r\n\t * @param {string} dateString - The string to be parsed.\r\n\t * @param {string} type - The format type ('date', 'time', 'datetime-local', 'week', or 'month').\r\n\t * @returns {Date} - The parsed Date object.\r\n\t */\r\n\tparseDate,\r\n\r\n\t/**\r\n\t * Returns the week number of the year for a given date.\r\n\t * @param {Date} date - The date object for which to calculate the week number.\r\n\t * @returns {number} - The week number.\r\n\t */\r\n\tgetWeekNumber,\r\n\r\n\t/**\r\n\t * Returns the first date (Monday) of a given week in a year.\r\n\t * @param {number} year - The year of the target week.\r\n\t * @param {number} week - The week number (1-53) of the desired week.\r\n\t * @returns {Date} - The first date (Monday) of the specified week.\r\n\t */\r\n\tgetFirstDateOfWeek,\r\n};\r\n\r\nexport default inputDateHelpers;\r\n","export { default as inputDateHelpers } from './inputDateHelpers';\r\n\r\nimport type { ZodSchema, ZodError } from 'zod';\r\n\r\nimport { createStore } from 'zustand';\r\n\r\nimport type {\r\n\tValidationEvents,\r\n\tCreateFormStoreProps,\r\n\tCreateCreateFormStore,\r\n} from '../types';\r\nimport { useRef, useId } from 'react';\r\n\r\nconst generateUUIDV4 = () =>\r\n\t'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n\t\tconst r = (Math.random() * 16) | 0;\r\n\t\tconst v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n\t\treturn v.toString(16);\r\n\t});\r\n\r\nconst isZodValidator = (validator: unknown): validator is ZodSchema => {\r\n\treturn !!(\r\n\t\tvalidator instanceof Object &&\r\n\t\t'parseAsync' in validator &&\r\n\t\ttypeof validator.parseAsync === 'function'\r\n\t);\r\n};\r\n\r\nconst isZodError = (error: unknown): error is ZodError => {\r\n\treturn error instanceof Object && 'errors' in error;\r\n};\r\n\r\nexport const handleCreateFormStore = <\r\n\tFields, // = Record<string, unknown>,\r\n\tValidationSchema, // = Record<keyof Fields, unknown>,\r\n>({\r\n\tisUpdatingFieldsValueOnError = true,\r\n\ttrackValidationHistory = false,\r\n\tvaluesFromFieldsToStore,\r\n\tvaluesFromStoreToFields,\r\n\tvalidationSchema,\r\n\t...params\r\n}: CreateFormStoreProps<Fields, ValidationSchema>) => {\r\n\ttype FormStore = CreateCreateFormStore<Fields, ValidationSchema>;\r\n\r\n\tif (!params.initValues || typeof params.initValues !== 'object')\r\n\t\tthrow new Error('');\r\n\r\n\tconst baseId =\r\n\t\ttypeof params.baseId === 'boolean'\r\n\t\t\t? generateUUIDV4()\r\n\t\t\t: params.baseId\r\n\t\t\t? `${params.baseId}-`\r\n\t\t\t: '';\r\n\r\n\t// const errors = {};\r\n\tconst metadata = {\r\n\t\tfieldsNames: Object.keys(params.initValues) as (keyof Fields)[],\r\n\t\tformId: `${baseId}form`,\r\n\t};\r\n\tconst submitCounter = 0;\r\n\r\n\tconst fields = {} as FormStore['fields'];\r\n\r\n\tlet passedField: (typeof params)['initValues'][keyof Fields];\r\n\r\n\tlet validation: (typeof fields)[keyof Fields]['validation'];\r\n\tlet fieldValidationEvents: NonNullable<typeof params.validationEvents> = {\r\n\t\tsubmit: true,\r\n\t};\r\n\tlet isFieldHavingPassedValidations = false;\r\n\tlet fieldValidationEventKey: ValidationEvents;\r\n\r\n\tfor (const fieldName of metadata.fieldsNames) {\r\n\t\tconst fieldValidationsHandler =\r\n\t\t\tvalidationSchema?.[fieldName as keyof Fields & keyof ValidationSchema];\r\n\r\n\t\tvalidation = {\r\n\t\t\thandler: !fieldValidationsHandler\r\n\t\t\t\t? undefined\r\n\t\t\t\t: isZodValidator(fieldValidationsHandler)\r\n\t\t\t\t? (value: unknown) => fieldValidationsHandler.parse(value)\r\n\t\t\t\t: fieldValidationsHandler,\r\n\t\t\tfailedAttempts: 0,\r\n\t\t\tpassedAttempts: 0,\r\n\t\t\tevents: {\r\n\t\t\t\tblur: { failedAttempts: 0, passedAttempts: 0, isActive: false },\r\n\t\t\t\tchange: { failedAttempts: 0, passedAttempts: 0, isActive: false },\r\n\t\t\t\tmount: { failedAttempts: 0, passedAttempts: 0, isActive: false },\r\n\t\t\t\tsubmit: { failedAttempts: 0, passedAttempts: 0, isActive: false },\r\n\t\t\t},\r\n\t\t} as NonNullable<typeof validation>;\r\n\r\n\t\tpassedField = params.initValues[fieldName];\r\n\r\n\t\tif (params.validationEvents) {\r\n\t\t\tisFieldHavingPassedValidations = true;\r\n\t\t\tfieldValidationEvents = {\r\n\t\t\t\t...fieldValidationEvents,\r\n\t\t\t\t...params.validationEvents,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tfields[fieldName] = {\r\n\t\t\tvalue: passedField,\r\n\t\t\tisUpdatingValueOnError: isUpdatingFieldsValueOnError,\r\n\t\t\tvalueFromFieldToStore: valuesFromFieldsToStore?.[fieldName]\r\n\t\t\t\t? valuesFromFieldsToStore[fieldName]\r\n\t\t\t\t: undefined,\r\n\t\t\tvalueFromStoreToField: valuesFromStoreToFields?.[fieldName]\r\n\t\t\t\t? valuesFromStoreToFields[fieldName]\r\n\t\t\t\t: undefined,\r\n\t\t} as (typeof fields)[typeof fieldName];\r\n\r\n\t\tif (isFieldHavingPassedValidations) {\r\n\t\t\tfor (fieldValidationEventKey in fieldValidationEvents) {\r\n\t\t\t\tvalidation.events[fieldValidationEventKey].isActive =\r\n\t\t\t\t\t!!typeof fieldValidationEvents[fieldValidationEventKey];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfields[fieldName] = {\r\n\t\t\t...fields[fieldName],\r\n\t\t\terrors: null,\r\n\t\t\tisDirty: false,\r\n\t\t\tmetadata: {\r\n\t\t\t\tid: `${baseId}field-${String(fieldName)}`,\r\n\t\t\t\tname: fieldName,\r\n\t\t\t\tinitialValue: fields[fieldName].value,\r\n\t\t\t},\r\n\t\t\tvalidation,\r\n\t\t};\r\n\t}\r\n\r\n\treturn createStore<FormStore>((set, get) => ({\r\n\t\tfields,\r\n\t\tmetadata,\r\n\t\tsubmitCounter,\r\n\t\tisTrackingValidationHistory: trackValidationHistory,\r\n\t\tvalidations: { history: [] },\r\n\t\terrors: {},\r\n\t\tutils: {\r\n\t\t\tresetErrorsFields: () =>\r\n\t\t\t\tset((prev) => {\r\n\t\t\t\t\tconst fields = Object.fromEntries(\r\n\t\t\t\t\t\tprev.metadata.fieldsNames.map((fieldsName) => [\r\n\t\t\t\t\t\t\tfieldsName,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t...prev.fields[fieldsName],\r\n\t\t\t\t\t\t\t\terrors: null,\r\n\t\t\t\t\t\t\t\tisDirty: false,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t]),\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tfields: fields as unknown as typeof prev.fields,\r\n\t\t\t\t\t\terrors: {},\r\n\t\t\t\t\t};\r\n\t\t\t\t}),\r\n\t\t\thandleOnInputChange: (name, value) => {\r\n\t\t\t\tconst currentStore = get();\r\n\t\t\t\tconst _value = currentStore.utils.handleFieldValidation({\r\n\t\t\t\t\tname,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tvalidationEvent: 'change',\r\n\t\t\t\t});\r\n\t\t\t\tcurrentStore.utils.setFieldValue(name, _value);\r\n\t\t\t},\r\n\t\t\terrorFormatter: (error) => {\r\n\t\t\t\tif (isZodError(error)) return error.format()._errors;\r\n\r\n\t\t\t\tif (error instanceof Error) return [error.message];\r\n\t\t\t\treturn ['Something went wrong!'];\r\n\t\t\t},\r\n\t\t\treInitFieldsValues: () =>\r\n\t\t\t\tset((currentState) => {\r\n\t\t\t\t\tconst fieldsNames = currentState.metadata.fieldsNames;\r\n\t\t\t\t\tconst fields = currentState.fields;\r\n\r\n\t\t\t\t\tlet fieldName: (typeof fieldsNames)[number];\r\n\t\t\t\t\tfor (fieldName of fieldsNames) {\r\n\t\t\t\t\t\tfields[fieldName] = {\r\n\t\t\t\t\t\t\t...fields[fieldName],\r\n\t\t\t\t\t\t\tvalue: fields[fieldName].metadata.initialValue,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn { fields };\r\n\t\t\t\t}),\r\n\t\t\tsetFieldValue: (name, value) =>\r\n\t\t\t\tset((currentState) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tfields: {\r\n\t\t\t\t\t\t\t...currentState.fields,\r\n\t\t\t\t\t\t\t[name]: {\r\n\t\t\t\t\t\t\t\t...currentState.fields[name],\r\n\t\t\t\t\t\t\t\tvalue:\r\n\t\t\t\t\t\t\t\t\ttypeof value === 'function'\r\n\t\t\t\t\t\t\t\t\t\t? // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t\t\t\t\t\t\t\t\t  // @ts-ignore\r\n\t\t\t\t\t\t\t\t\t\t  (value(\r\n\t\t\t\t\t\t\t\t\t\t\t\tcurrentState.fields[name].value,\r\n\t\t\t\t\t\t\t\t\t\t  ) as (typeof currentState.fields)[typeof name]['value'])\r\n\t\t\t\t\t\t\t\t\t\t: value,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\t\t\t\t}),\r\n\t\t\tsetFieldErrors: (params) =>\r\n\t\t\t\tset((currentState) => {\r\n\t\t\t\t\tconst hasError = !!params.errors;\r\n\r\n\t\t\t\t\tlet field = currentState.fields[params.name];\r\n\r\n\t\t\t\t\tfield = {\r\n\t\t\t\t\t\t...field,\r\n\t\t\t\t\t\tisDirty: hasError,\r\n\t\t\t\t\t\terrors: params.errors,\r\n\t\t\t\t\t\tvalidation: {\r\n\t\t\t\t\t\t\t...field.validation,\r\n\t\t\t\t\t\t\tevents: {\r\n\t\t\t\t\t\t\t\t...field.validation.events,\r\n\t\t\t\t\t\t\t\t[params.validationEvent]: {\r\n\t\t\t\t\t\t\t\t\t...field.validation.events[params.validationEvent],\r\n\t\t\t\t\t\t\t\t\tfailedAttempts: hasError\r\n\t\t\t\t\t\t\t\t\t\t? field.validation.events[params.validationEvent]\r\n\t\t\t\t\t\t\t\t\t\t\t\t.failedAttempts\r\n\t\t\t\t\t\t\t\t\t\t: field.validation.events[params.validationEvent]\r\n\t\t\t\t\t\t\t\t\t\t\t\t.failedAttempts + 1,\r\n\t\t\t\t\t\t\t\t\tpassedAttempts: hasError\r\n\t\t\t\t\t\t\t\t\t\t? field.validation.events[params.validationEvent]\r\n\t\t\t\t\t\t\t\t\t\t\t\t.passedAttempts\r\n\t\t\t\t\t\t\t\t\t\t: field.validation.events[params.validationEvent]\r\n\t\t\t\t\t\t\t\t\t\t\t\t.passedAttempts + 1,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tfields: { ...currentState.fields, [params.name]: field },\r\n\t\t\t\t\t\terrors: { ...currentState.errors, [params.name]: params.errors },\r\n\t\t\t\t\t};\r\n\t\t\t\t}),\r\n\t\t\tcreateValidationHistoryRecord: ({\r\n\t\t\t\tfields,\r\n\t\t\t\tvalidationEvent,\r\n\t\t\t\tvalidationEventPhase,\r\n\t\t\t\tvalidationEventState,\r\n\t\t\t}) => {\r\n\t\t\t\tconst logs: string[] = [];\r\n\t\t\t\tif (validationEventPhase === 'start') {\r\n\t\t\t\t\tlogs.push(\r\n\t\t\t\t\t\t`Starting the validation for fields: [${Object.keys(fields).join(\r\n\t\t\t\t\t\t\t', ',\r\n\t\t\t\t\t\t)}]`,\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (validationEventPhase === 'end') {\r\n\t\t\t\t\tlogs.push(\r\n\t\t\t\t\t\t`Ending the validation for fields: [${Object.keys(fields).join(\r\n\t\t\t\t\t\t\t', ',\r\n\t\t\t\t\t\t)}]`,\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlogs.push(\r\n\t\t\t\t\t`Validation ${\r\n\t\t\t\t\t\tvalidationEventState[0].toUpperCase() +\r\n\t\t\t\t\t\tvalidationEventState.slice(1)\r\n\t\t\t\t\t}!`,\r\n\t\t\t\t);\r\n\r\n\t\t\t\tfields.forEach((field) => {\r\n\t\t\t\t\tlogs.push(\r\n\t\t\t\t\t\t`Field: ${String(field.metadata.name)}, Failed Attempts: ${\r\n\t\t\t\t\t\t\tfield.validation.events[validationEvent].failedAttempts\r\n\t\t\t\t\t\t}, Passed Attempt: ${\r\n\t\t\t\t\t\t\tfield.validation.events[validationEvent].passedAttempts\r\n\t\t\t\t\t\t}`,\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\thandleFieldValidation: ({ name, validationEvent, value: _value }) => {\r\n\t\t\t\tconst currentState = get();\r\n\r\n\t\t\t\ttype DV = Exclude<\r\n\t\t\t\t\tFields[typeof name],\r\n\t\t\t\t\t(value: Fields[typeof name]) => Fields[typeof name]\r\n\t\t\t\t>;\r\n\t\t\t\tconst value = (\r\n\t\t\t\t\ttypeof _value === 'function'\r\n\t\t\t\t\t\t? _value(currentState.fields[name].value)\r\n\t\t\t\t\t\t: _value\r\n\t\t\t\t) as DV;\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\t!currentState.fields[name].validation.events[validationEvent].isActive\r\n\t\t\t\t)\r\n\t\t\t\t\treturn value;\r\n\r\n\t\t\t\tconst validationSchema = currentState.fields[name].validation.handler;\r\n\r\n\t\t\t\tif (!validationSchema) return value;\r\n\r\n\t\t\t\tcurrentState.fields[name].valueFromFieldToStore;\r\n\t\t\t\tlet validatedValue = currentState.fields[name].valueFromFieldToStore\r\n\t\t\t\t\t? currentState.fields[name].valueFromFieldToStore!(value)\r\n\t\t\t\t\t: value;\r\n\r\n\t\t\t\tconst handleSetError = (error: unknown) => {\r\n\t\t\t\t\tcurrentState.utils.setFieldErrors({\r\n\t\t\t\t\t\tname,\r\n\t\t\t\t\t\terrors: currentState.utils.errorFormatter(error, validationEvent),\r\n\t\t\t\t\t\tvalidationEvent,\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn currentState.fields[name].isUpdatingValueOnError\r\n\t\t\t\t\t\t? validatedValue\r\n\t\t\t\t\t\t: currentState.fields[name].value;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (currentState.isTrackingValidationHistory) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tcurrentState.utils.createValidationHistoryRecord({\r\n\t\t\t\t\t\t\tfields: [currentState.fields[name as keyof Fields]],\r\n\t\t\t\t\t\t\tvalidationEvent,\r\n\t\t\t\t\t\t\tvalidationEventPhase: 'start',\r\n\t\t\t\t\t\t\tvalidationEventState: 'processing',\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tvalidatedValue = validationSchema(\r\n\t\t\t\t\t\t\tvalidatedValue,\r\n\t\t\t\t\t\t\tvalidationEvent,\r\n\t\t\t\t\t\t) as typeof validatedValue;\r\n\t\t\t\t\t\tif (currentState.fields[name].isDirty)\r\n\t\t\t\t\t\t\tcurrentState.utils.setFieldErrors({\r\n\t\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\t\terrors: null,\r\n\t\t\t\t\t\t\t\tvalidationEvent,\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tcurrentState.utils.createValidationHistoryRecord({\r\n\t\t\t\t\t\t\tfields: [currentState.fields[name as keyof Fields]],\r\n\t\t\t\t\t\t\tvalidationEvent,\r\n\t\t\t\t\t\t\tvalidationEventPhase: 'end',\r\n\t\t\t\t\t\t\tvalidationEventState: 'passed',\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\tvalidatedValue = handleSetError(error);\r\n\t\t\t\t\t\tcurrentState.utils.createValidationHistoryRecord({\r\n\t\t\t\t\t\t\tfields: [currentState.fields[name as keyof Fields]],\r\n\t\t\t\t\t\t\tvalidationEvent,\r\n\t\t\t\t\t\t\tvalidationEventPhase: 'end',\r\n\t\t\t\t\t\t\tvalidationEventState: 'failed',\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tvalidatedValue = validationSchema(\r\n\t\t\t\t\t\t\tvalidatedValue,\r\n\t\t\t\t\t\t\tvalidationEvent,\r\n\t\t\t\t\t\t) as typeof validatedValue;\r\n\t\t\t\t\t\tif (currentState.fields[name].isDirty)\r\n\t\t\t\t\t\t\tcurrentState.utils.setFieldErrors({\r\n\t\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\t\terrors: null,\r\n\t\t\t\t\t\t\t\tvalidationEvent,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\tvalidatedValue = handleSetError(error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn validatedValue;\r\n\t\t\t},\r\n\t\t\thandlePreSubmit: (cb) => (event) => {\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tif (!cb) return;\r\n\r\n\t\t\t\tconst currentStore = get();\r\n\t\t\t\tconst fields = currentStore.fields;\r\n\t\t\t\tconst values = {} as Fields;\r\n\t\t\t\tconst validatedValues = {} as NonNullable<\r\n\t\t\t\t\tParameters<\r\n\t\t\t\t\t\tNonNullable<Parameters<FormStore['utils']['handlePreSubmit']>['0']>\r\n\t\t\t\t\t>['1']['validatedValues']\r\n\t\t\t\t>;\r\n\t\t\t\tconst errors = {} as {\r\n\t\t\t\t\t[Key in keyof Fields]: {\r\n\t\t\t\t\t\tname: Key;\r\n\t\t\t\t\t\terrors: string[] | null;\r\n\t\t\t\t\t\tvalidationEvent: ValidationEvents;\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\r\n\t\t\t\tlet hasError = false;\r\n\r\n\t\t\t\tlet fieldName: keyof typeof values;\r\n\t\t\t\tfor (fieldName in fields) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst validationSchema = fields[fieldName].validation.handler;\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tfields[fieldName].validation.events.submit.isActive &&\r\n\t\t\t\t\t\t\ttypeof validationSchema === 'function'\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\tvalidatedValues[fieldName as keyof typeof validatedValues] =\r\n\t\t\t\t\t\t\t\tvalidationSchema(fields[fieldName].value, 'submit');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvalues[fieldName] = fields[fieldName].value;\r\n\r\n\t\t\t\t\t\terrors[fieldName] = {\r\n\t\t\t\t\t\t\tname: fieldName,\r\n\t\t\t\t\t\t\terrors: null,\r\n\t\t\t\t\t\t\tvalidationEvent: 'submit',\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\terrors[fieldName] = {\r\n\t\t\t\t\t\t\tname: fieldName,\r\n\t\t\t\t\t\t\terrors: currentStore.utils.errorFormatter(error, 'submit'),\r\n\t\t\t\t\t\t\tvalidationEvent: 'submit',\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\thasError = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet errorKey: keyof typeof errors;\r\n\t\t\t\tfor (errorKey in errors) {\r\n\t\t\t\t\tcurrentStore.utils.setFieldErrors(errors[errorKey]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!hasError)\r\n\t\t\t\t\tcb(event, {\r\n\t\t\t\t\t\tvalues,\r\n\t\t\t\t\t\tvalidatedValues,\r\n\t\t\t\t\t\thasError,\r\n\t\t\t\t\t\terrors,\r\n\t\t\t\t\t});\r\n\t\t\t},\r\n\t\t},\r\n\t}));\r\n};\r\n\r\nexport const useCreateFormStore = <\r\n\tFields, // = Record<string, unknown>,\r\n\tValidationSchema, // = Record<keyof Fields, unknown>,\r\n>(\r\n\tprops: Omit<CreateFormStoreProps<Fields, ValidationSchema>, 'baseId'> & {\r\n\t\tbaseId?: CreateFormStoreProps<Fields, ValidationSchema>['baseId'];\r\n\t},\r\n) => {\r\n\tconst baseId = useId();\r\n\tconst formStoreRef = useRef(\r\n\t\thandleCreateFormStore({ ...props, baseId: props.baseId || baseId }),\r\n\t);\r\n\r\n\treturn formStoreRef.current;\r\n};\r\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,2BAAAE,EAAA,qBAAAC,EAAA,uBAAAC,IAAA,eAAAC,EAAAL,GCQA,SAASM,EAAWC,EAAYC,EAA8B,CAE7D,IAAIC,EAAgB,GAGpB,OAAQD,EAAM,CACb,IAAK,OAEJC,EAAgBF,EAAK,YAAY,EAAE,MAAM,EAAG,EAAE,EAC9C,MACD,IAAK,OAEJE,EAAgBF,EAAK,aAAa,EAAE,MAAM,EAAG,CAAC,EAC9C,MACD,IAAK,iBAEJE,EAAgBF,EAAK,YAAY,EAAE,MAAM,EAAG,EAAE,EAC9CE,EAAgBA,EAAc,QAAQ,IAAK,GAAG,EAC9C,MACD,IAAK,OAEJ,IAAMC,EAAOH,EAAK,YAAY,EACxBI,EAAaC,EAAcL,CAAI,EACrCE,EAAgB,GAAGC,MAClBC,EAAW,SAAS,EAAE,OAAS,EAC5B,IAAMA,EAAW,SAAS,EAC1BA,EAAW,SAAS,IAGxB,MACD,IAAK,QAEJF,EAAgBF,EAAK,YAAY,EAAE,MAAM,EAAG,CAAC,EAC7C,MACD,QAEC,KACF,CAGA,OAAOE,CACR,CAQA,SAASI,EAAUC,EAA6BN,EAA4B,CAE3E,IAAIO,EAGJ,OAAQP,EAAM,CACb,IAAK,OAEJO,EAAa,IAAI,KAAKD,CAAU,EAChC,MACD,IAAK,OAEJ,GAAM,CAACE,EAAOC,EAASC,CAAO,EAAIJ,EAAW,SAAS,EAAE,MAAM,GAAG,EAEjEC,EAAa,IAAI,KACjBA,EAAW,SAAS,OAAOC,CAAK,CAAC,EACjCD,EAAW,WAAW,OAAOE,CAAO,CAAC,EACrCF,EAAW,WAAW,OAAOG,CAAO,CAAC,EACrC,MACD,IAAK,iBAEJH,EAAa,IAAI,KAAKD,EAAW,SAAS,EAAE,QAAQ,IAAK,GAAG,CAAC,EAC7D,MACD,IAAK,OAEJ,GAAM,CAACK,EAAYC,CAAU,EAAIN,EAAW,SAAS,EAAE,MAAM,IAAI,EAC3DJ,EAAO,OAAOS,CAAU,EACxBE,EAAO,OAAOD,CAAU,EAE9BL,EAAaO,EAAmBZ,EAAMW,CAAI,EAC1C,MACD,IAAK,QAEJN,EAAa,IAAI,KAAK,GAAGD,MAAe,EACxC,MACD,QAECC,EAAa,IAAI,KACjB,KACF,CAGA,OAAOA,CACR,CAOA,SAASH,EAAcL,EAAoB,CAE1C,IAAMgB,EAAY,IAAI,KAAKhB,EAAK,YAAY,EAAG,EAAG,CAAC,EAG7CiB,GACJjB,EAAK,QAAQ,EAAIgB,EAAU,QAAQ,IAAM,IAAO,GAAK,GAAK,IAK5D,OAFmB,KAAK,MAAMC,EAAqB,CAAC,EAAI,CAGzD,CAQA,SAASF,EAAmBZ,EAAcW,EAAoB,CAE7D,IAAMI,EAAe,IAAI,KAAKf,EAAM,EAAG,CAAC,EAIlCgB,GAAqB,EAAID,EAAa,OAAO,GAAK,EAGlDE,EAAc,IAAI,KAAKF,CAAY,EACzCE,EAAY,QAAQF,EAAa,QAAQ,EAAIC,CAAiB,EAG9D,IAAME,GAAsBP,EAAO,GAAK,EAGlCQ,EAAe,IAAI,KAAKF,CAAW,EACzC,OAAAE,EAAa,QAAQF,EAAY,QAAQ,EAAIC,CAAkB,EAExDC,CACR,CAMA,IAAMC,EAAmB,CAOxB,WAAAxB,EAQA,UAAAO,EAOA,cAAAD,EAQA,mBAAAU,CACD,EAEOS,EAAQD,ECtLf,IAAAE,EAA4B,mBAO5BC,EAA8B,iBAExBC,EAAiB,IACtB,uCAAuC,QAAQ,QAAUC,GAAM,CAC9D,IAAMC,EAAK,KAAK,OAAO,EAAI,GAAM,EAEjC,OADUD,IAAM,IAAMC,EAAKA,EAAI,EAAO,GAC7B,SAAS,EAAE,CACrB,CAAC,EAEIC,EAAkBC,GAEtBA,aAAqB,QACrB,eAAgBA,GAChB,OAAOA,EAAU,YAAe,WAI5BC,EAAcC,GACZA,aAAiB,QAAU,WAAYA,EAGlCC,EAAwB,CAGnC,CACD,6BAAAC,EAA+B,GAC/B,uBAAAC,EAAyB,GACzB,wBAAAC,EACA,wBAAAC,EACA,iBAAAC,EACA,GAAGC,CACJ,IAAsD,CAGrD,GAAI,CAACA,EAAO,YAAc,OAAOA,EAAO,YAAe,SACtD,MAAM,IAAI,MAAM,EAAE,EAEnB,IAAMC,EACL,OAAOD,EAAO,QAAW,UACtBb,EAAe,EACfa,EAAO,OACP,GAAGA,EAAO,UACV,GAGEE,EAAW,CAChB,YAAa,OAAO,KAAKF,EAAO,UAAU,EAC1C,OAAQ,GAAGC,OACZ,EACME,EAAgB,EAEhBC,EAAS,CAAC,EAEZC,EAEAC,EACAC,EAAqE,CACxE,OAAQ,EACT,EACIC,EAAiC,GACjCC,EAEJ,QAAWC,KAAaR,EAAS,YAAa,CAC7C,IAAMS,EACLZ,IAAmBW,CAAkD,EAuCtE,GArCAJ,EAAa,CACZ,QAAUK,EAEPrB,EAAeqB,CAAuB,EACrCC,GAAmBD,EAAwB,MAAMC,CAAK,EACvDD,EAHA,OAIH,eAAgB,EAChB,eAAgB,EAChB,OAAQ,CACP,KAAM,CAAE,eAAgB,EAAG,eAAgB,EAAG,SAAU,EAAM,EAC9D,OAAQ,CAAE,eAAgB,EAAG,eAAgB,EAAG,SAAU,EAAM,EAChE,MAAO,CAAE,eAAgB,EAAG,eAAgB,EAAG,SAAU,EAAM,EAC/D,OAAQ,CAAE,eAAgB,EAAG,eAAgB,EAAG,SAAU,EAAM,CACjE,CACD,EAEAN,EAAcL,EAAO,WAAWU,CAAS,EAErCV,EAAO,mBACVQ,EAAiC,GACjCD,EAAwB,CACvB,GAAGA,EACH,GAAGP,EAAO,gBACX,GAGDI,EAAOM,CAAS,EAAI,CACnB,MAAOL,EACP,uBAAwBV,EACxB,sBAAuBE,IAA0Ba,CAAS,EACvDb,EAAwBa,CAAS,EACjC,OACH,sBAAuBZ,IAA0BY,CAAS,EACvDZ,EAAwBY,CAAS,EACjC,MACJ,EAEIF,EACH,IAAKC,KAA2BF,EAC/BD,EAAW,OAAOG,CAAuB,EAAE,SAC1C,CAAC,CAAC,OAAOF,EAAsBE,CAAuB,EAIzDL,EAAOM,CAAS,EAAI,CACnB,GAAGN,EAAOM,CAAS,EACnB,OAAQ,KACR,QAAS,GACT,SAAU,CACT,GAAI,GAAGT,UAAe,OAAOS,CAAS,IACtC,KAAMA,EACN,aAAcN,EAAOM,CAAS,EAAE,KACjC,EACA,WAAAJ,CACD,EAGD,SAAO,eAAuB,CAACO,EAAKC,KAAS,CAC5C,OAAAV,EACA,SAAAF,EACA,cAAAC,EACA,4BAA6BP,EAC7B,YAAa,CAAE,QAAS,CAAC,CAAE,EAC3B,OAAQ,CAAC,EACT,MAAO,CACN,kBAAmB,IAClBiB,EAAKE,IAYG,CACN,OAZc,OAAO,YACrBA,EAAK,SAAS,YAAY,IAAKC,GAAe,CAC7CA,EACA,CACC,GAAGD,EAAK,OAAOC,CAAU,EACzB,OAAQ,KACR,QAAS,EACV,CACD,CAAC,CACF,EAIC,OAAQ,CAAC,CACV,EACA,EACF,oBAAqB,CAACC,EAAML,IAAU,CACrC,IAAMM,EAAeJ,EAAI,EACnBK,EAASD,EAAa,MAAM,sBAAsB,CACvD,KAAAD,EACA,MAAAL,EACA,gBAAiB,QAClB,CAAC,EACDM,EAAa,MAAM,cAAcD,EAAME,CAAM,CAC9C,EACA,eAAiB1B,GACZD,EAAWC,CAAK,EAAUA,EAAM,OAAO,EAAE,QAEzCA,aAAiB,MAAc,CAACA,EAAM,OAAO,EAC1C,CAAC,uBAAuB,EAEhC,mBAAoB,IACnBoB,EAAKO,GAAiB,CACrB,IAAMC,EAAcD,EAAa,SAAS,YACpChB,EAASgB,EAAa,OAExBV,EACJ,IAAKA,KAAaW,EACjBjB,EAAOM,CAAS,EAAI,CACnB,GAAGN,EAAOM,CAAS,EACnB,MAAON,EAAOM,CAAS,EAAE,SAAS,YACnC,EAGD,MAAO,CAAE,OAAAN,CAAO,CACjB,CAAC,EACF,cAAe,CAACa,EAAML,IACrBC,EAAKO,IACG,CACN,OAAQ,CACP,GAAGA,EAAa,OAChB,CAACH,CAAI,EAAG,CACP,GAAGG,EAAa,OAAOH,CAAI,EAC3B,MACC,OAAOL,GAAU,WAGbA,EACDQ,EAAa,OAAOH,CAAI,EAAE,KAC1B,EACAL,CACL,CACD,CACD,EACA,EACF,eAAiBZ,GAChBa,EAAKO,GAAiB,CACrB,IAAME,EAAW,CAAC,CAACtB,EAAO,OAEtBuB,EAAQH,EAAa,OAAOpB,EAAO,IAAI,EAE3C,OAAAuB,EAAQ,CACP,GAAGA,EACH,QAASD,EACT,OAAQtB,EAAO,OACf,WAAY,CACX,GAAGuB,EAAM,WACT,OAAQ,CACP,GAAGA,EAAM,WAAW,OACpB,CAACvB,EAAO,eAAe,EAAG,CACzB,GAAGuB,EAAM,WAAW,OAAOvB,EAAO,eAAe,EACjD,eAAgBsB,EACbC,EAAM,WAAW,OAAOvB,EAAO,eAAe,EAC7C,eACDuB,EAAM,WAAW,OAAOvB,EAAO,eAAe,EAC7C,eAAiB,EACrB,eAAgBsB,EACbC,EAAM,WAAW,OAAOvB,EAAO,eAAe,EAC7C,eACDuB,EAAM,WAAW,OAAOvB,EAAO,eAAe,EAC7C,eAAiB,CACtB,CACD,CACD,CACD,EAEO,CACN,OAAQ,CAAE,GAAGoB,EAAa,OAAQ,CAACpB,EAAO,IAAI,EAAGuB,CAAM,EACvD,OAAQ,CAAE,GAAGH,EAAa,OAAQ,CAACpB,EAAO,IAAI,EAAGA,EAAO,MAAO,CAChE,CACD,CAAC,EACF,8BAA+B,CAAC,CAC/B,OAAAI,EACA,gBAAAoB,EACA,qBAAAC,EACA,qBAAAC,CACD,IAAM,CACL,IAAMC,EAAiB,CAAC,EACpBF,IAAyB,SAC5BE,EAAK,KACJ,wCAAwC,OAAO,KAAKvB,CAAM,EAAE,KAC3D,IACD,IACD,EAGGqB,IAAyB,OAC5BE,EAAK,KACJ,sCAAsC,OAAO,KAAKvB,CAAM,EAAE,KACzD,IACD,IACD,EAGDuB,EAAK,KACJ,cACCD,EAAqB,CAAC,EAAE,YAAY,EACpCA,EAAqB,MAAM,CAAC,IAE9B,EAEAtB,EAAO,QAASmB,GAAU,CACzBI,EAAK,KACJ,UAAU,OAAOJ,EAAM,SAAS,IAAI,uBACnCA,EAAM,WAAW,OAAOC,CAAe,EAAE,mCAEzCD,EAAM,WAAW,OAAOC,CAAe,EAAE,gBAE3C,CACD,CAAC,CACF,EACA,sBAAuB,CAAC,CAAE,KAAAP,EAAM,gBAAAO,EAAiB,MAAOL,CAAO,IAAM,CACpE,IAAMC,EAAeN,EAAI,EAMnBF,EACL,OAAOO,GAAW,WACfA,EAAOC,EAAa,OAAOH,CAAI,EAAE,KAAK,EACtCE,EAGJ,GACC,CAACC,EAAa,OAAOH,CAAI,EAAE,WAAW,OAAOO,CAAe,EAAE,SAE9D,OAAOZ,EAER,IAAMb,EAAmBqB,EAAa,OAAOH,CAAI,EAAE,WAAW,QAE9D,GAAI,CAAClB,EAAkB,OAAOa,EAE9BQ,EAAa,OAAOH,CAAI,EAAE,sBAC1B,IAAIW,EAAiBR,EAAa,OAAOH,CAAI,EAAE,sBAC5CG,EAAa,OAAOH,CAAI,EAAE,sBAAuBL,CAAK,EACtDA,EAEGiB,EAAkBpC,IACvB2B,EAAa,MAAM,eAAe,CACjC,KAAAH,EACA,OAAQG,EAAa,MAAM,eAAe3B,EAAO+B,CAAe,EAChE,gBAAAA,CACD,CAAC,EACMJ,EAAa,OAAOH,CAAI,EAAE,uBAC9BW,EACAR,EAAa,OAAOH,CAAI,EAAE,OAG9B,GAAIG,EAAa,4BAChB,GAAI,CACHA,EAAa,MAAM,8BAA8B,CAChD,OAAQ,CAACA,EAAa,OAAOH,CAAoB,CAAC,EAClD,gBAAAO,EACA,qBAAsB,QACtB,qBAAsB,YACvB,CAAC,EAEDI,EAAiB7B,EAChB6B,EACAJ,CACD,EACIJ,EAAa,OAAOH,CAAI,EAAE,SAC7BG,EAAa,MAAM,eAAe,CACjC,KAAAH,EACA,OAAQ,KACR,gBAAAO,CACD,CAAC,EAEFJ,EAAa,MAAM,8BAA8B,CAChD,OAAQ,CAACA,EAAa,OAAOH,CAAoB,CAAC,EAClD,gBAAAO,EACA,qBAAsB,MACtB,qBAAsB,QACvB,CAAC,CACF,OAAS/B,EAAP,CACDmC,EAAiBC,EAAepC,CAAK,EACrC2B,EAAa,MAAM,8BAA8B,CAChD,OAAQ,CAACA,EAAa,OAAOH,CAAoB,CAAC,EAClD,gBAAAO,EACA,qBAAsB,MACtB,qBAAsB,QACvB,CAAC,CACF,KAEA,IAAI,CACHI,EAAiB7B,EAChB6B,EACAJ,CACD,EACIJ,EAAa,OAAOH,CAAI,EAAE,SAC7BG,EAAa,MAAM,eAAe,CACjC,KAAAH,EACA,OAAQ,KACR,gBAAAO,CACD,CAAC,CACH,OAAS/B,EAAP,CACDmC,EAAiBC,EAAepC,CAAK,CACtC,CAGD,OAAOmC,CACR,EACA,gBAAkBE,GAAQC,GAAU,CAEnC,GADAA,EAAM,eAAe,EACjB,CAACD,EAAI,OAET,IAAMZ,EAAeJ,EAAI,EACnBV,EAASc,EAAa,OACtBc,EAAS,CAAC,EACVC,EAAkB,CAAC,EAKnBC,EAAS,CAAC,EAQZZ,EAAW,GAEXZ,EACJ,IAAKA,KAAaN,EACjB,GAAI,CACH,IAAML,EAAmBK,EAAOM,CAAS,EAAE,WAAW,QAErDN,EAAOM,CAAS,EAAE,WAAW,OAAO,OAAO,UAC3C,OAAOX,GAAqB,aAI5BkC,EAAgBvB,CAAyC,EACxDX,EAAiBK,EAAOM,CAAS,EAAE,MAAO,QAAQ,GAEpDsB,EAAOtB,CAAS,EAAIN,EAAOM,CAAS,EAAE,MAEtCwB,EAAOxB,CAAS,EAAI,CACnB,KAAMA,EACN,OAAQ,KACR,gBAAiB,QAClB,CACD,OAASjB,EAAP,CACDyC,EAAOxB,CAAS,EAAI,CACnB,KAAMA,EACN,OAAQQ,EAAa,MAAM,eAAezB,EAAO,QAAQ,EACzD,gBAAiB,QAClB,EAEA6B,EAAW,EACZ,CAGD,IAAIa,EACJ,IAAKA,KAAYD,EAChBhB,EAAa,MAAM,eAAegB,EAAOC,CAAQ,CAAC,EAG9Cb,GACJQ,EAAGC,EAAO,CACT,OAAAC,EACA,gBAAAC,EACA,SAAAX,EACA,OAAAY,CACD,CAAC,CACH,CACD,CACD,EAAE,CACH,EAEaE,EAIZC,GAGI,CACJ,IAAMpC,KAAS,SAAM,EAKrB,SAJqB,UACpBP,EAAsB,CAAE,GAAG2C,EAAO,OAAQA,EAAM,QAAUpC,CAAO,CAAC,CACnE,EAEoB,OACrB","names":["src_exports","__export","handleCreateFormStore","inputDateHelpers_default","useCreateFormStore","__toCommonJS","formatDate","date","type","formattedDate","year","weekNumber","getWeekNumber","parseDate","dateString","parsedDate","hours","minutes","seconds","yearString","weekString","week","getFirstDateOfWeek","yearStart","daysSinceYearStart","januaryFirst","daysToFirstMonday","firstMonday","daysToTargetMonday","targetMonday","inputDateHelpers","inputDateHelpers_default","import_zustand","import_react","generateUUIDV4","c","r","isZodValidator","validator","isZodError","error","handleCreateFormStore","isUpdatingFieldsValueOnError","trackValidationHistory","valuesFromFieldsToStore","valuesFromStoreToFields","validationSchema","params","baseId","metadata","submitCounter","fields","passedField","validation","fieldValidationEvents","isFieldHavingPassedValidations","fieldValidationEventKey","fieldName","fieldValidationsHandler","value","set","get","prev","fieldsName","name","currentStore","_value","currentState","fieldsNames","hasError","field","validationEvent","validationEventPhase","validationEventState","logs","validatedValue","handleSetError","cb","event","values","validatedValues","errors","errorKey","useCreateFormStore","props"]}