{"version":3,"sources":["../src/utils/inputDateHelpers.ts","../src/utils/index.ts"],"sourcesContent":["import { InputDateTypes } from '../types';\r\n\r\n/**\r\n * Formats a date object to the desired string format based on the type.\r\n * @param {Date} date - The Date object to be formatted.\r\n * @param {string} type - The format type ('date', 'time', 'datetime-local', 'week', or 'month').\r\n * @returns {string} A formatted string based on the specified format.\r\n */\r\nfunction formatDate(date: Date, type: InputDateTypes): string {\r\n\t// Initialize an empty string to hold the formatted date\r\n\tlet formattedDate = '';\r\n\r\n\t// Use a switch statement to determine the appropriate formatting based on the `type` argument\r\n\tswitch (type) {\r\n\t\tcase 'date':\r\n\t\t\t// For the 'date' type, format the date as yyyy-mm-dd using toISOString and slice\r\n\t\t\tformattedDate = date.toISOString().slice(0, 10);\r\n\t\t\tbreak;\r\n\t\tcase 'time':\r\n\t\t\t// For the 'time' type, format the time as hh:mm:ss using toTimeString and slice\r\n\t\t\tformattedDate = date.toTimeString().slice(0, 8);\r\n\t\t\tbreak;\r\n\t\tcase 'datetime-local':\r\n\t\t\t// For the 'datetime-local' type, format the date and time as yyyy-mm-ddThh:mm:ss using toISOString, slice, and replace\r\n\t\t\tformattedDate = date.toISOString().slice(0, 16);\r\n\t\t\tformattedDate = formattedDate.replace('T', ' ');\r\n\t\t\tbreak;\r\n\t\tcase 'week':\r\n\t\t\t// For the 'week' type, format the week as yyyy-Www using getWeekNumber and padStart\r\n\t\t\tconst year = date.getFullYear();\r\n\t\t\tconst weekNumber = getWeekNumber(date);\r\n\t\t\tformattedDate = `${year}-W${\r\n\t\t\t\tweekNumber.toString().length < 2\r\n\t\t\t\t\t? '0' + weekNumber.toString()\r\n\t\t\t\t\t: weekNumber.toString()\r\n\t\t\t}`;\r\n\t\t\t// weekNumber.toString().padStart(2, '0')\r\n\t\t\tbreak;\r\n\t\tcase 'month':\r\n\t\t\t// For the 'month' type, format the month as yyyy-mm using toISOString and slice\r\n\t\t\tformattedDate = date.toISOString().slice(0, 7);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t// If the type is not recognized, return an empty string\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\t// Return the formatted date\r\n\treturn formattedDate;\r\n}\r\n\r\n/**\r\n * Parses a string in the specified format and returns a Date object.\r\n * @param {string} dateString - The string to be parsed.\r\n * @param {string} type - The format type ('date', 'time', 'datetime-local', 'week', or 'month').\r\n * @returns {Date} - The parsed Date object.\r\n */\r\nfunction parseDate(dateString: string | number, type: InputDateTypes): Date {\r\n\t// Declare a variable to hold the parsed date\r\n\tlet parsedDate: Date;\r\n\r\n\t// Use a switch statement to handle the various date/time formats\r\n\tswitch (type) {\r\n\t\tcase 'date':\r\n\t\t\t// For the 'date' type, parse the string as a date in ISO format (yyyy-mm-dd)\r\n\t\t\tparsedDate = new Date(dateString);\r\n\t\t\tbreak;\r\n\t\tcase 'time':\r\n\t\t\t// For the 'time' type, split the string into hours, minutes, and seconds components\r\n\t\t\tconst [hours, minutes, seconds] = dateString.toString().split(':');\r\n\t\t\t// Create a new Date object and set the hours, minutes, and seconds based on the input string\r\n\t\t\tparsedDate = new Date();\r\n\t\t\tparsedDate.setHours(Number(hours));\r\n\t\t\tparsedDate.setMinutes(Number(minutes));\r\n\t\t\tparsedDate.setSeconds(Number(seconds));\r\n\t\t\tbreak;\r\n\t\tcase 'datetime-local':\r\n\t\t\t// For the 'datetime-local' type, replace the space character with 'T' and parse the resulting string as a date in ISO format\r\n\t\t\tparsedDate = new Date(dateString.toString().replace(' ', 'T'));\r\n\t\t\tbreak;\r\n\t\tcase 'week':\r\n\t\t\t// For the 'week' type, split the string into year and week number components\r\n\t\t\tconst [yearString, weekString] = dateString.toString().split('-W');\r\n\t\t\tconst year = Number(yearString);\r\n\t\t\tconst week = Number(weekString);\r\n\t\t\t// Use the getFirstDateOfWeek helper function to calculate the first date of the specified week in the specified year\r\n\t\t\tparsedDate = getFirstDateOfWeek(year, week);\r\n\t\t\tbreak;\r\n\t\tcase 'month':\r\n\t\t\t// For the 'month' type, append '-01' to the input string to represent the first day of the month and parse as a date in ISO format\r\n\t\t\tparsedDate = new Date(dateString + '-01');\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t// For an unrecognized format, return the current date/time\r\n\t\t\tparsedDate = new Date();\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\t// Return the parsed Date object\r\n\treturn parsedDate;\r\n}\r\n\r\n/**\r\n * Returns the week number of the year for a given date.\r\n * @param {Date} date - The date object for which to calculate the week number.\r\n * @returns {number} - The week number.\r\n */\r\nfunction getWeekNumber(date: Date): number {\r\n\t// Get the date for the first day of the year\r\n\tconst yearStart = new Date(date.getFullYear(), 0, 1);\r\n\r\n\t// Calculate the number of days since the start of the year until the given date\r\n\tconst daysSinceYearStart =\r\n\t\t(date.valueOf() - yearStart.valueOf()) / (1000 * 60 * 60 * 24);\r\n\r\n\t// Calculate the week number by dividing the number of days by 7 and rounding down\r\n\tconst weekNumber = Math.floor(daysSinceYearStart / 7) + 1;\r\n\r\n\treturn weekNumber;\r\n}\r\n\r\n/**\r\n * Returns the first date (Monday) of a given week in a year.\r\n * @param {number} year - The year of the target week.\r\n * @param {number} week - The week number (1-53) of the desired week.\r\n * @returns {Date} - The first date (Monday) of the specified week.\r\n */\r\nfunction getFirstDateOfWeek(year: number, week: number): Date {\r\n\t// Find the date of January 1st for the given year\r\n\tconst januaryFirst = new Date(year, 0, 1);\r\n\r\n\t// Calculate the number of days until the first Monday of the year\r\n\t// 0 represents Sunday, 1 represents Monday, and so on\r\n\tconst daysToFirstMonday = (8 - januaryFirst.getDay()) % 7;\r\n\r\n\t// Set the date object to the first Monday of the year\r\n\tconst firstMonday = new Date(januaryFirst);\r\n\tfirstMonday.setDate(januaryFirst.getDate() + daysToFirstMonday);\r\n\r\n\t// Calculate the number of days until the target Monday of the week\r\n\tconst daysToTargetMonday = (week - 1) * 7;\r\n\r\n\t// Set the date object to the target Monday of the week\r\n\tconst targetMonday = new Date(firstMonday);\r\n\ttargetMonday.setDate(firstMonday.getDate() + daysToTargetMonday);\r\n\r\n\treturn targetMonday;\r\n}\r\n\r\n/**\r\n * A collection of helper functions for working with input date values.\r\n * @namespace\r\n */\r\nconst inputDateHelpers = {\r\n\t/**\r\n\t * Formats a date object to the desired string format based on the type.\r\n\t * @param {Date} date - The Date object to be formatted.\r\n\t * @param {string} type - The format type ('date', 'time', 'datetime-local', 'week', or 'month').\r\n\t * @returns {string} A formatted string based on the specified format.\r\n\t */\r\n\tformatDate,\r\n\r\n\t/**\r\n\t * Parses a string in the specified format and returns a Date object.\r\n\t * @param {string} dateString - The string to be parsed.\r\n\t * @param {string} type - The format type ('date', 'time', 'datetime-local', 'week', or 'month').\r\n\t * @returns {Date} - The parsed Date object.\r\n\t */\r\n\tparseDate,\r\n\r\n\t/**\r\n\t * Returns the week number of the year for a given date.\r\n\t * @param {Date} date - The date object for which to calculate the week number.\r\n\t * @returns {number} - The week number.\r\n\t */\r\n\tgetWeekNumber,\r\n\r\n\t/**\r\n\t * Returns the first date (Monday) of a given week in a year.\r\n\t * @param {number} year - The year of the target week.\r\n\t * @param {number} week - The week number (1-53) of the desired week.\r\n\t * @returns {Date} - The first date (Monday) of the specified week.\r\n\t */\r\n\tgetFirstDateOfWeek,\r\n};\r\n\r\nexport default inputDateHelpers;\r\n","export { default as inputDateHelpers } from './inputDateHelpers';\r\n\r\nimport { ZodError, ZodSchema } from 'zod';\r\n\r\nimport { createStore, useStore } from 'zustand';\r\n\r\nimport type {\r\n\tFormStoreApi,\r\n\tPassedAllFieldsShape,\r\n\tValidationEvents,\r\n\tCreateFormStoreProps,\r\n\tCreateCreateFormStore,\r\n} from '../types';\r\n\r\nconst generateUUIDV4 = () =>\r\n\t'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n\t\tconst r = (Math.random() * 16) | 0;\r\n\t\tconst v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n\t\treturn v.toString(16);\r\n\t});\r\n\r\nexport const createFormStore = <PassedFields extends Record<string, unknown>>({\r\n\tisUpdatingFieldsValueOnError = true,\r\n\tbaseId = generateUUIDV4(),\r\n\ttrackValidationHistory = false,\r\n\tvaluesFromFieldsToStore,\r\n\tvaluesFromStoreToFields,\r\n\tvalidationsHandler = {},\r\n\t...params\r\n}: CreateFormStoreProps<PassedFields>): FormStoreApi<PassedFields> => {\r\n\ttype FormStore = CreateCreateFormStore<PassedFields>;\r\n\r\n\tconst errors = {};\r\n\tconst metadata = {\r\n\t\tfieldsNames: Object.keys(params.initValues) as (keyof PassedFields)[],\r\n\t\tformId: `${baseId}-form`,\r\n\t};\r\n\tconst submitCounter = 0;\r\n\r\n\tconst fields = {} as FormStore['fields'];\r\n\r\n\tlet fieldName: keyof PassedFields;\r\n\tlet passedField: (typeof params)['initValues'][keyof PassedFields];\r\n\r\n\tlet validation: (typeof fields)[keyof PassedFields]['validation'];\r\n\tlet passedFieldValidations: NonNullable<typeof params.validation> = {};\r\n\tlet isFieldHavingPassedValidations = false;\r\n\tlet passedFieldValidationKey: ValidationEvents;\r\n\r\n\tlet defaultValidationHandler: NonNullable<\r\n\t\tCreateFormStoreProps<PassedFields>['validationsHandler']\r\n\t>[keyof PassedFields];\r\n\r\n\tfor (fieldName of metadata.fieldsNames) {\r\n\t\tdefaultValidationHandler = validationsHandler[fieldName];\r\n\t\t// debugger;\r\n\t\tvalidation = {\r\n\t\t\thandler:\r\n\t\t\t\tdefaultValidationHandler instanceof ZodSchema\r\n\t\t\t\t\t? (value) => (defaultValidationHandler as ZodSchema).parse(value)\r\n\t\t\t\t\t: defaultValidationHandler,\r\n\t\t\tfailedAttempts: 0,\r\n\t\t\tpassedAttempts: 0,\r\n\t\t\tevents: {\r\n\t\t\t\tblur: { failedAttempts: 0, passedAttempts: 0, isActive: false },\r\n\t\t\t\tchange: { failedAttempts: 0, passedAttempts: 0, isActive: false },\r\n\t\t\t\tmount: { failedAttempts: 0, passedAttempts: 0, isActive: false },\r\n\t\t\t\tsubmit: { failedAttempts: 0, passedAttempts: 0, isActive: false },\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tpassedField = params.initValues[fieldName];\r\n\r\n\t\tif (params.validation) {\r\n\t\t\tisFieldHavingPassedValidations = true;\r\n\t\t\tpassedFieldValidations = {\r\n\t\t\t\t...passedFieldValidations,\r\n\t\t\t\t...params.validation,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tfields[fieldName] = {\r\n\t\t\tvalue: passedField,\r\n\t\t\tisUpdatingValueOnError: isUpdatingFieldsValueOnError,\r\n\t\t\tvalueFromFieldToStore: valuesFromFieldsToStore?.[fieldName]\r\n\t\t\t\t? valuesFromFieldsToStore[fieldName]\r\n\t\t\t\t: undefined,\r\n\t\t\tvalueFromStoreToField: valuesFromStoreToFields?.[fieldName]\r\n\t\t\t\t? valuesFromStoreToFields[fieldName]\r\n\t\t\t\t: undefined,\r\n\t\t} as (typeof fields)[typeof fieldName];\r\n\r\n\t\tif (isFieldHavingPassedValidations) {\r\n\t\t\tfor (passedFieldValidationKey in passedFieldValidations) {\r\n\t\t\t\tvalidation.events[passedFieldValidationKey].isActive =\r\n\t\t\t\t\t!!typeof passedFieldValidations[passedFieldValidationKey];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfields[fieldName] = {\r\n\t\t\t...fields[fieldName],\r\n\t\t\terrors: [],\r\n\t\t\tisDirty: false,\r\n\t\t\tmetadata: {\r\n\t\t\t\tid: `${baseId}-field-${String(fieldName)}`,\r\n\t\t\t\tname: fieldName,\r\n\t\t\t\tinitialValue: fields[fieldName].value,\r\n\t\t\t},\r\n\t\t\tvalidation,\r\n\t\t};\r\n\t}\r\n\r\n\treturn createStore<FormStore>((set, get) => ({\r\n\t\tfields,\r\n\t\terrors,\r\n\t\tmetadata,\r\n\t\tsubmitCounter,\r\n\t\tisTrackingValidationHistory: trackValidationHistory,\r\n\t\tvalidations: { handler: {}, history: [] },\r\n\t\tutils: {\r\n\t\t\thandleOnInputChange: (name, value) => {\r\n\t\t\t\tconst currentStore = get();\r\n\t\t\t\tconst _value = currentStore.utils.handleFieldValidation({\r\n\t\t\t\t\tname,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tvalidationEvent: 'change',\r\n\t\t\t\t});\r\n\t\t\t\tcurrentStore.utils.setFieldValue(name, _value);\r\n\t\t\t},\r\n\t\t\terrorFormatter: (error, validationEvent) => {\r\n\t\t\t\tif (error instanceof ZodError) return error.format()._errors;\r\n\r\n\t\t\t\tif (error instanceof Error) return [error.message];\r\n\t\t\t\treturn ['Something went wrong!'];\r\n\t\t\t},\r\n\t\t\treInitFieldsValues: () =>\r\n\t\t\t\tset((currentState) => {\r\n\t\t\t\t\tconst fieldsNames = currentState.metadata.fieldsNames;\r\n\t\t\t\t\tconst fields = currentState.fields;\r\n\r\n\t\t\t\t\tlet fieldName: (typeof fieldsNames)[number];\r\n\t\t\t\t\tfor (fieldName of fieldsNames) {\r\n\t\t\t\t\t\tfields[fieldName] = {\r\n\t\t\t\t\t\t\t...fields[fieldName],\r\n\t\t\t\t\t\t\tvalue: fields[fieldName].metadata.initialValue,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn { fields };\r\n\t\t\t\t}),\r\n\t\t\tsetFieldValue: (name, value) =>\r\n\t\t\t\tset((currentState) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tfields: {\r\n\t\t\t\t\t\t\t...currentState.fields,\r\n\t\t\t\t\t\t\t[name]: {\r\n\t\t\t\t\t\t\t\t...currentState.fields[name],\r\n\t\t\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\t\t\t\t}),\r\n\t\t\tsetFieldErrors: (params) =>\r\n\t\t\t\tset((currentState) => {\r\n\t\t\t\t\tconst hasError = !!params.errors;\r\n\r\n\t\t\t\t\tlet field = currentState.fields[params.name];\r\n\r\n\t\t\t\t\tfield = {\r\n\t\t\t\t\t\t...field,\r\n\t\t\t\t\t\tisDirty: hasError,\r\n\t\t\t\t\t\terrors: params.errors,\r\n\t\t\t\t\t\tvalidation: {\r\n\t\t\t\t\t\t\t...field.validation,\r\n\t\t\t\t\t\t\tevents: {\r\n\t\t\t\t\t\t\t\t...field.validation.events,\r\n\t\t\t\t\t\t\t\t[params.validationEvent]: {\r\n\t\t\t\t\t\t\t\t\t...field.validation.events[params.validationEvent],\r\n\t\t\t\t\t\t\t\t\tfailedAttempts: hasError\r\n\t\t\t\t\t\t\t\t\t\t? field.validation.events[params.validationEvent]\r\n\t\t\t\t\t\t\t\t\t\t\t\t.failedAttempts\r\n\t\t\t\t\t\t\t\t\t\t: field.validation.events[params.validationEvent]\r\n\t\t\t\t\t\t\t\t\t\t\t\t.failedAttempts + 1,\r\n\t\t\t\t\t\t\t\t\tpassedAttempts: hasError\r\n\t\t\t\t\t\t\t\t\t\t? field.validation.events[params.validationEvent]\r\n\t\t\t\t\t\t\t\t\t\t\t\t.passedAttempts\r\n\t\t\t\t\t\t\t\t\t\t: field.validation.events[params.validationEvent]\r\n\t\t\t\t\t\t\t\t\t\t\t\t.passedAttempts + 1,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tfields: { ...currentState.fields, [params.name]: field },\r\n\t\t\t\t\t\terrors,\r\n\t\t\t\t\t};\r\n\t\t\t\t}),\r\n\t\t\tcreateValidationHistoryRecord: ({\r\n\t\t\t\tfields,\r\n\t\t\t\tvalidationEvent,\r\n\t\t\t\tvalidationEventPhase,\r\n\t\t\t\tvalidationEventState,\r\n\t\t\t}) => {\r\n\t\t\t\t//\r\n\t\t\t\tconst logs: string[] = [];\r\n\t\t\t\tif (validationEventPhase === 'start') {\r\n\t\t\t\t\tlogs.push(\r\n\t\t\t\t\t\t`Starting the validation for fields: [${Object.keys(fields).join(\r\n\t\t\t\t\t\t\t', ',\r\n\t\t\t\t\t\t)}]`,\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (validationEventPhase === 'end') {\r\n\t\t\t\t\tlogs.push(\r\n\t\t\t\t\t\t`Ending the validation for fields: [${Object.keys(fields).join(\r\n\t\t\t\t\t\t\t', ',\r\n\t\t\t\t\t\t)}]`,\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlogs.push(\r\n\t\t\t\t\t`Validation ${\r\n\t\t\t\t\t\tvalidationEventState[0].toUpperCase() +\r\n\t\t\t\t\t\tvalidationEventState.slice(1)\r\n\t\t\t\t\t}!`,\r\n\t\t\t\t);\r\n\r\n\t\t\t\tfields.forEach((field) => {\r\n\t\t\t\t\tlogs.push(\r\n\t\t\t\t\t\t`Field: ${String(field.metadata.name)}, Failed Attempts: ${\r\n\t\t\t\t\t\t\tfield.validation.events[validationEvent].failedAttempts\r\n\t\t\t\t\t\t}, Passed Attempt: ${\r\n\t\t\t\t\t\t\tfield.validation.events[validationEvent].passedAttempts\r\n\t\t\t\t\t\t}`,\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\thandleFieldValidation: ({ name, validationEvent, value }) => {\r\n\t\t\t\tconst currentState = get();\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\t!currentState.fields[name].validation.events[validationEvent].isActive\r\n\t\t\t\t)\r\n\t\t\t\t\treturn value;\r\n\r\n\t\t\t\tconst validationHandler =\r\n\t\t\t\t\tcurrentState.fields[name].validation.handler ||\r\n\t\t\t\t\tcurrentState.validations.handler[name];\r\n\r\n\t\t\t\tif (!validationHandler) return value;\r\n\r\n\t\t\t\tconst valueFromFieldToStore =\r\n\t\t\t\t\tcurrentState.fields[name].valueFromFieldToStore;\r\n\t\t\t\tlet validatedValue = valueFromFieldToStore\r\n\t\t\t\t\t? valueFromFieldToStore(value)\r\n\t\t\t\t\t: value;\r\n\r\n\t\t\t\tlet isUpdatingValueOnError =\r\n\t\t\t\t\tcurrentState.fields[name].isUpdatingValueOnError;\r\n\r\n\t\t\t\tconst handleSetError = (error: unknown) => {\r\n\t\t\t\t\tcurrentState.utils.setFieldErrors({\r\n\t\t\t\t\t\tname,\r\n\t\t\t\t\t\terrors: currentState.utils.errorFormatter(error, validationEvent),\r\n\t\t\t\t\t\tvalidationEvent,\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn isUpdatingValueOnError\r\n\t\t\t\t\t\t? validatedValue\r\n\t\t\t\t\t\t: currentState.fields[name].value;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (currentState.isTrackingValidationHistory) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tcurrentState.utils.createValidationHistoryRecord({\r\n\t\t\t\t\t\t\tfields: [currentState.fields[name]],\r\n\t\t\t\t\t\t\tvalidationEvent,\r\n\t\t\t\t\t\t\tvalidationEventPhase: 'start',\r\n\t\t\t\t\t\t\tvalidationEventState: 'processing',\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tvalidatedValue = validationHandler(validatedValue, validationEvent);\r\n\t\t\t\t\t\tif (currentState.fields[name].isDirty)\r\n\t\t\t\t\t\t\tcurrentState.utils.setFieldErrors({\r\n\t\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\t\terrors: null,\r\n\t\t\t\t\t\t\t\tvalidationEvent,\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tcurrentState.utils.createValidationHistoryRecord({\r\n\t\t\t\t\t\t\tfields: [currentState.fields[name]],\r\n\t\t\t\t\t\t\tvalidationEvent,\r\n\t\t\t\t\t\t\tvalidationEventPhase: 'end',\r\n\t\t\t\t\t\t\tvalidationEventState: 'passed',\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\tvalidatedValue = handleSetError(error);\r\n\t\t\t\t\t\tcurrentState.utils.createValidationHistoryRecord({\r\n\t\t\t\t\t\t\tfields: [currentState.fields[name]],\r\n\t\t\t\t\t\t\tvalidationEvent,\r\n\t\t\t\t\t\t\tvalidationEventPhase: 'end',\r\n\t\t\t\t\t\t\tvalidationEventState: 'failed',\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tvalidatedValue = validationHandler(validatedValue, validationEvent);\r\n\t\t\t\t\t\tif (currentState.fields[name].isDirty)\r\n\t\t\t\t\t\t\tcurrentState.utils.setFieldErrors({\r\n\t\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\t\terrors: null,\r\n\t\t\t\t\t\t\t\tvalidationEvent,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\tvalidatedValue = handleSetError(error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn validatedValue;\r\n\t\t\t},\r\n\t\t},\r\n\t}));\r\n};\r\n\r\nexport const useFormStore = <TAllFields extends PassedAllFieldsShape, U>(\r\n\tstore: FormStoreApi<TAllFields>,\r\n\tcb: (\r\n\t\tstate: FormStoreApi<TAllFields> extends {\r\n\t\t\tgetState: () => infer T;\r\n\t\t}\r\n\t\t\t? T\r\n\t\t\t: never,\r\n\t) => U,\r\n) => useStore(store, cb);\r\n"],"mappings":";AAQA,SAAS,WAAW,MAAY,MAA8B;AAE7D,MAAI,gBAAgB;AAGpB,UAAQ,MAAM;AAAA,IACb,KAAK;AAEJ,sBAAgB,KAAK,YAAY,EAAE,MAAM,GAAG,EAAE;AAC9C;AAAA,IACD,KAAK;AAEJ,sBAAgB,KAAK,aAAa,EAAE,MAAM,GAAG,CAAC;AAC9C;AAAA,IACD,KAAK;AAEJ,sBAAgB,KAAK,YAAY,EAAE,MAAM,GAAG,EAAE;AAC9C,sBAAgB,cAAc,QAAQ,KAAK,GAAG;AAC9C;AAAA,IACD,KAAK;AAEJ,YAAM,OAAO,KAAK,YAAY;AAC9B,YAAM,aAAa,cAAc,IAAI;AACrC,sBAAgB,GAAG,SAClB,WAAW,SAAS,EAAE,SAAS,IAC5B,MAAM,WAAW,SAAS,IAC1B,WAAW,SAAS;AAGxB;AAAA,IACD,KAAK;AAEJ,sBAAgB,KAAK,YAAY,EAAE,MAAM,GAAG,CAAC;AAC7C;AAAA,IACD;AAEC;AAAA,EACF;AAGA,SAAO;AACR;AAQA,SAAS,UAAU,YAA6B,MAA4B;AAE3E,MAAI;AAGJ,UAAQ,MAAM;AAAA,IACb,KAAK;AAEJ,mBAAa,IAAI,KAAK,UAAU;AAChC;AAAA,IACD,KAAK;AAEJ,YAAM,CAAC,OAAO,SAAS,OAAO,IAAI,WAAW,SAAS,EAAE,MAAM,GAAG;AAEjE,mBAAa,oBAAI,KAAK;AACtB,iBAAW,SAAS,OAAO,KAAK,CAAC;AACjC,iBAAW,WAAW,OAAO,OAAO,CAAC;AACrC,iBAAW,WAAW,OAAO,OAAO,CAAC;AACrC;AAAA,IACD,KAAK;AAEJ,mBAAa,IAAI,KAAK,WAAW,SAAS,EAAE,QAAQ,KAAK,GAAG,CAAC;AAC7D;AAAA,IACD,KAAK;AAEJ,YAAM,CAAC,YAAY,UAAU,IAAI,WAAW,SAAS,EAAE,MAAM,IAAI;AACjE,YAAM,OAAO,OAAO,UAAU;AAC9B,YAAM,OAAO,OAAO,UAAU;AAE9B,mBAAa,mBAAmB,MAAM,IAAI;AAC1C;AAAA,IACD,KAAK;AAEJ,mBAAa,oBAAI,KAAK,aAAa,KAAK;AACxC;AAAA,IACD;AAEC,mBAAa,oBAAI,KAAK;AACtB;AAAA,EACF;AAGA,SAAO;AACR;AAOA,SAAS,cAAc,MAAoB;AAE1C,QAAM,YAAY,IAAI,KAAK,KAAK,YAAY,GAAG,GAAG,CAAC;AAGnD,QAAM,sBACJ,KAAK,QAAQ,IAAI,UAAU,QAAQ,MAAM,MAAO,KAAK,KAAK;AAG5D,QAAM,aAAa,KAAK,MAAM,qBAAqB,CAAC,IAAI;AAExD,SAAO;AACR;AAQA,SAAS,mBAAmB,MAAc,MAAoB;AAE7D,QAAM,eAAe,IAAI,KAAK,MAAM,GAAG,CAAC;AAIxC,QAAM,qBAAqB,IAAI,aAAa,OAAO,KAAK;AAGxD,QAAM,cAAc,IAAI,KAAK,YAAY;AACzC,cAAY,QAAQ,aAAa,QAAQ,IAAI,iBAAiB;AAG9D,QAAM,sBAAsB,OAAO,KAAK;AAGxC,QAAM,eAAe,IAAI,KAAK,WAAW;AACzC,eAAa,QAAQ,YAAY,QAAQ,IAAI,kBAAkB;AAE/D,SAAO;AACR;AAMA,IAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA;AACD;AAEA,IAAO,2BAAQ;;;ACxLf,SAAS,UAAU,iBAAiB;AAEpC,SAAS,aAAa,gBAAgB;AAUtC,IAAM,iBAAiB,MACtB,uCAAuC,QAAQ,SAAS,CAAC,MAAM;AAC9D,QAAM,IAAK,KAAK,OAAO,IAAI,KAAM;AACjC,QAAM,IAAI,MAAM,MAAM,IAAK,IAAI,IAAO;AACtC,SAAO,EAAE,SAAS,EAAE;AACrB,CAAC;AAEK,IAAM,kBAAkB,CAA+C;AAAA,EAC7E,+BAA+B;AAAA,EAC/B,SAAS,eAAe;AAAA,EACxB,yBAAyB;AAAA,EACzB;AAAA,EACA;AAAA,EACA,qBAAqB,CAAC;AAAA,EACtB,GAAG;AACJ,MAAsE;AAGrE,QAAM,SAAS,CAAC;AAChB,QAAM,WAAW;AAAA,IAChB,aAAa,OAAO,KAAK,OAAO,UAAU;AAAA,IAC1C,QAAQ,GAAG;AAAA,EACZ;AACA,QAAM,gBAAgB;AAEtB,QAAM,SAAS,CAAC;AAEhB,MAAI;AACJ,MAAI;AAEJ,MAAI;AACJ,MAAI,yBAAgE,CAAC;AACrE,MAAI,iCAAiC;AACrC,MAAI;AAEJ,MAAI;AAIJ,OAAK,aAAa,SAAS,aAAa;AACvC,+BAA2B,mBAAmB,SAAS;AAEvD,iBAAa;AAAA,MACZ,SACC,oCAAoC,YACjC,CAAC,UAAW,yBAAuC,MAAM,KAAK,IAC9D;AAAA,MACJ,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACP,MAAM,EAAE,gBAAgB,GAAG,gBAAgB,GAAG,UAAU,MAAM;AAAA,QAC9D,QAAQ,EAAE,gBAAgB,GAAG,gBAAgB,GAAG,UAAU,MAAM;AAAA,QAChE,OAAO,EAAE,gBAAgB,GAAG,gBAAgB,GAAG,UAAU,MAAM;AAAA,QAC/D,QAAQ,EAAE,gBAAgB,GAAG,gBAAgB,GAAG,UAAU,MAAM;AAAA,MACjE;AAAA,IACD;AAEA,kBAAc,OAAO,WAAW,SAAS;AAEzC,QAAI,OAAO,YAAY;AACtB,uCAAiC;AACjC,+BAAyB;AAAA,QACxB,GAAG;AAAA,QACH,GAAG,OAAO;AAAA,MACX;AAAA,IACD;AAEA,WAAO,SAAS,IAAI;AAAA,MACnB,OAAO;AAAA,MACP,wBAAwB;AAAA,MACxB,uBAAuB,0BAA0B,SAAS,IACvD,wBAAwB,SAAS,IACjC;AAAA,MACH,uBAAuB,0BAA0B,SAAS,IACvD,wBAAwB,SAAS,IACjC;AAAA,IACJ;AAEA,QAAI,gCAAgC;AACnC,WAAK,4BAA4B,wBAAwB;AACxD,mBAAW,OAAO,wBAAwB,EAAE,WAC3C,CAAC,CAAC,OAAO,uBAAuB,wBAAwB;AAAA,MAC1D;AAAA,IACD;AAEA,WAAO,SAAS,IAAI;AAAA,MACnB,GAAG,OAAO,SAAS;AAAA,MACnB,QAAQ,CAAC;AAAA,MACT,SAAS;AAAA,MACT,UAAU;AAAA,QACT,IAAI,GAAG,gBAAgB,OAAO,SAAS;AAAA,QACvC,MAAM;AAAA,QACN,cAAc,OAAO,SAAS,EAAE;AAAA,MACjC;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAEA,SAAO,YAAuB,CAAC,KAAK,SAAS;AAAA,IAC5C;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,6BAA6B;AAAA,IAC7B,aAAa,EAAE,SAAS,CAAC,GAAG,SAAS,CAAC,EAAE;AAAA,IACxC,OAAO;AAAA,MACN,qBAAqB,CAAC,MAAM,UAAU;AACrC,cAAM,eAAe,IAAI;AACzB,cAAM,SAAS,aAAa,MAAM,sBAAsB;AAAA,UACvD;AAAA,UACA;AAAA,UACA,iBAAiB;AAAA,QAClB,CAAC;AACD,qBAAa,MAAM,cAAc,MAAM,MAAM;AAAA,MAC9C;AAAA,MACA,gBAAgB,CAAC,OAAO,oBAAoB;AAC3C,YAAI,iBAAiB;AAAU,iBAAO,MAAM,OAAO,EAAE;AAErD,YAAI,iBAAiB;AAAO,iBAAO,CAAC,MAAM,OAAO;AACjD,eAAO,CAAC,uBAAuB;AAAA,MAChC;AAAA,MACA,oBAAoB,MACnB,IAAI,CAAC,iBAAiB;AACrB,cAAM,cAAc,aAAa,SAAS;AAC1C,cAAMA,UAAS,aAAa;AAE5B,YAAIC;AACJ,aAAKA,cAAa,aAAa;AAC9B,UAAAD,QAAOC,UAAS,IAAI;AAAA,YACnB,GAAGD,QAAOC,UAAS;AAAA,YACnB,OAAOD,QAAOC,UAAS,EAAE,SAAS;AAAA,UACnC;AAAA,QACD;AAEA,eAAO,EAAE,QAAAD,QAAO;AAAA,MACjB,CAAC;AAAA,MACF,eAAe,CAAC,MAAM,UACrB,IAAI,CAAC,iBAAiB;AACrB,eAAO;AAAA,UACN,QAAQ;AAAA,YACP,GAAG,aAAa;AAAA,YAChB,CAAC,IAAI,GAAG;AAAA,cACP,GAAG,aAAa,OAAO,IAAI;AAAA,cAC3B;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD,CAAC;AAAA,MACF,gBAAgB,CAACE,YAChB,IAAI,CAAC,iBAAiB;AACrB,cAAM,WAAW,CAAC,CAACA,QAAO;AAE1B,YAAI,QAAQ,aAAa,OAAOA,QAAO,IAAI;AAE3C,gBAAQ;AAAA,UACP,GAAG;AAAA,UACH,SAAS;AAAA,UACT,QAAQA,QAAO;AAAA,UACf,YAAY;AAAA,YACX,GAAG,MAAM;AAAA,YACT,QAAQ;AAAA,cACP,GAAG,MAAM,WAAW;AAAA,cACpB,CAACA,QAAO,eAAe,GAAG;AAAA,gBACzB,GAAG,MAAM,WAAW,OAAOA,QAAO,eAAe;AAAA,gBACjD,gBAAgB,WACb,MAAM,WAAW,OAAOA,QAAO,eAAe,EAC7C,iBACD,MAAM,WAAW,OAAOA,QAAO,eAAe,EAC7C,iBAAiB;AAAA,gBACrB,gBAAgB,WACb,MAAM,WAAW,OAAOA,QAAO,eAAe,EAC7C,iBACD,MAAM,WAAW,OAAOA,QAAO,eAAe,EAC7C,iBAAiB;AAAA,cACtB;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAEA,eAAO;AAAA,UACN,QAAQ,EAAE,GAAG,aAAa,QAAQ,CAACA,QAAO,IAAI,GAAG,MAAM;AAAA,UACvD;AAAA,QACD;AAAA,MACD,CAAC;AAAA,MACF,+BAA+B,CAAC;AAAA,QAC/B,QAAAF;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD,MAAM;AAEL,cAAM,OAAiB,CAAC;AACxB,YAAI,yBAAyB,SAAS;AACrC,eAAK;AAAA,YACJ,wCAAwC,OAAO,KAAKA,OAAM,EAAE;AAAA,cAC3D;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAEA,YAAI,yBAAyB,OAAO;AACnC,eAAK;AAAA,YACJ,sCAAsC,OAAO,KAAKA,OAAM,EAAE;AAAA,cACzD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAEA,aAAK;AAAA,UACJ,cACC,qBAAqB,CAAC,EAAE,YAAY,IACpC,qBAAqB,MAAM,CAAC;AAAA,QAE9B;AAEA,QAAAA,QAAO,QAAQ,CAAC,UAAU;AACzB,eAAK;AAAA,YACJ,UAAU,OAAO,MAAM,SAAS,IAAI,uBACnC,MAAM,WAAW,OAAO,eAAe,EAAE,mCAEzC,MAAM,WAAW,OAAO,eAAe,EAAE;AAAA,UAE3C;AAAA,QACD,CAAC;AAAA,MACF;AAAA,MACA,uBAAuB,CAAC,EAAE,MAAM,iBAAiB,MAAM,MAAM;AAC5D,cAAM,eAAe,IAAI;AAEzB,YACC,CAAC,aAAa,OAAO,IAAI,EAAE,WAAW,OAAO,eAAe,EAAE;AAE9D,iBAAO;AAER,cAAM,oBACL,aAAa,OAAO,IAAI,EAAE,WAAW,WACrC,aAAa,YAAY,QAAQ,IAAI;AAEtC,YAAI,CAAC;AAAmB,iBAAO;AAE/B,cAAM,wBACL,aAAa,OAAO,IAAI,EAAE;AAC3B,YAAI,iBAAiB,wBAClB,sBAAsB,KAAK,IAC3B;AAEH,YAAI,yBACH,aAAa,OAAO,IAAI,EAAE;AAE3B,cAAM,iBAAiB,CAAC,UAAmB;AAC1C,uBAAa,MAAM,eAAe;AAAA,YACjC;AAAA,YACA,QAAQ,aAAa,MAAM,eAAe,OAAO,eAAe;AAAA,YAChE;AAAA,UACD,CAAC;AACD,iBAAO,yBACJ,iBACA,aAAa,OAAO,IAAI,EAAE;AAAA,QAC9B;AAEA,YAAI,aAAa,6BAA6B;AAC7C,cAAI;AACH,yBAAa,MAAM,8BAA8B;AAAA,cAChD,QAAQ,CAAC,aAAa,OAAO,IAAI,CAAC;AAAA,cAClC;AAAA,cACA,sBAAsB;AAAA,cACtB,sBAAsB;AAAA,YACvB,CAAC;AAED,6BAAiB,kBAAkB,gBAAgB,eAAe;AAClE,gBAAI,aAAa,OAAO,IAAI,EAAE;AAC7B,2BAAa,MAAM,eAAe;AAAA,gBACjC;AAAA,gBACA,QAAQ;AAAA,gBACR;AAAA,cACD,CAAC;AAEF,yBAAa,MAAM,8BAA8B;AAAA,cAChD,QAAQ,CAAC,aAAa,OAAO,IAAI,CAAC;AAAA,cAClC;AAAA,cACA,sBAAsB;AAAA,cACtB,sBAAsB;AAAA,YACvB,CAAC;AAAA,UACF,SAAS,OAAP;AACD,6BAAiB,eAAe,KAAK;AACrC,yBAAa,MAAM,8BAA8B;AAAA,cAChD,QAAQ,CAAC,aAAa,OAAO,IAAI,CAAC;AAAA,cAClC;AAAA,cACA,sBAAsB;AAAA,cACtB,sBAAsB;AAAA,YACvB,CAAC;AAAA,UACF;AAAA,QACD,OAAO;AACN,cAAI;AACH,6BAAiB,kBAAkB,gBAAgB,eAAe;AAClE,gBAAI,aAAa,OAAO,IAAI,EAAE;AAC7B,2BAAa,MAAM,eAAe;AAAA,gBACjC;AAAA,gBACA,QAAQ;AAAA,gBACR;AAAA,cACD,CAAC;AAAA,UACH,SAAS,OAAP;AACD,6BAAiB,eAAe,KAAK;AAAA,UACtC;AAAA,QACD;AAEA,eAAO;AAAA,MACR;AAAA,IACD;AAAA,EACD,EAAE;AACH;AAEO,IAAM,eAAe,CAC3B,OACA,OAOI,SAAS,OAAO,EAAE;","names":["fields","fieldName","params"]}