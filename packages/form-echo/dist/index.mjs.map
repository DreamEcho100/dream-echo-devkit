{"version":3,"sources":["../src/zod.js"],"names":["isZodValidator","validator","isZodError","error","errorFormatter","err"],"mappings":"yCAIO,SAASA,EAAeC,EAAW,CACzC,OACCA,aAAqB,QACrB,eAAgBA,GAChB,OAAOA,EAAU,YAAe,UAElC,CAMO,SAASC,EAAWC,EAAO,CACjC,OAAOA,aAAiB,QAAU,WAAYA,CAC/C,CAaO,SAASC,EAAeC,EAAK,CACnC,OAAIH,EAAWG,CAAG,EAWbA,EAAI,WAAW,WAAW,OAAS,EAC/B,CAAE,QAASA,EAAI,WAAW,WAAW,CAAC,CAAE,EAGzCA,EAAI,OAGRA,aAAe,MAAcA,EAE1B,CAAE,QAAS,uBAAwB,CAC3C","sourcesContent":["/**\r\n * @param {unknown} validator\r\n * @returns {validator is import(\"zod\").ZodSchema}\r\n */\r\nexport function isZodValidator(validator) {\r\n\treturn !!(\r\n\t\tvalidator instanceof Object &&\r\n\t\t'parseAsync' in validator &&\r\n\t\ttypeof validator.parseAsync === 'function'\r\n\t);\r\n}\r\n\r\n/**\r\n * @param {unknown} error\r\n * @returns {error is import(\"zod\").ZodError}\r\n */\r\nexport function isZodError(error) {\r\n\treturn error instanceof Object && 'errors' in error;\r\n}\r\n\r\n// export const generateUUIDV4 = () =>\r\n// \t'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n// \t\tconst r = (Math.random() * 16) | 0;\r\n// \t\tconst v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n// \t\treturn v.toString(16);\r\n// \t});\r\n\r\n/**\r\n * @param {unknown} err\r\n * @returns {import(\"./types\").FormError}\r\n * */\r\nexport function errorFormatter(err) {\r\n\tif (isZodError(err)) {\r\n\t\t// /** @type {({ message: string; path: (string | number)[] })[]} */\r\n\t\t// const errors = [];\r\n\r\n\t\t// for (const item of err.issues) {\r\n\t\t// \terrors.push({\r\n\t\t// \t\tmessage: item.message,\r\n\t\t// \t\tpath: item.path,\r\n\t\t// \t});\r\n\t\t// }\r\n\r\n\t\tif (err.formErrors.formErrors.length > 0) {\r\n\t\t\treturn { message: err.formErrors.formErrors[0] };\r\n\t\t}\r\n\r\n\t\treturn err.errors;\r\n\t}\r\n\r\n\tif (err instanceof Error) return err;\r\n\r\n\treturn { message: 'Something went wrong!' };\r\n}\r\n"]}