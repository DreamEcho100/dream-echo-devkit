{"version":3,"sources":["../src/utils/FormStoreField.js","../src/utils/zod.ts","../src/utils/inputDateHelpers.js","../src/utils/zustand.ts","../src/utils/fieldValueHelpers.js","../src/utils/index.ts"],"sourcesContent":["/**\r\n * @template Name\r\n * @template Value\r\n * @typedef FieldMetadata\r\n *\r\n * @prop {Name & string} name\r\n * @prop {Value} initialValue\r\n */\r\n\r\n/** @exports FieldMetadata */\r\n\r\n/**\r\n * @template FieldsValues\r\n * @template {keyof FieldsValues} Key\r\n */\r\nexport default class FormStoreField {\r\n\t/** @type {string} */\r\n\tid;\r\n\r\n\t/** @type {FieldsValues[Key]} */\r\n\tvalue;\r\n\r\n\t/** @type {FieldMetadata<Key, FieldsValues[Key]>} */\r\n\tmetadata;\r\n\r\n\t/** @type {((fieldValue: unknown) => Exclude<FieldsValues[Key], (value: FieldsValues[Key]) => FieldsValues[Key]>) | undefined} */\r\n\tvalueFromFieldToStore;\r\n\r\n\t/** @type {(storeValue: FieldsValues[Key]) => string | ReadonlyArray<string> | number | undefined} */\r\n\tvalueFromStoreToField;\r\n\r\n\t/**\r\n\t * @param {{\r\n\t *   id: string;\r\n\t *   value: FieldsValues[Key];\r\n\t *   metadata: FieldMetadata<Key, FieldsValues[Key]>;\r\n\t *   valueFromFieldToStore?: (fieldValue: unknown) => Exclude<FieldsValues[Key], (value: FieldsValues[Key]) => FieldsValues[Key]>;\r\n\t *   valueFromStoreToField?: (StoreValue: FieldsValues[Key]) => string | ReadonlyArray<string> | number | undefined;\r\n\t * }} params\r\n\t */\r\n\tconstructor(params) {\r\n\t\t/** @type {string} */\r\n\t\tthis.id = params.id;\r\n\r\n\t\t/** @type {FieldsValues[Key]} */\r\n\t\tthis.value = params.value;\r\n\r\n\t\t/** @type {FieldMetadata<Key, FieldsValues[Key]>} */\r\n\t\tthis.metadata = params.metadata;\r\n\r\n\t\t/** @type {boolean} */\r\n\r\n\t\t/** @type {(fieldValue: unknown) => Exclude<FieldsValues[Key], (value: FieldsValues[Key]) => FieldsValues[Key]>} */\r\n\t\tthis.valueFromFieldToStore = params.valueFromFieldToStore;\r\n\r\n\t\t/** @type {(StoreValue: FieldsValues[Key]) => string | ReadonlyArray<string> | number | undefined} */\r\n\t\tthis.valueFromStoreToField =\r\n\t\t\tparams.valueFromStoreToField ??\r\n\t\t\t/**\r\n\t\t\t * @param {FieldsValues[Key]} StoreValue\r\n\t\t\t * @returns string | ReadonlyArray<string> | number | undefined\r\n\t\t\t */\r\n\t\t\t(() => this.value ?? '');\r\n\t}\r\n\r\n\t/**\r\n\t * @description Gets the field value converted _(using the passed `valueFromStoreToField` if not it will just return the original value)_ from the store value.\r\n\t *\r\n\t * @type {string | ReadonlyArray<string> | number | undefined}\r\n\t * */\r\n\tget storeToFieldValue() {\r\n\t\treturn this.valueFromStoreToField(this.value);\r\n\t}\r\n}\r\n","import { type ZodError, type ZodSchema } from 'zod';\r\n\r\nexport function isZodValidator(validator: unknown): validator is ZodSchema {\r\n\treturn !!(\r\n\t\tvalidator instanceof Object &&\r\n\t\t'parseAsync' in validator &&\r\n\t\ttypeof validator.parseAsync === 'function'\r\n\t);\r\n}\r\n\r\nexport function isZodError(error: unknown): error is ZodError {\r\n\treturn error instanceof Object && 'errors' in error;\r\n}\r\n\r\n// export const generateUUIDV4 = () =>\r\n// \t'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n// \t\tconst r = (Math.random() * 16) | 0;\r\n// \t\tconst v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n// \t\treturn v.toString(16);\r\n// \t});\r\n\r\nexport function errorFormatter(error: unknown) {\r\n\tif (isZodError(error)) return error.format()._errors.join(', ');\r\n\r\n\tif (error instanceof Error) return error.message;\r\n\r\n\treturn 'Something went wrong!';\r\n}\r\n","/**\r\n * Formats a date object to the desired string format based on the type.\r\n * @param {Date} date - The Date object to be formatted.\r\n * @param {import(\"..\").InputDateTypes} type - The format type ('date', 'time', 'datetime-local', 'week', or 'month').\r\n * @returns {string} A formatted string based on the specified format.\r\n */\r\nexport function formatDate(date, type) {\r\n\t// Initialize an empty string to hold the formatted date\r\n\tlet formattedDate = '';\r\n\r\n\t// Use a switch statement to determine the appropriate formatting based on the `type` argument\r\n\tswitch (type) {\r\n\t\tcase 'date':\r\n\t\t\t// For the 'date' type, format the date as yyyy-mm-dd using toISOString and slice\r\n\t\t\tformattedDate = date.toISOString().slice(0, 10);\r\n\t\t\tbreak;\r\n\t\tcase 'time':\r\n\t\t\t// For the 'time' type, format the time as hh:mm:ss using toTimeString and slice\r\n\t\t\tformattedDate = date.toTimeString().slice(0, 8);\r\n\t\t\tbreak;\r\n\t\tcase 'datetime-local':\r\n\t\t\t// For the 'datetime-local' type, format the date and time as yyyy-mm-ddThh:mm:ss using toISOString, slice, and replace\r\n\t\t\t// formattedDate = date.toISOString().slice(0, 16);\r\n\t\t\t// formattedDate = formattedDate.replace('T', ' ');\r\n\t\t\tformattedDate = `${date.getFullYear()}-${`${\r\n\t\t\t\tdate.getMonth() + 1\r\n\t\t\t}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(\r\n\t\t\t\t2,\r\n\t\t\t\t'0',\r\n\t\t\t)}T${`${date.getHours()}`.padStart(\r\n\t\t\t\t2,\r\n\t\t\t\t'0',\r\n\t\t\t)}:${`${date.getMinutes()}`.padStart(2, '0')}`;\r\n\t\t\tbreak;\r\n\t\tcase 'week':\r\n\t\t\t// For the 'week' type, format the week as yyyy-Www using getWeekNumber and padStart\r\n\t\t\tconst year = date.getFullYear();\r\n\t\t\tconst weekNumber = getWeekNumber(date);\r\n\t\t\tformattedDate = `${year}-W${\r\n\t\t\t\tweekNumber.toString().length < 2\r\n\t\t\t\t\t? '0' + weekNumber.toString()\r\n\t\t\t\t\t: weekNumber.toString()\r\n\t\t\t}`;\r\n\t\t\t// weekNumber.toString().padStart(2, '0')\r\n\t\t\tbreak;\r\n\t\tcase 'month':\r\n\t\t\t// For the 'month' type, format the month as yyyy-mm using toISOString and slice\r\n\t\t\tformattedDate = date.toISOString().slice(0, 7);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t// If the type is not recognized, return an empty string\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\t// Return the formatted date\r\n\treturn formattedDate;\r\n}\r\n\r\n/**\r\n * Parses a string in the specified format and returns a Date object.\r\n * @param {string | number} dateString - The string to be parsed.\r\n * @param {string} type - The format type ('date', 'time', 'datetime-local', 'week', or 'month').\r\n * @returns {Date} - The parsed Date object.\r\n */\r\nexport function parseDate(dateString, type) {\r\n\t// Declare a variable to hold the parsed date\r\n\t/** @type {Date} */\r\n\tlet parsedDate;\r\n\r\n\t// Use a switch statement to handle the various date/time formats\r\n\tswitch (type) {\r\n\t\tcase 'date':\r\n\t\t\t// For the 'date' type, parse the string as a date in ISO format (yyyy-mm-dd)\r\n\t\t\tparsedDate = new Date(dateString);\r\n\t\t\tbreak;\r\n\t\tcase 'time':\r\n\t\t\t// For the 'time' type, split the string into hours, minutes, and seconds components\r\n\t\t\tconst [hours, minutes, seconds] = dateString.toString().split(':');\r\n\t\t\t// Create a new Date object and set the hours, minutes, and seconds based on the input string\r\n\t\t\tparsedDate = new Date();\r\n\t\t\tparsedDate.setHours(Number(hours || 0));\r\n\t\t\tparsedDate.setMinutes(Number(minutes || 0));\r\n\t\t\tparsedDate.setSeconds(Number(seconds || 0));\r\n\t\t\tbreak;\r\n\t\tcase 'datetime-local':\r\n\t\t\t// For the 'datetime-local' type, replace the space character with 'T' and parse the resulting string as a date in ISO format\r\n\t\t\tparsedDate = new Date(dateString.toString().replace(' ', 'T'));\r\n\t\t\tbreak;\r\n\t\tcase 'week':\r\n\t\t\t// For the 'week' type, split the string into year and week number components\r\n\t\t\tconst [yearString, weekString] = dateString.toString().split('-W');\r\n\t\t\tconst year = Number(yearString);\r\n\t\t\tconst week = Number(weekString);\r\n\t\t\t// Use the getFirstDateOfWeek helper function to calculate the first date of the specified week in the specified year\r\n\t\t\tparsedDate = getFirstDateOfWeek(year, week);\r\n\t\t\tbreak;\r\n\t\tcase 'month':\r\n\t\t\t// For the 'month' type, append '-01' to the input string to represent the first day of the month and parse as a date in ISO format\r\n\t\t\tparsedDate = new Date(`${dateString}-01`);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t// For an unrecognized format, return the current date/time\r\n\t\t\tparsedDate = new Date();\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\t// Return the parsed Date object\r\n\treturn parsedDate;\r\n}\r\n\r\n/**\r\n * Returns the week number of the year for a given date.\r\n * @param {Date} date - The date object for which to calculate the week number.\r\n * @returns {number} - The week number.\r\n */\r\nexport function getWeekNumber(date) {\r\n\t// Get the date for the first day of the year\r\n\tconst yearStart = new Date(date.getFullYear(), 0, 1);\r\n\r\n\t// Calculate the number of days since the start of the year until the given date\r\n\tconst daysSinceYearStart =\r\n\t\t(date.valueOf() - yearStart.valueOf()) / (1000 * 60 * 60 * 24);\r\n\r\n\t// Calculate the week number by dividing the number of days by 7 and rounding down\r\n\tconst weekNumber = Math.floor(daysSinceYearStart / 7) + 1;\r\n\r\n\treturn weekNumber;\r\n}\r\n\r\n/**\r\n * Returns the first date (Monday) of a given week in a year.\r\n * @param {number} year - The year of the target week.\r\n * @param {number} week - The week number (1-53) of the desired week.\r\n * @returns {Date} - The first date (Monday) of the specified week.\r\n */\r\nexport function getFirstDateOfWeek(year, week) {\r\n\t// Find the date of January 1st for the given year\r\n\tconst januaryFirst = new Date(year, 0, 1);\r\n\r\n\t// Calculate the number of days until the first Monday of the year\r\n\t// 0 represents Sunday, 1 represents Monday, and so on\r\n\tconst daysToFirstMonday = (8 - januaryFirst.getDay()) % 7;\r\n\r\n\t// Set the date object to the first Monday of the year\r\n\tconst firstMonday = new Date(januaryFirst);\r\n\tfirstMonday.setDate(januaryFirst.getDate() + daysToFirstMonday);\r\n\r\n\t// Calculate the number of days until the target Monday of the week\r\n\tconst daysToTargetMonday = (week - 1) * 7;\r\n\r\n\t// Set the date object to the target Monday of the week\r\n\tconst targetMonday = new Date(firstMonday);\r\n\ttargetMonday.setDate(firstMonday.getDate() + daysToTargetMonday);\r\n\r\n\treturn targetMonday;\r\n}\r\n\r\n/**\r\n * A collection of helper functions for working with input date values.\r\n * @namespace\r\n */\r\nexport const inputDateHelpers = {\r\n\t/**\r\n\t * Formats a date object to the desired string format based on the type.\r\n\t * @param {Date} date - The Date object to be formatted.\r\n\t * @param {string} type - The format type ('date', 'time', 'datetime-local', 'week', or 'month').\r\n\t * @returns {string} A formatted string based on the specified format.\r\n\t */\r\n\tformatDate,\r\n\r\n\t/**\r\n\t * Parses a string in the specified format and returns a Date object.\r\n\t * @param {string} dateString - The string to be parsed.\r\n\t * @param {string} type - The format type ('date', 'time', 'datetime-local', 'week', or 'month').\r\n\t * @returns {Date} - The parsed Date object.\r\n\t */\r\n\tparseDate,\r\n\r\n\t/**\r\n\t * Returns the week number of the year for a given date.\r\n\t * @param {Date} date - The date object for which to calculate the week number.\r\n\t * @returns {number} - The week number.\r\n\t */\r\n\tgetWeekNumber,\r\n\r\n\t/**\r\n\t * Returns the first date (Monday) of a given week in a year.\r\n\t * @param {number} year - The year of the target week.\r\n\t * @param {number} week - The week number (1-53) of the desired week.\r\n\t * @returns {Date} - The first date (Monday) of the specified week.\r\n\t */\r\n\tgetFirstDateOfWeek,\r\n};\r\n\r\nexport default inputDateHelpers;\r\n","import { createStore } from 'zustand';\r\nimport { type CreateFormStoreProps } from '../types';\r\nimport { createFormStoreBuilder } from '.';\r\nimport { useId, useState } from 'react';\r\n\r\nexport const handleCreateFormStore = <FieldsValues, ValidationsHandlers>(\r\n\tparams: CreateFormStoreProps<FieldsValues, ValidationsHandlers>,\r\n) => createStore(createFormStoreBuilder(params));\r\n\r\nexport const useCreateFormStore = <FieldsValues, ValidationsHandlers>(\r\n\tprops: Omit<\r\n\t\tCreateFormStoreProps<FieldsValues, ValidationsHandlers>,\r\n\t\t'baseId'\r\n\t> & {\r\n\t\tbaseId?: CreateFormStoreProps<FieldsValues, ValidationsHandlers>['baseId'];\r\n\t},\r\n) => {\r\n\tconst baseId = useId();\r\n\tconst formStore = useState(\r\n\t\thandleCreateFormStore({ ...props, baseId: props.baseId || baseId }),\r\n\t);\r\n\r\n\treturn formStore[0];\r\n};\r\n","/**\r\n * @typedef {undefined | null | false | 0 | ''} FalsyValues\r\n */\r\n\r\nimport { inputDateHelpers } from '.';\r\n\r\n/**\r\n * @template Value\r\n * @template DefaultValue\r\n * @typedef {Value extends FalsyValues ? DefaultValue : NonNullable<Value>} OnFalsyDefaultReturn\r\n */\r\n\r\n/**\r\n * @template Value\r\n * @template DefaultValue\r\n * @typedef {Value extends FalsyValues ? NonNullable<Value> : DefaultValue} OnTruthyDefaultReturn\r\n */\r\n\r\n/**\r\n * @template Value\r\n * @template DefaultValue\r\n * @typedef {Value extends null | undefined ? DefaultValue : Value} OnNullableDefaultReturn\r\n */\r\n\r\n/**\r\n * @template Value\r\n * @template DefaultValue\r\n * @typedef {Value extends null | undefined ? Value : DefaultValue} OnNotNullableDefaultReturn\r\n *\r\n * @description used to handle parsing and formatting (\"date\", \"time\", \"datetime-local\", \"week\", \"month\") and the cases of `null` like when clearing the input\r\n */\r\nexport const dateInput = {\r\n\t/**\r\n\t * @param {import(\"..\").InputDateTypes} type\r\n\t * @description used to handle parsing (\"date\", \"time\", \"datetime-local\", \"week\", \"month\") and the cases of falsy values results to `null` like when clearing the input\r\n\t */\r\n\tparse: function (type) {\r\n\t\t/**\r\n\t\t * @param {string | number | FalsyValues} dateString\r\n\t\t */\r\n\t\treturn function (dateString) {\r\n\t\t\treturn !dateString ? null : inputDateHelpers.parseDate(dateString, type);\r\n\t\t};\r\n\t},\r\n\t/**\r\n\t * @param {import(\"..\").InputDateTypes} type\r\n\t * @description used to handle formatting (\"date\", \"time\", \"datetime-local\", \"week\", \"month\") and the cases of falsy values results to '' like when clearing the input\r\n\t */\r\n\tformat: function (type) {\r\n\t\t/**\r\n\t\t * @param {Date | FalsyValues} dateString\r\n\t\t */\r\n\t\treturn function (dateString) {\r\n\t\t\treturn !dateString ? null : inputDateHelpers.formatDate(dateString, type);\r\n\t\t};\r\n\t},\r\n};\r\n\r\n/**\r\n * @template DefaultValue\r\n * @param {DefaultValue} defaultValue\r\n */\r\nexport function onNotNullableTo(defaultValue) {\r\n\t/**\r\n\t * @template Value\r\n\t * @param {Value} value\r\n\t */\r\n\treturn function (value) {\r\n\t\tconst symbol = Symbol();\r\n\t\tconst isNullable = value ?? symbol;\r\n\r\n\t\tif (isNullable !== symbol) {\r\n\t\t\treturn (\r\n\t\t\t\t/** @type {OnNullableDefaultReturn<Value, DefaultValue>} */\r\n\t\t\t\t(defaultValue)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t/** @type {OnNullableDefaultReturn<Value, DefaultValue>} */\r\n\t\t\t(value)\r\n\t\t);\r\n\t};\r\n}\r\nexport const onNullable = {\r\n\t/**\r\n\t * @template Value\r\n\t * @param {Value} value\r\n\t */\r\n\ttoEmptyString: function (value) {\r\n\t\treturn (\r\n\t\t\t/** @type {OnNullableDefaultReturn<Value, \"\">} */\r\n\t\t\t(value ?? '')\r\n\t\t);\r\n\t},\r\n\t/**\r\n\t * @template Value\r\n\t * @param {Value} value\r\n\t */\r\n\ttoUndefined: function (value) {\r\n\t\treturn (\r\n\t\t\t/** @type {OnNullableDefaultReturn<Value, undefined>} */\r\n\t\t\t(value ?? undefined)\r\n\t\t);\r\n\t},\r\n\t/**\r\n\t * @template Value\r\n\t * @param {Value} value\r\n\t */\r\n\ttoNull: function (value) {\r\n\t\treturn (\r\n\t\t\t/** @type {OnNullableDefaultReturn<Value, null>} */\r\n\t\t\t(value ?? null)\r\n\t\t);\r\n\t},\r\n\t/**\r\n\t * @template DefaultValue\r\n\t * @param {DefaultValue} defaultValue\r\n\t */\r\n\tto: function (defaultValue) {\r\n\t\t/**\r\n\t\t * @template Value\r\n\t\t * @param {Value} value\r\n\t\t */\r\n\t\treturn function (value) {\r\n\t\t\tconst symbol = Symbol();\r\n\t\t\tconst isNullable = value ?? symbol;\r\n\r\n\t\t\tif (isNullable === symbol) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t/** @type {OnNullableDefaultReturn<Value, DefaultValue>} */\r\n\t\t\t\t\t(defaultValue)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\treturn (\r\n\t\t\t\t/** @type {OnNullableDefaultReturn<Value, DefaultValue>} */\r\n\t\t\t\t(value)\r\n\t\t\t);\r\n\t\t};\r\n\t},\r\n\tfalsy: {\r\n\t\t/**\r\n\t\t * @template Value\r\n\t\t * @param {Value} value\r\n\t\t */\r\n\t\ttoEmptyString: function (value) {\r\n\t\t\treturn onNotNullableTo(\r\n\t\t\t\t/** @type {\"\"} */\r\n\t\t\t\t(''),\r\n\t\t\t)(value);\r\n\t\t},\r\n\t\t/**\r\n\t\t * @template Value\r\n\t\t * @param {Value} value\r\n\t\t */\r\n\t\ttoUndefined: function (value) {\r\n\t\t\treturn onNotNullableTo(undefined)(value);\r\n\t\t},\r\n\t\t/**\r\n\t\t * @template Value\r\n\t\t * @param {Value} value\r\n\t\t */\r\n\t\ttoNull: function (value) {\r\n\t\t\treturn onNotNullableTo(null)(value);\r\n\t\t},\r\n\t\t/**\r\n\t\t * @template DefaultValue\r\n\t\t * @param {DefaultValue} defaultValue\r\n\t\t */\r\n\t\tto: onNotNullableTo,\r\n\t},\r\n};\r\n\r\n/**\r\n * @template DefaultValue\r\n * @param {DefaultValue} defaultValue\r\n */\r\nfunction onFalsyTo(defaultValue) {\r\n\t/**\r\n\t * @template Value\r\n\t * @param {Value} value\r\n\t */\r\n\treturn function (value) {\r\n\t\treturn (\r\n\t\t\t/** @type {OnFalsyDefaultReturn<Value, DefaultValue>} */\r\n\t\t\t(!value ? defaultValue : value)\r\n\t\t);\r\n\t};\r\n}\r\n/**\r\n * @namespace\r\n * @property {object} onFalsy\r\n * @property {<Value>(value: Value) => OnFalsyDefaultReturn<Value, \"\">} onFalsy.toEmptyString\r\n * @property {<Value>(value: Value) => OnFalsyDefaultReturn<Value, undefined>} onFalsy.toUndefined\r\n * @property {<Value>(value: Value) => OnFalsyDefaultReturn<Value, null>} onFalsy.toNull\r\n * @property {<DefaultValue>(defaultValue: DefaultValue) => <Value>(value: Value) => OnFalsyDefaultReturn<Value, DefaultValue>} onFalsy.to\r\n */\r\nexport const onFalsy = {\r\n\ttoEmptyString: onFalsyTo(\r\n\t\t/** @type {\"\"} */\r\n\t\t(''),\r\n\t),\r\n\ttoUndefined: onFalsyTo(undefined),\r\n\ttoNull: onFalsyTo(null),\r\n\tto: onFalsyTo,\r\n};\r\n\r\n/**\r\n * @template DefaultValue\r\n * @param {DefaultValue} defaultValue\r\n */\r\nexport function onTruthyTo(defaultValue) {\r\n\t/**\r\n\t * @template Value\r\n\t * @param {Value} value\r\n\t */\r\n\treturn function (value) {\r\n\t\treturn (\r\n\t\t\t/** @type {OnTruthyDefaultReturn<Value, DefaultValue>} */\r\n\t\t\t(!value ? value : defaultValue)\r\n\t\t);\r\n\t};\r\n}\r\n/**\r\n * @namespace\r\n * @property {object} onTruthy\r\n * @property {<Value>(value: Value) => OnTruthyDefaultReturn<Value, \"\">} onTruthy.toEmptyString\r\n * @property {<Value>(value: Value) => OnTruthyDefaultReturn<Value, undefined>} onTruthy.toUndefined\r\n * @property {<Value>(value: Value) => OnTruthyDefaultReturn<Value, null>} onTruthy.toNull\r\n * @property {<DefaultValue>(defaultValue: DefaultValue) => <Value>(value: Value) => OnTruthyDefaultReturn<Value, DefaultValue>} onTruthy.to\r\n */\r\nexport const onTruthy = {\r\n\ttoEmptyString: onTruthyTo(\r\n\t\t/** @type {\"\"} */\r\n\t\t(''),\r\n\t),\r\n\ttoUndefined: onTruthyTo(undefined),\r\n\ttoNull: onTruthyTo(null),\r\n\tto: onTruthyTo,\r\n};\r\n\r\nconst formFieldValueHelpers = {\r\n\tonDateInput: dateInput,\r\n\tonNullable,\r\n\tonFalsy,\r\n\tonTruthy,\r\n};\r\n\r\nexport default formFieldValueHelpers;\r\n\r\nconst test_1 = [1, 2, 3];\r\nconst result_1 = {\r\n\tto: formFieldValueHelpers.onFalsy.to('lol')(test_1),\r\n\temptyString: formFieldValueHelpers.onFalsy.toEmptyString(test_1),\r\n\tnull: formFieldValueHelpers.onFalsy.toNull(test_1),\r\n\tundefined: formFieldValueHelpers.onFalsy.toUndefined(test_1),\r\n};\r\nresult_1;\r\n\r\nconst test_1_2 = 0;\r\nconst result_1_2 = {\r\n\tto: formFieldValueHelpers.onFalsy.to('lol')(test_1_2),\r\n\temptyString: formFieldValueHelpers.onFalsy.toEmptyString(test_1_2),\r\n\tnull: formFieldValueHelpers.onFalsy.toNull(test_1_2),\r\n\tundefined: formFieldValueHelpers.onFalsy.toUndefined(test_1_2),\r\n};\r\nresult_1_2;\r\n\r\nconst test_2 = [1, 2, 3];\r\nconst result_2 = {\r\n\tto: formFieldValueHelpers.onNullable.to('lol')(test_2),\r\n\temptyString: formFieldValueHelpers.onNullable.toEmptyString(test_2),\r\n\tnull: formFieldValueHelpers.onNullable.toNull(test_2),\r\n\tundefined: formFieldValueHelpers.onNullable.toUndefined(test_2),\r\n};\r\nresult_2;\r\n\r\nconst test_2_2 = null;\r\nconst result_2_2 = {\r\n\tto: formFieldValueHelpers.onNullable.to('lol')(test_2_2),\r\n\temptyString: formFieldValueHelpers.onNullable.toEmptyString(test_2_2),\r\n\tnull: formFieldValueHelpers.onNullable.toNull(test_2_2),\r\n\tundefined: formFieldValueHelpers.onNullable.toUndefined(test_2_2),\r\n};\r\nresult_2_2;\r\n\r\nconst test_3 = [1, 2, 3];\r\nconst result_3 = {\r\n\tto: formFieldValueHelpers.onNullable.falsy.to('lol')(test_3),\r\n\temptyString: formFieldValueHelpers.onNullable.falsy.toEmptyString(test_3),\r\n\tnull: formFieldValueHelpers.onNullable.falsy.toNull(test_3),\r\n\tundefined: formFieldValueHelpers.onNullable.falsy.toUndefined(test_3),\r\n};\r\nresult_3;\r\n\r\nconst test_3_2 = null;\r\nconst result_3_2 = {\r\n\tto: formFieldValueHelpers.onNullable.to('lol')(test_3_2),\r\n\temptyString: formFieldValueHelpers.onNullable.toEmptyString(test_3_2),\r\n\tnull: formFieldValueHelpers.onNullable.toNull(test_3_2),\r\n\tundefined: formFieldValueHelpers.onNullable.toUndefined(test_3_2),\r\n};\r\nresult_3_2;\r\n","import FormStoreField from './FormStoreField';\r\n\r\nimport { type FormEvent } from 'react';\r\nimport {\r\n\ttype ValidationEvents,\r\n\ttype CreateFormStoreProps,\r\n\ttype FormStoreShape,\r\n\ttype GetFromFormStoreShape,\r\n\t// type HandlePreSubmit,\r\n\ttype HandleSubmitCB,\r\n\ttype GetValidationValuesFromSchema,\r\n} from '../types';\r\nimport { errorFormatter, isZodValidator } from './zod';\r\n\r\nexport * from './inputDateHelpers';\r\nexport * from './zod';\r\nexport * from './zustand';\r\nexport * from './fieldValueHelpers';\r\n\r\nexport {\r\n\t/**\r\n\t * @description field value helpers\r\n\t */\r\n\tdefault as fvh,\r\n} from './fieldValueHelpers';\r\n\r\ntype SetStateInternal<T> = (\r\n\tpartial: T | Partial<T> | ((state: T) => T | Partial<T>),\r\n\t// replace?: boolean | undefined,\r\n) => void;\r\n\r\nfunction createFormStoreMetadata<FieldsValues, ValidationsHandlers>(\r\n\tparams: CreateFormStoreProps<FieldsValues, ValidationsHandlers>,\r\n\tbaseId: string,\r\n) {\r\n\ttype FormStore = FormStoreShape<FieldsValues, ValidationsHandlers>;\r\n\r\n\tif (!params.initialValues || typeof params.initialValues !== 'object')\r\n\t\tthrow new Error('');\r\n\r\n\tconst metadata = {\r\n\t\tbaseId,\r\n\t\tformId: `${baseId}-form`,\r\n\t\tfieldsNames: {},\r\n\t\tfieldsNamesMap: {},\r\n\t\t//\r\n\t\tvalidatedFieldsNames: [],\r\n\t\tvalidatedFieldsNamesMap: {},\r\n\t\t// //\r\n\t\tmanualValidatedFields: [],\r\n\t\tmanualValidatedFieldsMap: [],\r\n\t\t// //\r\n\t\treferencedValidatedFields: [],\r\n\t\treferencedValidatedFieldsMap: [],\r\n\t} as unknown as FormStore['metadata'];\r\n\r\n\tmetadata.fieldsNames = Object.keys(\r\n\t\tparams.initialValues,\r\n\t) as typeof metadata.fieldsNames;\r\n\tfor (const fieldName of metadata.fieldsNames) {\r\n\t\tmetadata.fieldsNamesMap[fieldName] = true;\r\n\t}\r\n\tfor (const key in params.validationsHandlers) {\r\n\t\tmetadata.validatedFieldsNames.push(key);\r\n\t\tmetadata.validatedFieldsNamesMap[key] = true;\r\n\r\n\t\tif (key in metadata.fieldsNamesMap) {\r\n\t\t\tmetadata.referencedValidatedFields.push(\r\n\t\t\t\tkey as unknown as (typeof metadata)['referencedValidatedFields'][number],\r\n\t\t\t);\r\n\t\t\tmetadata.referencedValidatedFieldsMap[\r\n\t\t\t\tkey as unknown as (typeof metadata)['referencedValidatedFields'][number]\r\n\t\t\t] = true;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tmetadata.manualValidatedFields.push(\r\n\t\t\tkey as unknown as (typeof metadata)['manualValidatedFields'][number],\r\n\t\t);\r\n\t\t(metadata.manualValidatedFieldsMap as Record<string, true>)[\r\n\t\t\tkey // as unknown as (typeof metadata)['manualValidatedFieldsMap'][number]\r\n\t\t] = true;\r\n\t}\r\n\r\n\treturn metadata;\r\n}\r\n\r\nfunction createFormStoreValidations<FieldsValues, ValidationsHandlers>(\r\n\tparams: CreateFormStoreProps<FieldsValues, ValidationsHandlers>,\r\n\tmetadata: FormStoreShape<FieldsValues, ValidationsHandlers>['metadata'],\r\n) {\r\n\ttype FormStore = FormStoreShape<FieldsValues, ValidationsHandlers>;\r\n\r\n\tlet fieldValidationEvents: NonNullable<typeof params.validationEvents> = {\r\n\t\tsubmit: true,\r\n\t\tblur: true,\r\n\t};\r\n\tlet isFieldHavingPassedValidations = false;\r\n\tlet fieldValidationEventKey: ValidationEvents;\r\n\r\n\tconst validations: FormStore['validations'] = {} as FormStore['validations'];\r\n\tfor (const fieldName of metadata.validatedFieldsNames) {\r\n\t\tconst fieldValidationsHandler =\r\n\t\t\tparams.validationsHandlers?.[\r\n\t\t\t\tfieldName as keyof GetFromFormStoreShape<FormStore> &\r\n\t\t\t\t\tkeyof GetFromFormStoreShape<FormStore, 'validationHandlers'>\r\n\t\t\t];\r\n\r\n\t\tvalidations[fieldName] = {\r\n\t\t\thandler: !fieldValidationsHandler\r\n\t\t\t\t? undefined\r\n\t\t\t\t: isZodValidator(fieldValidationsHandler)\r\n\t\t\t\t? (value: unknown) => fieldValidationsHandler.parse(value)\r\n\t\t\t\t: fieldValidationsHandler,\r\n\t\t\tcurrentDirtyEventsCounter: 0,\r\n\t\t\tfailedAttempts: 0,\r\n\t\t\tpassedAttempts: 0,\r\n\t\t\tevents: {\r\n\t\t\t\t// mount: {  },\r\n\t\t\t\tblur: {\r\n\t\t\t\t\tfailedAttempts: 0,\r\n\t\t\t\t\tpassedAttempts: 0,\r\n\t\t\t\t\tisActive: params.validationEvents?.blur ?? true,\r\n\t\t\t\t\tisDirty: false,\r\n\t\t\t\t\terror: null,\r\n\t\t\t\t},\r\n\t\t\t\tchange: {\r\n\t\t\t\t\tfailedAttempts: 0,\r\n\t\t\t\t\tpassedAttempts: 0,\r\n\t\t\t\t\tisActive: params.validationEvents?.change ?? false,\r\n\t\t\t\t\tisDirty: false,\r\n\t\t\t\t\terror: null,\r\n\t\t\t\t},\r\n\t\t\t\tsubmit: {\r\n\t\t\t\t\tfailedAttempts: 0,\r\n\t\t\t\t\tpassedAttempts: 0,\r\n\t\t\t\t\tisActive: params.validationEvents?.submit ?? false,\r\n\t\t\t\t\tisDirty: false,\r\n\t\t\t\t\terror: null,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\tisDirty: false,\r\n\t\t\tmetadata: { name: fieldName },\r\n\t\t} as NonNullable<FormStore['validations'][keyof FormStore['validations']]>;\r\n\r\n\t\tif (params.validationEvents) {\r\n\t\t\tisFieldHavingPassedValidations = true;\r\n\t\t\tfieldValidationEvents = {\r\n\t\t\t\t...fieldValidationEvents,\r\n\t\t\t\t...params.validationEvents,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (isFieldHavingPassedValidations) {\r\n\t\t\tfor (fieldValidationEventKey in fieldValidationEvents) {\r\n\t\t\t\tvalidations[fieldName].events[fieldValidationEventKey].isActive =\r\n\t\t\t\t\t!!typeof fieldValidationEvents[fieldValidationEventKey];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn validations;\r\n}\r\n\r\nfunction createFormStoreFields<FieldsValues, ValidationsHandlers>(\r\n\tparams: CreateFormStoreProps<FieldsValues, ValidationsHandlers>,\r\n\tbaseId: string,\r\n\tmetadata: FormStoreShape<FieldsValues, ValidationsHandlers>['metadata'],\r\n) {\r\n\ttype FormStore = FormStoreShape<FieldsValues, ValidationsHandlers>;\r\n\r\n\tconst fields = {} as FormStore['fields'];\r\n\tfor (const fieldName of metadata.fieldsNames) {\r\n\t\tfields[fieldName] = new FormStoreField({\r\n\t\t\tvalue: params.initialValues[fieldName],\r\n\t\t\tvalueFromFieldToStore: params.valuesFromFieldsToStore?.[fieldName]\r\n\t\t\t\t? params.valuesFromFieldsToStore[fieldName]\r\n\t\t\t\t: undefined,\r\n\t\t\tvalueFromStoreToField: params.valuesFromStoreToFields?.[fieldName]\r\n\t\t\t\t? params.valuesFromStoreToFields[fieldName]\r\n\t\t\t\t: undefined,\r\n\t\t\tid: `${baseId}field-${String(fieldName)}`,\r\n\t\t\tmetadata: {\r\n\t\t\t\tname: fieldName,\r\n\t\t\t\tinitialValue: params.initialValues[fieldName],\r\n\t\t\t},\r\n\t\t} as (typeof fields)[typeof fieldName]);\r\n\t}\r\n\r\n\treturn fields;\r\n}\r\n\r\nfunction _setFieldError<FieldsValues, ValidationsHandlers>(params: {\r\n\tname: keyof ValidationsHandlers;\r\n\tmessage: string | null;\r\n\tvalidationEvent: ValidationEvents;\r\n}) {\r\n\treturn function (\r\n\t\tcurrentState: FormStoreShape<FieldsValues, ValidationsHandlers>,\r\n\t): FormStoreShape<FieldsValues, ValidationsHandlers> {\r\n\t\tif (\r\n\t\t\t!currentState.validations[params.name].events[params.validationEvent]\r\n\t\t\t\t.isActive\r\n\t\t)\r\n\t\t\treturn currentState;\r\n\r\n\t\tlet currentDirtyFieldsCounter = currentState.currentDirtyFieldsCounter;\r\n\t\tconst validation = {\r\n\t\t\t...currentState.validations[params.name],\r\n\t\t};\r\n\r\n\t\tif (params.message) {\r\n\t\t\tvalidation.failedAttempts++;\r\n\t\t\tvalidation.events[params.validationEvent].failedAttempts++;\r\n\r\n\t\t\tif (!validation.isDirty) {\r\n\t\t\t\tvalidation.currentDirtyEventsCounter++;\r\n\t\t\t\tif (validation.currentDirtyEventsCounter > 0) {\r\n\t\t\t\t\tcurrentDirtyFieldsCounter++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvalidation.events[params.validationEvent].error = {\r\n\t\t\t\tmessage: params.message,\r\n\t\t\t};\r\n\t\t\tvalidation.error = { message: params.message };\r\n\t\t\tvalidation.events[params.validationEvent].isDirty = true;\r\n\t\t\tvalidation.isDirty = true;\r\n\t\t} else {\r\n\t\t\tvalidation.passedAttempts++;\r\n\t\t\tvalidation.events[params.validationEvent].passedAttempts++;\r\n\r\n\t\t\tif (validation.isDirty) {\r\n\t\t\t\tvalidation.currentDirtyEventsCounter--;\r\n\t\t\t\tif (validation.currentDirtyEventsCounter === 0) {\r\n\t\t\t\t\tcurrentDirtyFieldsCounter--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvalidation.events[params.validationEvent].error = null;\r\n\t\t\tvalidation.error = null;\r\n\t\t\tvalidation.events[params.validationEvent].isDirty = false;\r\n\t\t\tvalidation.isDirty = false;\r\n\t\t}\r\n\r\n\t\tcurrentState.currentDirtyFieldsCounter = currentDirtyFieldsCounter;\r\n\t\tcurrentState.isDirty = currentDirtyFieldsCounter > 0;\r\n\t\tcurrentState.validations = {\r\n\t\t\t...currentState.validations,\r\n\t\t\t[params.name]: validation,\r\n\t\t};\r\n\r\n\t\treturn currentState;\r\n\t};\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntype TFunction = (...args: any[]) => any;\r\ntype AnyValueExceptFunctions = // eslint-disable-next-line @typescript-eslint/ban-types\r\n\tExclude<{} | null | undefined, TFunction>;\r\nfunction _setFieldValue<\r\n\tFieldsValues,\r\n\tValidationsHandlers,\r\n\tName extends keyof FieldsValues,\r\n>(\r\n\tname: Name,\r\n\tvalueOrUpdater:\r\n\t\t| AnyValueExceptFunctions\r\n\t\t| ((value: FieldsValues[Name]) => FieldsValues[Name]),\r\n) {\r\n\treturn function (\r\n\t\tcurrentState: FormStoreShape<FieldsValues, ValidationsHandlers>,\r\n\t): FormStoreShape<FieldsValues, ValidationsHandlers> {\r\n\t\tconst field = currentState.fields[name];\r\n\r\n\t\tfield.value = (\r\n\t\t\ttypeof valueOrUpdater === 'function'\r\n\t\t\t\t? valueOrUpdater(field.value)\r\n\t\t\t\t: valueOrUpdater\r\n\t\t) as FieldsValues[typeof name];\r\n\r\n\t\treturn {\r\n\t\t\t...currentState,\r\n\t\t\tfields: {\r\n\t\t\t\t...currentState.fields,\r\n\t\t\t\t[name]: field,\r\n\t\t\t},\r\n\t\t};\r\n\t};\r\n}\r\n\r\nconst itemsToResetDefaults = {\r\n\tfields: true,\r\n\tvalidations: true,\r\n\tsubmit: false,\r\n\tfocus: true,\r\n};\r\n\r\nexport function createFormStoreBuilder<FieldsValues, ValidationsHandlers>(\r\n\tparams: CreateFormStoreProps<FieldsValues, ValidationsHandlers>,\r\n) {\r\n\ttype FormStore = FormStoreShape<FieldsValues, ValidationsHandlers>;\r\n\r\n\tconst baseId = params.baseId ? `${params.baseId}-` : '';\r\n\tconst metadata = createFormStoreMetadata(params, baseId);\r\n\tconst fields = createFormStoreFields(params, baseId, metadata);\r\n\tconst validations = createFormStoreValidations(params, metadata);\r\n\r\n\treturn (\r\n\t\tset: SetStateInternal<FormStore>,\r\n\t\tget: () => FormStore,\r\n\t): FormStore => {\r\n\t\treturn {\r\n\t\t\tbaseId,\r\n\t\t\tmetadata,\r\n\t\t\tvalidations,\r\n\t\t\tfields,\r\n\t\t\tid: `${baseId}form`,\r\n\t\t\tisDirty: false,\r\n\t\t\tsubmit: {\r\n\t\t\t\tcounter: 0,\r\n\t\t\t\tpassedAttempts: 0,\r\n\t\t\t\tfailedAttempts: 0,\r\n\t\t\t\terrorMessage: null,\r\n\t\t\t\tisActive: false,\r\n\t\t\t},\r\n\t\t\tfocus: { isActive: false, field: null },\r\n\t\t\tcurrentDirtyFieldsCounter: 0,\r\n\t\t\tutils: {\r\n\t\t\t\tgetFieldValues() {\r\n\t\t\t\t\tconst currentState = get();\r\n\t\t\t\t\tconst fieldsValues = {} as FieldsValues;\r\n\r\n\t\t\t\t\tlet fieldName: string;\r\n\t\t\t\t\tfor (fieldName in currentState.fields) {\r\n\t\t\t\t\t\tfieldsValues[fieldName as keyof FieldsValues] =\r\n\t\t\t\t\t\t\tcurrentState.fields[fieldName as keyof FieldsValues].value;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn fieldsValues;\r\n\t\t\t\t},\r\n\t\t\t\tsetSubmitState(valueOrUpdater) {\r\n\t\t\t\t\tset(function (currentState) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t// ...currentState,\r\n\t\t\t\t\t\t\tsubmit: {\r\n\t\t\t\t\t\t\t\t...currentState.submit,\r\n\t\t\t\t\t\t\t\t...(typeof valueOrUpdater === 'function'\r\n\t\t\t\t\t\t\t\t\t? valueOrUpdater(currentState.submit)\r\n\t\t\t\t\t\t\t\t\t: valueOrUpdater),\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tsetFocusState(fieldName, validationName, isActive) {\r\n\t\t\t\t\tset(function (currentState) {\r\n\t\t\t\t\t\tlet _currentState = currentState;\r\n\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t!isActive &&\r\n\t\t\t\t\t\t\t_currentState.validations[validationName].events.blur.isActive\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t_currentState.validations[validationName].handler(\r\n\t\t\t\t\t\t\t\t\tvalidationName && fieldName !== validationName\r\n\t\t\t\t\t\t\t\t\t\t? _currentState.utils.getFieldValues()\r\n\t\t\t\t\t\t\t\t\t\t: _currentState.fields[fieldName].value,\r\n\t\t\t\t\t\t\t\t\t'blur',\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t_currentState = _setFieldError<\r\n\t\t\t\t\t\t\t\t\tFieldsValues,\r\n\t\t\t\t\t\t\t\t\tValidationsHandlers\r\n\t\t\t\t\t\t\t\t>({\r\n\t\t\t\t\t\t\t\t\tname: validationName,\r\n\t\t\t\t\t\t\t\t\tmessage: null,\r\n\t\t\t\t\t\t\t\t\tvalidationEvent: 'blur',\r\n\t\t\t\t\t\t\t\t})(_currentState);\r\n\t\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\t\tconst message = _currentState.utils.errorFormatter(\r\n\t\t\t\t\t\t\t\t\terror,\r\n\t\t\t\t\t\t\t\t\t'blur',\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t_currentState = _setFieldError<\r\n\t\t\t\t\t\t\t\t\tFieldsValues,\r\n\t\t\t\t\t\t\t\t\tValidationsHandlers\r\n\t\t\t\t\t\t\t\t>({\r\n\t\t\t\t\t\t\t\t\tname: validationName,\r\n\t\t\t\t\t\t\t\t\tmessage,\r\n\t\t\t\t\t\t\t\t\tvalidationEvent: 'blur',\r\n\t\t\t\t\t\t\t\t})(_currentState);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t_currentState.focus.isActive &&\r\n\t\t\t\t\t\t\t\t_currentState.focus.field.name !== fieldName\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\treturn _currentState;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t..._currentState,\r\n\t\t\t\t\t\t\tfocus: isActive\r\n\t\t\t\t\t\t\t\t? {\r\n\t\t\t\t\t\t\t\t\t\tisActive: true,\r\n\t\t\t\t\t\t\t\t\t\tfield: {\r\n\t\t\t\t\t\t\t\t\t\t\tname: fieldName,\r\n\t\t\t\t\t\t\t\t\t\t\tid: _currentState.fields[fieldName].id,\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t\t\t: { isActive: false, field: null },\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tresetFormStore: function (itemsToReset = itemsToResetDefaults) {\r\n\t\t\t\t\treturn set(function (currentState) {\r\n\t\t\t\t\t\tconst fields = currentState.fields;\r\n\t\t\t\t\t\tconst validations = currentState.validations;\r\n\t\t\t\t\t\tlet isDirty = currentState.isDirty;\r\n\t\t\t\t\t\tlet submit = currentState.submit;\r\n\t\t\t\t\t\tlet focus = currentState.focus;\r\n\r\n\t\t\t\t\t\tif (itemsToReset.fields) {\r\n\t\t\t\t\t\t\tconst resetField =\r\n\t\t\t\t\t\t\t\ttypeof window === 'undefined'\r\n\t\t\t\t\t\t\t\t\t? (fieldName: NonNullable<keyof FieldsValues>) => {\r\n\t\t\t\t\t\t\t\t\t\t\tconst field = fields[fieldName];\r\n\t\t\t\t\t\t\t\t\t\t\tfield.value = field.metadata.initialValue;\r\n\t\t\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t\t\t\t: (fieldName: NonNullable<keyof FieldsValues>) => {\r\n\t\t\t\t\t\t\t\t\t\t\tconst field = fields[fieldName];\r\n\t\t\t\t\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t\t\t\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\t\t\t\t\tconst element = document.getElementById(\r\n\t\t\t\t\t\t\t\t\t\t\t\tfield.id,\r\n\t\t\t\t\t\t\t\t\t\t\t) as HTMLInputElement;\r\n\t\t\t\t\t\t\t\t\t\t\tif (element) element.value = (field.metadata.initialValue ?? '') as string;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tfield.value = field.metadata.initialValue;\r\n\t\t\t\t\t\t\t\t\t  };\r\n\r\n\t\t\t\t\t\t\tlet fieldName: keyof typeof fields;\r\n\t\t\t\t\t\t\tfor (fieldName in fields) {\r\n\t\t\t\t\t\t\t\tresetField(fieldName);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (itemsToReset.validations) {\r\n\t\t\t\t\t\t\tfor (const key in validations) {\r\n\t\t\t\t\t\t\t\tvalidations[key].failedAttempts = 0;\r\n\t\t\t\t\t\t\t\tvalidations[key].passedAttempts = 0;\r\n\t\t\t\t\t\t\t\tvalidations[key].isDirty = false;\r\n\t\t\t\t\t\t\t\tvalidations[key].error = null;\r\n\r\n\t\t\t\t\t\t\t\tlet eventKey: keyof (typeof validations)[typeof key]['events'];\r\n\t\t\t\t\t\t\t\tfor (eventKey in validations[key].events) {\r\n\t\t\t\t\t\t\t\t\t// validations[key].events[eventKey].\r\n\t\t\t\t\t\t\t\t\tvalidations[key].events[eventKey].failedAttempts = 0;\r\n\t\t\t\t\t\t\t\t\tvalidations[key].events[eventKey].passedAttempts = 0;\r\n\t\t\t\t\t\t\t\t\tvalidations[key].events[eventKey].isDirty = false;\r\n\t\t\t\t\t\t\t\t\tvalidations[key].events[eventKey].error = null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tisDirty = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (itemsToReset.submit) {\r\n\t\t\t\t\t\t\tsubmit = {\r\n\t\t\t\t\t\t\t\tcounter: 0,\r\n\t\t\t\t\t\t\t\tpassedAttempts: 0,\r\n\t\t\t\t\t\t\t\tfailedAttempts: 0,\r\n\t\t\t\t\t\t\t\terrorMessage: null,\r\n\t\t\t\t\t\t\t\tisActive: false,\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (itemsToReset.focus) {\r\n\t\t\t\t\t\t\tfocus = {\r\n\t\t\t\t\t\t\t\tisActive: false,\r\n\t\t\t\t\t\t\t\tfield: null,\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t// ...currentState,\r\n\t\t\t\t\t\t\tfields,\r\n\t\t\t\t\t\t\tvalidations,\r\n\t\t\t\t\t\t\tisDirty,\r\n\t\t\t\t\t\t\tsubmit,\r\n\t\t\t\t\t\t\tfocus,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tsetFieldValue(name, value) {\r\n\t\t\t\t\treturn set(_setFieldValue(name, value));\r\n\t\t\t\t},\r\n\t\t\t\tsetFieldError(params) {\r\n\t\t\t\t\tset(_setFieldError(params));\r\n\t\t\t\t},\r\n\t\t\t\terrorFormatter: params.errorFormatter ?? errorFormatter,\r\n\t\t\t\thandleOnInputChange(name, valueOrUpdater, validationName) {\r\n\t\t\t\t\tlet currentState = get();\r\n\t\t\t\t\tconst field = currentState.fields[name];\r\n\r\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n\t\t\t\t\tconst _value =\r\n\t\t\t\t\t\ttypeof valueOrUpdater === 'function'\r\n\t\t\t\t\t\t\t? valueOrUpdater(field.value)\r\n\t\t\t\t\t\t\t: valueOrUpdater;\r\n\t\t\t\t\tconst value = field.valueFromFieldToStore\r\n\t\t\t\t\t\t? field.valueFromFieldToStore(_value)\r\n\t\t\t\t\t\t: (_value as FieldsValues[typeof name]);\r\n\r\n\t\t\t\t\tconst _validationName = (\r\n\t\t\t\t\t\tvalidationName\r\n\t\t\t\t\t\t\t? validationName\r\n\t\t\t\t\t\t\t: // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\tcurrentState.metadata.referencedValidatedFieldsMap[name]\r\n\t\t\t\t\t\t\t? name\r\n\t\t\t\t\t\t\t: undefined\r\n\t\t\t\t\t) as typeof validationName;\r\n\r\n\t\t\t\t\tconst setFieldValue = _setFieldValue<\r\n\t\t\t\t\t\tFieldsValues,\r\n\t\t\t\t\t\tValidationsHandlers,\r\n\t\t\t\t\t\ttypeof name\r\n\t\t\t\t\t>;\r\n\t\t\t\t\tconst setFieldError = _setFieldError<\r\n\t\t\t\t\t\tFieldsValues,\r\n\t\t\t\t\t\tValidationsHandlers\r\n\t\t\t\t\t>;\r\n\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t_validationName &&\r\n\t\t\t\t\t\tcurrentState.validations[_validationName].events['change'].isActive\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tcurrentState = setFieldValue(\r\n\t\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\t\tcurrentState.validations[_validationName].handler(\r\n\t\t\t\t\t\t\t\t\tvalidationName &&\r\n\t\t\t\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t\t\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\t\t\t\tvalidationName !== name\r\n\t\t\t\t\t\t\t\t\t\t? currentState.utils.getFieldValues()\r\n\t\t\t\t\t\t\t\t\t\t: value,\r\n\t\t\t\t\t\t\t\t\t'change',\r\n\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t)(currentState);\r\n\t\t\t\t\t\t\tcurrentState = setFieldError({\r\n\t\t\t\t\t\t\t\tname: _validationName,\r\n\t\t\t\t\t\t\t\tmessage: null,\r\n\t\t\t\t\t\t\t\tvalidationEvent: 'change',\r\n\t\t\t\t\t\t\t})(currentState);\r\n\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\tcurrentState = setFieldError({\r\n\t\t\t\t\t\t\t\tname: _validationName,\r\n\t\t\t\t\t\t\t\tmessage: currentState.utils.errorFormatter(error, 'change'),\r\n\t\t\t\t\t\t\t\tvalidationEvent: 'change',\r\n\t\t\t\t\t\t\t})(currentState);\r\n\r\n\t\t\t\t\t\t\tcurrentState = setFieldValue(name, value)(currentState);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentState = setFieldValue(name, value)(currentState);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tset(currentState);\r\n\t\t\t\t},\r\n\t\t\t\tgetFieldEventsListeners(name, validationName) {\r\n\t\t\t\t\tconst currentState = get();\r\n\t\t\t\t\tconst _validationName = validationName ?? name;\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tonChange: (event: { target: { value: string } }) => {\r\n\t\t\t\t\t\t\tcurrentState.utils.handleOnInputChange(name, event.target.value);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tonFocus: () => {\r\n\t\t\t\t\t\t\tcurrentState.utils.setFocusState(\r\n\t\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\t\t_validationName as keyof ValidationsHandlers,\r\n\t\t\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tonBlur: () => {\r\n\t\t\t\t\t\t\tcurrentState.utils.setFocusState(\r\n\t\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\t\t_validationName as keyof ValidationsHandlers,\r\n\t\t\t\t\t\t\t\tfalse,\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\t\t\t\t},\r\n\t\t\t\thandleSubmit(cb: HandleSubmitCB<FieldsValues, ValidationsHandlers>) {\r\n\t\t\t\t\treturn async function (\r\n\t\t\t\t\t\tevent: FormEvent<HTMLFormElement>,\r\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t): Promise<unknown> | unknown {\r\n\t\t\t\t\t\tevent.preventDefault();\r\n\r\n\t\t\t\t\t\tconst currentState = get();\r\n\r\n\t\t\t\t\t\tcurrentState.utils.setSubmitState({ isActive: true });\r\n\r\n\t\t\t\t\t\tconst metadata = currentState.metadata;\r\n\t\t\t\t\t\tconst fields = currentState.fields;\r\n\t\t\t\t\t\tconst validations = currentState.validations;\r\n\t\t\t\t\t\tconst values: Record<string, unknown> = {};\r\n\t\t\t\t\t\tconst validatedValues: Record<string, unknown> = {};\r\n\r\n\t\t\t\t\t\tconst errors: Record<\r\n\t\t\t\t\t\t\tstring,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tname: string | number | symbol;\r\n\t\t\t\t\t\t\t\tmessage: string | null;\r\n\t\t\t\t\t\t\t\tvalidationEvent: ValidationEvents;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t> = {};\r\n\r\n\t\t\t\t\t\tlet hasError = false;\r\n\r\n\t\t\t\t\t\tlet fieldName: keyof typeof fields & string;\r\n\t\t\t\t\t\tfor (fieldName in fields) {\r\n\t\t\t\t\t\t\tvalues[fieldName] = fields[fieldName].value;\r\n\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tconst validationSchema =\r\n\t\t\t\t\t\t\t\t\tfieldName in metadata.referencedValidatedFieldsMap &&\r\n\t\t\t\t\t\t\t\t\tvalidations[fieldName as unknown as keyof typeof validations]\r\n\t\t\t\t\t\t\t\t\t\t.handler;\r\n\r\n\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\ttypeof validationSchema !== 'function' ||\r\n\t\t\t\t\t\t\t\t\t!validations[fieldName as unknown as keyof typeof validations]\r\n\t\t\t\t\t\t\t\t\t\t.events.submit.isActive\r\n\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tvalidatedValues[fieldName] = validationSchema(\r\n\t\t\t\t\t\t\t\t\tfields[fieldName].value,\r\n\t\t\t\t\t\t\t\t\t'submit',\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\terrors[fieldName] = {\r\n\t\t\t\t\t\t\t\t\tname: fieldName,\r\n\t\t\t\t\t\t\t\t\tmessage: null,\r\n\t\t\t\t\t\t\t\t\tvalidationEvent: 'submit',\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\t\terrors[fieldName] = {\r\n\t\t\t\t\t\t\t\t\tname: fieldName,\r\n\t\t\t\t\t\t\t\t\tmessage: currentState.utils.errorFormatter(error, 'submit'),\r\n\t\t\t\t\t\t\t\t\tvalidationEvent: 'submit',\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet manualFieldName: keyof (typeof metadata)['manualValidatedFieldsMap'];\r\n\t\t\t\t\t\tfor (manualFieldName of metadata.manualValidatedFields) {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tconst validationSchema =\r\n\t\t\t\t\t\t\t\t\tcurrentState.validations[manualFieldName].handler;\r\n\t\t\t\t\t\t\t\tif (typeof validationSchema !== 'function') {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tvalidatedValues[manualFieldName as string] = validationSchema(\r\n\t\t\t\t\t\t\t\t\tvalues as FieldsValues,\r\n\t\t\t\t\t\t\t\t\t'submit',\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\terrors[manualFieldName as string] = {\r\n\t\t\t\t\t\t\t\t\tname: manualFieldName,\r\n\t\t\t\t\t\t\t\t\tmessage: null,\r\n\t\t\t\t\t\t\t\t\tvalidationEvent: 'submit',\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\t\terrors[manualFieldName as string] = {\r\n\t\t\t\t\t\t\t\t\tname: manualFieldName,\r\n\t\t\t\t\t\t\t\t\tmessage: currentState.utils.errorFormatter(error, 'submit'),\r\n\t\t\t\t\t\t\t\t\tvalidationEvent: 'submit',\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttype NecessaryEvil = {\r\n\t\t\t\t\t\t\tvalues: FieldsValues;\r\n\t\t\t\t\t\t\tvalidatedValues: GetValidationValuesFromSchema<ValidationsHandlers>;\r\n\t\t\t\t\t\t\terror: Parameters<\r\n\t\t\t\t\t\t\t\ttypeof _setFieldError<FieldsValues, ValidationsHandlers> // ['utils']['setFieldError']\r\n\t\t\t\t\t\t\t>[0];\r\n\t\t\t\t\t\t\terrors: {\r\n\t\t\t\t\t\t\t\t[Key in keyof ValidationsHandlers]: {\r\n\t\t\t\t\t\t\t\t\tname: Key;\r\n\t\t\t\t\t\t\t\t\tmessage: string | null;\r\n\t\t\t\t\t\t\t\t\tvalidationEvent: ValidationEvents;\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tlet _currentState: FormStoreShape<\r\n\t\t\t\t\t\t\tFieldsValues,\r\n\t\t\t\t\t\t\tValidationsHandlers\r\n\t\t\t\t\t\t> = get();\r\n\t\t\t\t\t\tlet errorKey: keyof typeof errors & string;\r\n\t\t\t\t\t\tfor (errorKey in errors) {\r\n\t\t\t\t\t\t\tconst errorObj = errors[errorKey];\r\n\r\n\t\t\t\t\t\t\t_currentState = _setFieldError<FieldsValues, ValidationsHandlers>(\r\n\t\t\t\t\t\t\t\terrors[errorKey] as unknown as NecessaryEvil['error'],\r\n\t\t\t\t\t\t\t)(_currentState);\r\n\r\n\t\t\t\t\t\t\tif (typeof errorObj.message !== 'string') continue;\r\n\r\n\t\t\t\t\t\t\thasError = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!hasError) {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tawait cb({\r\n\t\t\t\t\t\t\t\t\tevent,\r\n\t\t\t\t\t\t\t\t\tvalues: values as NecessaryEvil['values'],\r\n\t\t\t\t\t\t\t\t\tvalidatedValues:\r\n\t\t\t\t\t\t\t\t\t\tvalidatedValues as NecessaryEvil['validatedValues'],\r\n\t\t\t\t\t\t\t\t\thasError,\r\n\t\t\t\t\t\t\t\t\terrors: errors as NecessaryEvil['errors'],\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tcurrentState.utils.setSubmitState((prev) => ({\r\n\t\t\t\t\t\t\t\t\tisActive: false,\r\n\t\t\t\t\t\t\t\t\tcounter: prev.counter + 1,\r\n\t\t\t\t\t\t\t\t\tpassedAttempts: prev.counter + 1,\r\n\t\t\t\t\t\t\t\t\terrorMessage: null,\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\t\tcurrentState.utils.setSubmitState((prev) => ({\r\n\t\t\t\t\t\t\t\t\tisActive: false,\r\n\t\t\t\t\t\t\t\t\tcounter: prev.counter + 1,\r\n\t\t\t\t\t\t\t\t\tfailedAttempts: prev.counter + 1,\r\n\t\t\t\t\t\t\t\t\terrorMessage: currentState.utils.errorFormatter(\r\n\t\t\t\t\t\t\t\t\t\terror,\r\n\t\t\t\t\t\t\t\t\t\t'submit',\r\n\t\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tset(_currentState);\r\n\t\t\t\t\t\t\tcurrentState.utils.setSubmitState((prev) => ({\r\n\t\t\t\t\t\t\t\tisActive: false,\r\n\t\t\t\t\t\t\t\tcounter: prev.counter + 1,\r\n\t\t\t\t\t\t\t\tfailedAttempts: prev.counter + 1,\r\n\t\t\t\t\t\t\t\terrorMessage: null,\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t};\r\n\t};\r\n}\r\n"],"mappings":"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","names":["FormStoreField","params","isZodValidator","validator","isZodError","error","errorFormatter","formatDate","date","type","formattedDate","year","weekNumber","getWeekNumber","parseDate","dateString","parsedDate","hours","minutes","seconds","yearString","weekString","week","getFirstDateOfWeek","yearStart","daysSinceYearStart","januaryFirst","daysToFirstMonday","firstMonday","daysToTargetMonday","targetMonday","inputDateHelpers","createStore","useId","useState","handleCreateFormStore","params","createStore","createFormStoreBuilder","useCreateFormStore","props","baseId","dateInput","type","dateString","inputDateHelpers","onNotNullableTo","defaultValue","value","symbol","onNullable","onFalsyTo","onFalsy","onTruthyTo","onTruthy","formFieldValueHelpers","fieldValueHelpers_default","test_1","result_1","test_1_2","result_1_2","test_2","result_2","test_2_2","result_2_2","test_3","result_3","test_3_2","result_3_2","createFormStoreMetadata","params","baseId","metadata","fieldName","key","createFormStoreValidations","fieldValidationEvents","isFieldHavingPassedValidations","fieldValidationEventKey","validations","fieldValidationsHandler","isZodValidator","value","createFormStoreFields","fields","FormStoreField","_setFieldError","currentState","currentDirtyFieldsCounter","validation","_setFieldValue","name","valueOrUpdater","field","itemsToResetDefaults","createFormStoreBuilder","set","get","fieldsValues","validationName","isActive","_currentState","error","message","itemsToReset","isDirty","submit","focus","resetField","element","eventKey","errorFormatter","_value","_validationName","setFieldValue","setFieldError","event","cb","values","validatedValues","errors","hasError","validationSchema","manualFieldName","errorKey","errorObj","prev"]}