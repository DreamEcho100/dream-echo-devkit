{"version":3,"sources":["../src/zod.js","../src/form-store-field.js","../src/index.ts"],"names":["isZodValidator","validator","isZodError","error","errorFormatter","err","FormStoreField","params","value","createFormStoreMetadata","baseId","metadata","fieldName","key","createFormStoreValidations","fieldValidationEvents","isFieldHavingPassedValidations","fieldValidationEventKey","validations","fieldValidationsSchema","createFormStoreFields","fields","_setFieldError","currentState","currentDirtyFieldsCounter","validation","_setFieldValue","name","valueOrUpdater","field","itemsToResetDefaults","getFormStoreBaseMethods","set","get","getValues","fieldsValues","getValue","setSubmitState","setFocusState","validationName","type","_currentState","formattedError","resetFormStore","itemsToReset","isDirty","submit","focus","eventKey","setFieldValue","setFieldError","_value","_validationName","event","cb","values","validatedValues","errors","hasError","validationSchema","manualFieldName","errorKey","errorObj","prev","createFormStoreBuilder","formStoreBaseMethods"],"mappings":"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","sourcesContent":["/**\r\n * @param {unknown} validator\r\n * @returns {validator is import(\"zod\").ZodSchema}\r\n */\r\nexport function isZodValidator(validator) {\r\n\treturn !!(\r\n\t\tvalidator instanceof Object &&\r\n\t\t'parseAsync' in validator &&\r\n\t\ttypeof validator.parseAsync === 'function'\r\n\t);\r\n}\r\n\r\n/**\r\n * @param {unknown} error\r\n * @returns {error is import(\"zod\").ZodError}\r\n */\r\nexport function isZodError(error) {\r\n\treturn error instanceof Object && 'errors' in error;\r\n}\r\n\r\n// export const generateUUIDV4 = () =>\r\n// \t'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n// \t\tconst r = (Math.random() * 16) | 0;\r\n// \t\tconst v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n// \t\treturn v.toString(16);\r\n// \t});\r\n\r\n/**\r\n * @param {unknown} err\r\n * @returns {import(\"./types\").FormError}\r\n * */\r\nexport function errorFormatter(err) {\r\n\tif (isZodError(err)) {\r\n\t\t// /** @type {({ message: string; path: (string | number)[] })[]} */\r\n\t\t// const errors = [];\r\n\r\n\t\t// for (const item of err.issues) {\r\n\t\t// \terrors.push({\r\n\t\t// \t\tmessage: item.message,\r\n\t\t// \t\tpath: item.path,\r\n\t\t// \t});\r\n\t\t// }\r\n\r\n\t\tif (err.formErrors.formErrors.length > 0) {\r\n\t\t\treturn { message: err.formErrors.formErrors[0] };\r\n\t\t}\r\n\r\n\t\treturn err.errors;\r\n\t}\r\n\r\n\tif (err instanceof Error) return err;\r\n\r\n\treturn { message: 'Something went wrong!' };\r\n}\r\n","/**\r\n * @template Name\r\n * @template Value\r\n * @typedef FieldMetadata\r\n *\r\n * @prop {Name & string} name\r\n * @prop {Value} initialValue\r\n */\r\n\r\n/** @exports FieldMetadata */\r\n\r\n/**\r\n * @template FieldsValues\r\n * @template {keyof FieldsValues} Key\r\n */\r\nexport default class FormStoreField {\r\n\t/** @type {string} */\r\n\tid;\r\n\r\n\t/** @type {FieldsValues[Key]} */\r\n\tvalue;\r\n\r\n\t/** @type {FieldMetadata<Key, FieldsValues[Key]>} */\r\n\tmetadata;\r\n\r\n\t/** @type {((fieldValue: unknown) => Exclude<FieldsValues[Key], (value: FieldsValues[Key]) => FieldsValues[Key]>) | undefined} */\r\n\tvalueFromFieldToStore;\r\n\r\n\t/** @type {(storeValue: FieldsValues[Key]) => string | ReadonlyArray<string> | number | undefined} */\r\n\tvalueFromStoreToField;\r\n\r\n\t/**\r\n\t * @param {{\r\n\t *   id: string;\r\n\t *   value: FieldsValues[Key];\r\n\t *   metadata: FieldMetadata<Key, FieldsValues[Key]>;\r\n\t *   valueFromFieldToStore?: (fieldValue: unknown) => Exclude<FieldsValues[Key], (value: FieldsValues[Key]) => FieldsValues[Key]>;\r\n\t *   valueFromStoreToField?: (StoreValue: FieldsValues[Key]) => string | ReadonlyArray<string> | number | undefined;\r\n\t * }} params\r\n\t */\r\n\tconstructor(params) {\r\n\t\t/** @type {string} */\r\n\t\tthis.id = params.id;\r\n\r\n\t\t/** @type {FieldsValues[Key]} */\r\n\t\tthis.value = params.value;\r\n\r\n\t\t/** @type {FieldMetadata<Key, FieldsValues[Key]>} */\r\n\t\tthis.metadata = params.metadata;\r\n\r\n\t\t/** @type {boolean} */\r\n\r\n\t\t/** @type {(fieldValue: unknown) => Exclude<FieldsValues[Key], (value: FieldsValues[Key]) => FieldsValues[Key]>} */\r\n\t\tthis.valueFromFieldToStore = params.valueFromFieldToStore;\r\n\r\n\t\t/** @type {(StoreValue: FieldsValues[Key]) => string | ReadonlyArray<string> | number | undefined} */\r\n\t\tthis.valueFromStoreToField =\r\n\t\t\tparams.valueFromStoreToField ??\r\n\t\t\t/**\r\n\t\t\t * @param {FieldsValues[Key]} StoreValue\r\n\t\t\t * @returns string | ReadonlyArray<string> | number | undefined\r\n\t\t\t */\r\n\t\t\t((value) => value ?? '');\r\n\t}\r\n\r\n\t/**\r\n\t * @description Gets the field value converted _(using the passed `valueFromStoreToField` if not it will just return the original value)_ from the store value.\r\n\t *\r\n\t * @type {string | ReadonlyArray<string> | number | undefined}\r\n\t * */\r\n\tget storeToFieldValue() {\r\n\t\treturn this.valueFromStoreToField(this.value);\r\n\t}\r\n}\r\n","export * from './types';\r\nexport * from './zod';\r\nexport {\r\n\t/** @description field value helpers */\r\n\tdefault as fvh,\r\n} from './helpers/field-value';\r\n\r\nimport type {\r\n\tValidationEvents,\r\n\tCreateFormStoreProps,\r\n\tFormStoreShape,\r\n\tGetFromFormStoreShape,\r\n\tHandleSubmitCB,\r\n\tGetValidationValuesFromSchema,\r\n\tFormStoreShapeBaseMethods,\r\n\tValidValidationSchema,\r\n} from './types';\r\nimport type {\r\n\tFormErrorShape,\r\n\tAnyValueExceptFunctions,\r\n\tSetStateInternal,\r\n} from './types/_internal';\r\n\r\nimport FormStoreField from './form-store-field';\r\nimport { errorFormatter as defaultErrorFormatter, isZodValidator } from './zod';\r\n\r\nfunction createFormStoreMetadata<\r\n\tFieldsValues,\r\n\tValidationSchema extends ValidValidationSchema<FieldsValues>,\r\n>(\r\n\tparams: CreateFormStoreProps<FieldsValues, ValidationSchema>,\r\n\tbaseId: string,\r\n) {\r\n\ttype FormStore = FormStoreShape<FieldsValues, ValidationSchema>;\r\n\r\n\tif (!params.initialValues || typeof params.initialValues !== 'object')\r\n\t\tthrow new Error('');\r\n\r\n\tconst metadata = {\r\n\t\tbaseId,\r\n\t\tformId: `${baseId}-form`,\r\n\t\tfieldsNames: {},\r\n\t\tfieldsNamesMap: {},\r\n\t\t//\r\n\t\tvalidatedFieldsNames: [],\r\n\t\tvalidatedFieldsNamesMap: {},\r\n\t\t// //\r\n\t\tmanualValidatedFields: [],\r\n\t\tmanualValidatedFieldsMap: [],\r\n\t\t// // //\r\n\t\treferencedValidatedFields: [],\r\n\t\treferencedValidatedFieldsMap: [],\r\n\t} as unknown as FormStore['metadata'];\r\n\r\n\tmetadata.fieldsNames = Object.keys(\r\n\t\tparams.initialValues,\r\n\t) as typeof metadata.fieldsNames;\r\n\tfor (const fieldName of metadata.fieldsNames) {\r\n\t\tmetadata.fieldsNamesMap[fieldName] = true;\r\n\t}\r\n\r\n\tif (params.validationSchema) {\r\n\t\tfor (const key in params.validationSchema) {\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t\t// @ts-ignore\r\n\t\t\tmetadata.validatedFieldsNames.push(key);\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t\t// @ts-ignore\r\n\t\t\tmetadata.validatedFieldsNamesMap[key] = true;\r\n\r\n\t\t\tif (key in metadata.fieldsNamesMap) {\r\n\t\t\t\tmetadata.referencedValidatedFields.push(\r\n\t\t\t\t\tkey as unknown as (typeof metadata)['referencedValidatedFields'][number],\r\n\t\t\t\t);\r\n\t\t\t\tmetadata.referencedValidatedFieldsMap[\r\n\t\t\t\t\tkey as unknown as (typeof metadata)['referencedValidatedFields'][number]\r\n\t\t\t\t] = true;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tmetadata.manualValidatedFields.push(\r\n\t\t\t\tkey as unknown as (typeof metadata)['manualValidatedFields'][number],\r\n\t\t\t);\r\n\t\t\t(metadata.manualValidatedFieldsMap as Record<string, true>)[\r\n\t\t\t\tkey // as unknown as (typeof metadata)['manualValidatedFieldsMap'][number]\r\n\t\t\t] = true;\r\n\t\t}\r\n\t}\r\n\r\n\treturn metadata;\r\n}\r\n\r\nfunction createFormStoreValidations<\r\n\tFieldsValues,\r\n\tValidationSchema extends ValidValidationSchema<FieldsValues>,\r\n>(\r\n\tparams: CreateFormStoreProps<FieldsValues, ValidationSchema>,\r\n\tmetadata: FormStoreShape<FieldsValues, ValidationSchema>['metadata'],\r\n) {\r\n\ttype FormStore = FormStoreShape<FieldsValues, ValidationSchema>;\r\n\r\n\tlet fieldValidationEvents: NonNullable<typeof params.validationEvents> = {\r\n\t\tsubmit: true,\r\n\t\tfocus: true,\r\n\t};\r\n\tlet isFieldHavingPassedValidations = false;\r\n\tlet fieldValidationEventKey: ValidationEvents;\r\n\r\n\tconst validations: FormStore['validations'] = {} as FormStore['validations'];\r\n\r\n\tif (!params.validationSchema) return validations;\r\n\r\n\tfor (const fieldName of metadata.validatedFieldsNames) {\r\n\t\tconst fieldValidationsSchema =\r\n\t\t\tparams.validationSchema[\r\n\t\t\t\tfieldName as keyof GetFromFormStoreShape<FormStore> &\r\n\t\t\t\t\tkeyof GetFromFormStoreShape<FormStore, 'validationSchemas'>\r\n\t\t\t];\r\n\r\n\t\tvalidations[fieldName] = {\r\n\t\t\thandler: !fieldValidationsSchema\r\n\t\t\t\t? undefined\r\n\t\t\t\t: isZodValidator(fieldValidationsSchema)\r\n\t\t\t\t? (params: unknown) =>\r\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n\t\t\t\t\t\tfieldValidationsSchema.parse((params as { value: unknown }).value)\r\n\t\t\t\t: fieldValidationsSchema,\r\n\t\t\tcurrentDirtyEventsCounter: 0,\r\n\t\t\tfailedAttempts: 0,\r\n\t\t\tpassedAttempts: 0,\r\n\t\t\tevents: {\r\n\t\t\t\tchange: {\r\n\t\t\t\t\tfailedAttempts: 0,\r\n\t\t\t\t\tpassedAttempts: 0,\r\n\t\t\t\t\tisActive: params.validationEvents?.change ?? false,\r\n\t\t\t\t},\r\n\t\t\t\tfocus: {\r\n\t\t\t\t\tfailedAttempts: 0,\r\n\t\t\t\t\tpassedAttempts: 0,\r\n\t\t\t\t\tisActive: params.validationEvents?.focus ?? true,\r\n\t\t\t\t},\r\n\t\t\t\tsubmit: {\r\n\t\t\t\t\tfailedAttempts: 0,\r\n\t\t\t\t\tpassedAttempts: 0,\r\n\t\t\t\t\tisActive: params.validationEvents?.submit ?? true,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\tcurrentEvent: null,\r\n\t\t\tisDirty: false,\r\n\t\t\tmetadata: { name: fieldName },\r\n\t\t} as NonNullable<FormStore['validations'][keyof FormStore['validations']]>;\r\n\r\n\t\tif (params.validationEvents) {\r\n\t\t\tisFieldHavingPassedValidations = true;\r\n\t\t\tfieldValidationEvents = {\r\n\t\t\t\t...fieldValidationEvents,\r\n\t\t\t\t...params.validationEvents,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (isFieldHavingPassedValidations) {\r\n\t\t\tfor (fieldValidationEventKey in fieldValidationEvents) {\r\n\t\t\t\tvalidations[fieldName].events[fieldValidationEventKey].isActive =\r\n\t\t\t\t\t!!typeof fieldValidationEvents[fieldValidationEventKey];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn validations;\r\n}\r\n\r\nfunction createFormStoreFields<\r\n\tFieldsValues,\r\n\tValidationSchema extends ValidValidationSchema<FieldsValues>,\r\n>(\r\n\tparams: CreateFormStoreProps<FieldsValues, ValidationSchema>,\r\n\tbaseId: string,\r\n\tmetadata: FormStoreShape<FieldsValues, ValidationSchema>['metadata'],\r\n) {\r\n\ttype FormStore = FormStoreShape<FieldsValues, ValidationSchema>;\r\n\r\n\tconst fields = {} as FormStore['fields'];\r\n\tfor (const fieldName of metadata.fieldsNames) {\r\n\t\tfields[fieldName] = new FormStoreField({\r\n\t\t\tvalue: params.initialValues[fieldName],\r\n\t\t\tvalueFromFieldToStore: params.valuesFromFieldsToStore?.[fieldName]\r\n\t\t\t\t? params.valuesFromFieldsToStore[fieldName]\r\n\t\t\t\t: undefined,\r\n\t\t\tvalueFromStoreToField: params.valuesFromStoreToFields?.[fieldName]\r\n\t\t\t\t? params.valuesFromStoreToFields[fieldName]\r\n\t\t\t\t: undefined,\r\n\t\t\tid: `${baseId}field-${String(fieldName)}`,\r\n\t\t\tmetadata: {\r\n\t\t\t\tname: fieldName,\r\n\t\t\t\tinitialValue: params.initialValues[fieldName],\r\n\t\t\t},\r\n\t\t} as (typeof fields)[typeof fieldName]);\r\n\t}\r\n\r\n\treturn fields;\r\n}\r\n\r\nfunction _setFieldError<FieldsValues, ValidationSchema>(\r\n\tparams: FormErrorShape<keyof ValidationSchema>,\r\n) {\r\n\treturn function (\r\n\t\tcurrentState: FormStoreShape<FieldsValues, ValidationSchema>,\r\n\t): FormStoreShape<FieldsValues, ValidationSchema> {\r\n\t\tif (\r\n\t\t\t!currentState.validations[params.name].events[params.validationEvent]\r\n\t\t\t\t.isActive\r\n\t\t)\r\n\t\t\treturn currentState;\r\n\r\n\t\tlet currentDirtyFieldsCounter = currentState.currentDirtyFieldsCounter;\r\n\t\tconst validation = {\r\n\t\t\t...currentState.validations[params.name],\r\n\t\t};\r\n\t\tvalidation.currentEvent = params.validationEvent;\r\n\r\n\t\tif (params.error) {\r\n\t\t\tvalidation.failedAttempts++;\r\n\t\t\tvalidation.events[params.validationEvent].failedAttempts++;\r\n\r\n\t\t\tif (!validation.isDirty) {\r\n\t\t\t\tvalidation.currentDirtyEventsCounter++;\r\n\t\t\t\tif (validation.currentDirtyEventsCounter > 0) {\r\n\t\t\t\t\tcurrentDirtyFieldsCounter++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvalidation.isDirty = true;\r\n\t\t\tvalidation.error = params.error;\r\n\t\t} else {\r\n\t\t\tvalidation.passedAttempts++;\r\n\t\t\tvalidation.events[params.validationEvent].passedAttempts++;\r\n\r\n\t\t\tif (validation.isDirty) {\r\n\t\t\t\tvalidation.currentDirtyEventsCounter--;\r\n\t\t\t\tif (validation.currentDirtyEventsCounter === 0) {\r\n\t\t\t\t\tcurrentDirtyFieldsCounter--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvalidation.isDirty = false;\r\n\t\t\tvalidation.error = null;\r\n\t\t}\r\n\r\n\t\tcurrentState.currentDirtyFieldsCounter = currentDirtyFieldsCounter;\r\n\t\tcurrentState.isDirty = currentDirtyFieldsCounter > 0;\r\n\t\tcurrentState.validations = {\r\n\t\t\t...currentState.validations,\r\n\t\t\t[params.name]: validation,\r\n\t\t};\r\n\r\n\t\treturn currentState;\r\n\t};\r\n}\r\n\r\nfunction _setFieldValue<\r\n\tFieldsValues,\r\n\tValidationSchema,\r\n\tName extends keyof FieldsValues,\r\n>(\r\n\tname: Name,\r\n\tvalueOrUpdater:\r\n\t\t| AnyValueExceptFunctions\r\n\t\t| ((value: FieldsValues[Name]) => FieldsValues[Name]),\r\n) {\r\n\treturn function (\r\n\t\tcurrentState: FormStoreShape<FieldsValues, ValidationSchema>,\r\n\t): FormStoreShape<FieldsValues, ValidationSchema> {\r\n\t\tconst field = currentState.fields[name];\r\n\r\n\t\tfield.value = (\r\n\t\t\ttypeof valueOrUpdater === 'function'\r\n\t\t\t\t? valueOrUpdater(field.value)\r\n\t\t\t\t: valueOrUpdater\r\n\t\t) as FieldsValues[typeof name];\r\n\r\n\t\treturn {\r\n\t\t\t...currentState,\r\n\t\t\tfields: {\r\n\t\t\t\t...currentState.fields,\r\n\t\t\t\t[name]: field,\r\n\t\t\t},\r\n\t\t};\r\n\t};\r\n}\r\n\r\nconst itemsToResetDefaults = {\r\n\tfields: true,\r\n\tvalidations: true,\r\n\tsubmit: false,\r\n\tfocus: true,\r\n};\r\n\r\nfunction getFormStoreBaseMethods<\r\n\tFieldsValues,\r\n\tValidationSchema extends ValidValidationSchema<FieldsValues>,\r\n>(\r\n\tset: SetStateInternal<FormStoreShape<FieldsValues, ValidationSchema>>,\r\n\tget: () => FormStoreShape<FieldsValues, ValidationSchema>,\r\n\tparams: CreateFormStoreProps<FieldsValues, ValidationSchema>,\r\n): FormStoreShapeBaseMethods<FieldsValues, ValidationSchema> {\r\n\ttype FormStoreBaseMethods = FormStoreShapeBaseMethods<\r\n\t\tFieldsValues,\r\n\t\tValidationSchema\r\n\t>;\r\n\r\n\tconst getValues: FormStoreBaseMethods['getValues'] = () => {\r\n\t\tconst currentState = get();\r\n\t\tconst fieldsValues = {} as FieldsValues;\r\n\r\n\t\tlet fieldName: string;\r\n\t\tfor (fieldName in currentState.fields) {\r\n\t\t\tfieldsValues[fieldName as keyof FieldsValues] =\r\n\t\t\t\tcurrentState.fields[fieldName as keyof FieldsValues].value;\r\n\t\t}\r\n\r\n\t\treturn fieldsValues;\r\n\t};\r\n\tconst getValue: FormStoreBaseMethods['getValue'] = (name) => {\r\n\t\tconst currentState = get();\r\n\t\treturn currentState.fields[name].value;\r\n\t};\r\n\tconst setSubmitState: FormStoreBaseMethods['setSubmitState'] = (\r\n\t\tvalueOrUpdater,\r\n\t) => {\r\n\t\tset(function (currentState) {\r\n\t\t\treturn {\r\n\t\t\t\tsubmit: {\r\n\t\t\t\t\t...currentState.submit,\r\n\t\t\t\t\t...(typeof valueOrUpdater === 'function'\r\n\t\t\t\t\t\t? valueOrUpdater(currentState.submit)\r\n\t\t\t\t\t\t: valueOrUpdater),\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n\r\n\tconst setFocusState: FormStoreBaseMethods['setFocusState'] = (\r\n\t\tfieldName,\r\n\t\tvalidationName,\r\n\t\ttype,\r\n\t) => {\r\n\t\tset(function (currentState) {\r\n\t\t\tlet _currentState = currentState;\r\n\r\n\t\t\tif (_currentState.validations[validationName].events.focus.isActive) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\t_currentState.validations[validationName].handler({\r\n\t\t\t\t\t\tvalue: (!validationName || fieldName === validationName\r\n\t\t\t\t\t\t\t? _currentState.fields[fieldName].value\r\n\t\t\t\t\t\t\t: undefined) as never,\r\n\t\t\t\t\t\tname: fieldName as never,\r\n\t\t\t\t\t\tvalidationEvent: 'focus',\r\n\t\t\t\t\t\tget,\r\n\t\t\t\t\t\tgetValue: _currentState._baseMethods.getValue,\r\n\t\t\t\t\t\tgetValues: _currentState._baseMethods.getValues,\r\n\t\t\t\t\t});\r\n\t\t\t\t\t_currentState = _setFieldError<FieldsValues, ValidationSchema>({\r\n\t\t\t\t\t\tname: validationName,\r\n\t\t\t\t\t\terror: null,\r\n\t\t\t\t\t\tvalidationEvent: 'focus',\r\n\t\t\t\t\t})(_currentState);\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconst formattedError = _currentState.errorFormatter(error, 'focus');\r\n\t\t\t\t\t_currentState = _setFieldError<FieldsValues, ValidationSchema>({\r\n\t\t\t\t\t\tname: validationName,\r\n\t\t\t\t\t\terror: formattedError,\r\n\t\t\t\t\t\tvalidationEvent: 'focus',\r\n\t\t\t\t\t})(_currentState);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\t_currentState.focus.isActive &&\r\n\t\t\t\t\t_currentState.focus.field.name === fieldName\r\n\t\t\t\t)\r\n\t\t\t\t\treturn _currentState;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tfocus:\r\n\t\t\t\t\ttype === 'in'\r\n\t\t\t\t\t\t? {\r\n\t\t\t\t\t\t\t\tisActive: true,\r\n\t\t\t\t\t\t\t\tfield: {\r\n\t\t\t\t\t\t\t\t\tname: fieldName,\r\n\t\t\t\t\t\t\t\t\tid: _currentState.fields[fieldName].id,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t: { isActive: false, field: null },\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n\r\n\tconst resetFormStore: FormStoreBaseMethods['resetFormStore'] = (\r\n\t\titemsToReset = itemsToResetDefaults,\r\n\t) => {\r\n\t\treturn set(function (currentState) {\r\n\t\t\tconst fields = currentState.fields;\r\n\t\t\tconst validations = currentState.validations;\r\n\t\t\tlet isDirty = currentState.isDirty;\r\n\t\t\tlet submit = currentState.submit;\r\n\t\t\tlet focus = currentState.focus;\r\n\r\n\t\t\tif (itemsToReset.fields) {\r\n\t\t\t\tlet fieldName: keyof typeof fields;\r\n\t\t\t\tfor (fieldName in fields) {\r\n\t\t\t\t\tfields[fieldName].value = fields[fieldName].metadata.initialValue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (itemsToReset.validations) {\r\n\t\t\t\tfor (const key in validations) {\r\n\t\t\t\t\tvalidations[key].failedAttempts = 0;\r\n\t\t\t\t\tvalidations[key].passedAttempts = 0;\r\n\t\t\t\t\tvalidations[key].currentEvent = null;\r\n\t\t\t\t\tvalidations[key].isDirty = false;\r\n\t\t\t\t\tvalidations[key].error = null;\r\n\r\n\t\t\t\t\tlet eventKey: ValidationEvents;\r\n\t\t\t\t\tfor (eventKey in validations[key].events) {\r\n\t\t\t\t\t\tvalidations[key].events[eventKey].isActive = false;\r\n\t\t\t\t\t\tvalidations[key].events[eventKey].failedAttempts = 0;\r\n\t\t\t\t\t\tvalidations[key].events[eventKey].passedAttempts = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tisDirty = false;\r\n\t\t\t}\r\n\t\t\tif (itemsToReset.submit) {\r\n\t\t\t\tsubmit = {\r\n\t\t\t\t\tcounter: 0,\r\n\t\t\t\t\tpassedAttempts: 0,\r\n\t\t\t\t\tfailedAttempts: 0,\r\n\t\t\t\t\terror: null,\r\n\t\t\t\t\tisActive: false,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tif (itemsToReset.focus) {\r\n\t\t\t\tfocus = {\r\n\t\t\t\t\tisActive: false,\r\n\t\t\t\t\tfield: null,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tfields,\r\n\t\t\t\tvalidations,\r\n\t\t\t\tisDirty,\r\n\t\t\t\tsubmit,\r\n\t\t\t\tfocus,\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n\r\n\tconst setFieldValue: FormStoreBaseMethods['setFieldValue'] = (\r\n\t\tname,\r\n\t\tvalue,\r\n\t) => {\r\n\t\treturn set(_setFieldValue(name, value));\r\n\t};\r\n\tconst setFieldError: FormStoreBaseMethods['setFieldError'] = (params) => {\r\n\t\tset(_setFieldError(params));\r\n\t};\r\n\tconst errorFormatter: FormStoreBaseMethods['errorFormatter'] =\r\n\t\tparams.errorFormatter ?? defaultErrorFormatter;\r\n\tconst handleInputChange: FormStoreBaseMethods['handleInputChange'] = (\r\n\t\tname,\r\n\t\tvalueOrUpdater,\r\n\t\tvalidationName,\r\n\t) => {\r\n\t\tlet currentState = get();\r\n\t\tconst field = currentState.fields[name];\r\n\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n\t\tconst _value =\r\n\t\t\ttypeof valueOrUpdater === 'function'\r\n\t\t\t\t? valueOrUpdater(field.value)\r\n\t\t\t\t: valueOrUpdater;\r\n\t\tconst value = field.valueFromFieldToStore\r\n\t\t\t? field.valueFromFieldToStore(_value)\r\n\t\t\t: (_value as FieldsValues[typeof name]);\r\n\r\n\t\tconst _validationName = (\r\n\t\t\tvalidationName\r\n\t\t\t\t? validationName\r\n\t\t\t\t: // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tcurrentState.metadata.referencedValidatedFieldsMap[name]\r\n\t\t\t\t? name\r\n\t\t\t\t: undefined\r\n\t\t) as typeof validationName;\r\n\r\n\t\tconst setFieldValue = _setFieldValue<\r\n\t\t\tFieldsValues,\r\n\t\t\tValidationSchema,\r\n\t\t\ttypeof name\r\n\t\t>;\r\n\t\tconst setFieldError = _setFieldError<FieldsValues, ValidationSchema>;\r\n\r\n\t\tif (\r\n\t\t\t_validationName &&\r\n\t\t\tcurrentState.validations[_validationName].events['change'].isActive\r\n\t\t) {\r\n\t\t\ttry {\r\n\t\t\t\tcurrentState = setFieldValue(\r\n\t\t\t\t\tname,\r\n\t\t\t\t\tcurrentState.validations[_validationName].handler({\r\n\t\t\t\t\t\tvalue: (validationName &&\r\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\tvalidationName !== name\r\n\t\t\t\t\t\t\t? currentState.getValues()\r\n\t\t\t\t\t\t\t: value) as never,\r\n\t\t\t\t\t\tname: name as never,\r\n\t\t\t\t\t\tget,\r\n\t\t\t\t\t\tvalidationEvent: 'change',\r\n\t\t\t\t\t\tgetValue: currentState._baseMethods.getValue,\r\n\t\t\t\t\t\tgetValues: currentState._baseMethods.getValues,\r\n\t\t\t\t\t}),\r\n\t\t\t\t)(currentState);\r\n\r\n\t\t\t\tcurrentState = setFieldError({\r\n\t\t\t\t\tname: _validationName,\r\n\t\t\t\t\terror: null,\r\n\t\t\t\t\tvalidationEvent: 'change',\r\n\t\t\t\t})(currentState);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tcurrentState = setFieldError({\r\n\t\t\t\t\tname: _validationName,\r\n\t\t\t\t\terror: currentState.errorFormatter(error, 'change'),\r\n\t\t\t\t\tvalidationEvent: 'change',\r\n\t\t\t\t})(currentState);\r\n\r\n\t\t\t\tcurrentState = setFieldValue(name, value)(currentState);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tcurrentState = setFieldValue(name, value)(currentState);\r\n\t\t}\r\n\r\n\t\tset(currentState);\r\n\t};\r\n\tconst getFieldEventsListeners: FormStoreBaseMethods['getFieldEventsListeners'] =\r\n\t\t(name, validationName) => {\r\n\t\t\tconst currentState = get();\r\n\t\t\tconst _validationName = validationName ?? name;\r\n\r\n\t\t\treturn {\r\n\t\t\t\tonChange: (event: { target: { value: string } }) => {\r\n\t\t\t\t\tcurrentState.handleInputChange(name, event.target.value);\r\n\t\t\t\t},\r\n\t\t\t\tonFocus: () => {\r\n\t\t\t\t\tcurrentState.setFocusState(name, _validationName, 'in');\r\n\t\t\t\t},\r\n\t\t\t\tonBlur: () => {\r\n\t\t\t\t\tcurrentState.setFocusState(name, _validationName, 'out');\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t};\r\n\tconst handleSubmit: FormStoreBaseMethods['handleSubmit'] = <Event>(\r\n\t\tcb: HandleSubmitCB<FieldsValues, ValidationSchema, Event>,\r\n\t) => {\r\n\t\treturn async function (\r\n\t\t\tevent: Event,\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t\t// @ts-ignore\r\n\t\t): Promise<unknown> | unknown {\r\n\t\t\t(event as { preventDefault: () => void }).preventDefault();\r\n\r\n\t\t\tconst currentState = get();\r\n\r\n\t\t\tcurrentState.setSubmitState({ isActive: true });\r\n\r\n\t\t\tconst metadata = currentState.metadata;\r\n\t\t\tconst fields = currentState.fields;\r\n\t\t\tconst validations = currentState.validations;\r\n\t\t\tconst values: Record<string, unknown> = {};\r\n\t\t\tconst validatedValues: Record<string, unknown> = {};\r\n\r\n\t\t\tconst errors: Record<string, FormErrorShape<keyof ValidationSchema>> = {};\r\n\r\n\t\t\tlet hasError = false;\r\n\r\n\t\t\tlet fieldName: keyof typeof fields & string;\r\n\t\t\tfor (fieldName in fields) {\r\n\t\t\t\tvalues[fieldName] = fields[fieldName].value;\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst validationSchema =\r\n\t\t\t\t\t\tfieldName in metadata.referencedValidatedFieldsMap &&\r\n\t\t\t\t\t\tvalidations[fieldName as unknown as keyof typeof validations]\r\n\t\t\t\t\t\t\t.handler;\r\n\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\ttypeof validationSchema !== 'function' ||\r\n\t\t\t\t\t\t!validations[fieldName as unknown as keyof typeof validations]\r\n\t\t\t\t\t\t\t.events.submit.isActive\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvalidatedValues[fieldName] = validationSchema({\r\n\t\t\t\t\t\tvalue: fields[fieldName].value as never,\r\n\t\t\t\t\t\tname: fieldName as never,\r\n\t\t\t\t\t\tget,\r\n\t\t\t\t\t\tvalidationEvent: 'submit',\r\n\t\t\t\t\t\t...currentState._baseMethods,\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\terrors[fieldName] = {\r\n\t\t\t\t\t\tname: fieldName,\r\n\t\t\t\t\t\terror: null,\r\n\t\t\t\t\t\tvalidationEvent: 'submit',\r\n\t\t\t\t\t};\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\terrors[fieldName] = {\r\n\t\t\t\t\t\tname: fieldName,\r\n\t\t\t\t\t\terror: currentState.errorFormatter(error, 'submit'),\r\n\t\t\t\t\t\tvalidationEvent: 'submit',\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet manualFieldName: keyof (typeof metadata)['manualValidatedFieldsMap'];\r\n\t\t\tfor (manualFieldName of metadata.manualValidatedFields) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst validationSchema =\r\n\t\t\t\t\t\tcurrentState.validations[manualFieldName].handler;\r\n\t\t\t\t\tif (typeof validationSchema !== 'function') {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvalidatedValues[manualFieldName as string] = validationSchema({\r\n\t\t\t\t\t\tvalue: undefined as never,\r\n\t\t\t\t\t\tname: undefined as never,\r\n\t\t\t\t\t\tget,\r\n\t\t\t\t\t\tvalidationEvent: 'submit',\r\n\t\t\t\t\t\t...currentState._baseMethods,\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\terrors[manualFieldName as string] = {\r\n\t\t\t\t\t\tname: manualFieldName,\r\n\t\t\t\t\t\terror: null,\r\n\t\t\t\t\t\tvalidationEvent: 'submit',\r\n\t\t\t\t\t};\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\terrors[manualFieldName as string] = {\r\n\t\t\t\t\t\tname: manualFieldName,\r\n\t\t\t\t\t\terror: currentState.errorFormatter(error, 'submit'),\r\n\t\t\t\t\t\tvalidationEvent: 'submit',\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\ttype NecessaryEvil = {\r\n\t\t\t\tvalues: FieldsValues;\r\n\t\t\t\tvalidatedValues: GetValidationValuesFromSchema<ValidationSchema>;\r\n\t\t\t\terror: { [Key in keyof ValidationSchema]: FormErrorShape<Key> };\r\n\t\t\t\terrors: {\r\n\t\t\t\t\t[Key in keyof ValidationSchema]: {\r\n\t\t\t\t\t\tname: Key;\r\n\t\t\t\t\t\tmessage: string | null;\r\n\t\t\t\t\t\tvalidationEvent: ValidationEvents;\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\t\t\t};\r\n\r\n\t\t\tlet _currentState: FormStoreShape<FieldsValues, ValidationSchema> = get();\r\n\t\t\tlet errorKey: keyof typeof errors & string;\r\n\t\t\tfor (errorKey in errors) {\r\n\t\t\t\tconst errorObj = errors[errorKey];\r\n\r\n\t\t\t\t_currentState = _setFieldError<FieldsValues, ValidationSchema>(\r\n\t\t\t\t\terrors[errorKey],\r\n\t\t\t\t)(_currentState);\r\n\r\n\t\t\t\tif (!errorObj.error) continue;\r\n\r\n\t\t\t\thasError = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (!hasError) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tawait cb({\r\n\t\t\t\t\t\tevent,\r\n\t\t\t\t\t\tvalues: values as NecessaryEvil['values'],\r\n\t\t\t\t\t\tvalidatedValues:\r\n\t\t\t\t\t\t\tvalidatedValues as NecessaryEvil['validatedValues'],\r\n\t\t\t\t\t\thasError,\r\n\t\t\t\t\t\terrors: errors as unknown as NecessaryEvil['errors'],\r\n\t\t\t\t\t});\r\n\t\t\t\t\tcurrentState.setSubmitState((prev) => ({\r\n\t\t\t\t\t\tisActive: false,\r\n\t\t\t\t\t\tcounter: prev.counter + 1,\r\n\t\t\t\t\t\tpassedAttempts: prev.counter + 1,\r\n\t\t\t\t\t\terror: null,\r\n\t\t\t\t\t}));\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tcurrentState.setSubmitState((prev) => ({\r\n\t\t\t\t\t\tisActive: false,\r\n\t\t\t\t\t\tcounter: prev.counter + 1,\r\n\t\t\t\t\t\tfailedAttempts: prev.counter + 1,\r\n\t\t\t\t\t\terror: currentState.errorFormatter(error, 'submit'),\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tset(_currentState);\r\n\t\t\t\tcurrentState.setSubmitState((prev) => ({\r\n\t\t\t\t\tisActive: false,\r\n\t\t\t\t\tcounter: prev.counter + 1,\r\n\t\t\t\t\tfailedAttempts: prev.counter + 1,\r\n\t\t\t\t\terror: null,\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\treturn {\r\n\t\tgetValues,\r\n\t\terrorFormatter,\r\n\t\tgetValue,\r\n\t\tsetSubmitState,\r\n\t\tsetFocusState,\r\n\t\tresetFormStore,\r\n\t\tsetFieldValue,\r\n\t\tsetFieldError,\r\n\t\thandleInputChange,\r\n\t\tgetFieldEventsListeners,\r\n\t\thandleSubmit,\r\n\t};\r\n}\r\n\r\nexport function createFormStoreBuilder<\r\n\tFieldsValues,\r\n\tValidationSchema extends ValidValidationSchema<FieldsValues>,\r\n>(params: CreateFormStoreProps<FieldsValues, ValidationSchema>) {\r\n\ttype FormStore = FormStoreShape<FieldsValues, ValidationSchema>;\r\n\r\n\treturn (\r\n\t\tset: SetStateInternal<FormStore>,\r\n\t\tget: () => FormStore,\r\n\t): FormStore => {\r\n\t\tconst formStoreBaseMethods = getFormStoreBaseMethods(set, get, params);\r\n\r\n\t\tconst baseId = params.baseId ? `${params.baseId}-` : '';\r\n\t\tconst metadata = createFormStoreMetadata(params, baseId);\r\n\t\tconst fields = createFormStoreFields(params, baseId, metadata);\r\n\t\tconst validations = createFormStoreValidations(params, metadata);\r\n\r\n\t\treturn {\r\n\t\t\tbaseId,\r\n\t\t\tmetadata,\r\n\t\t\tvalidations,\r\n\t\t\tfields,\r\n\t\t\tid: `${baseId}form`,\r\n\t\t\tisDirty: false,\r\n\t\t\tsubmit: {\r\n\t\t\t\tcounter: 0,\r\n\t\t\t\tpassedAttempts: 0,\r\n\t\t\t\tfailedAttempts: 0,\r\n\t\t\t\terror: null,\r\n\t\t\t\tisActive: false,\r\n\t\t\t},\r\n\t\t\tfocus: { isActive: false, field: null },\r\n\t\t\tcurrentDirtyFieldsCounter: 0,\r\n\t\t\t_baseMethods: formStoreBaseMethods,\r\n\t\t\t...formStoreBaseMethods,\r\n\t\t};\r\n\t};\r\n}\r\n"]}