{"version":3,"sources":["../src/utils/index.ts"],"sourcesContent":["import { type FormEvent } from 'react';\r\nimport {\r\n\ttype ValidationEvents,\r\n\ttype CreateFormStoreProps,\r\n\ttype FormStoreShape,\r\n\ttype GetFromFormStoreShape,\r\n\t// type HandlePreSubmit,\r\n\ttype THandlePreSubmitCB,\r\n} from '../types';\r\nimport { errorFormatter, isZodValidator } from './zod';\r\n\r\n// export * as inputDateHelpers from './inputDateHelpers';\r\n// export * as zodHelpers from './zod';\r\n\r\ntype SetStateInternal<T> = (\r\n\tpartial: T | Partial<T> | ((state: T) => T | Partial<T>),\r\n\t// replace?: boolean | undefined,\r\n) => void;\r\n\r\nfunction createFormStoreMetadata<FieldsValues, ValidationsHandlers>(\r\n\tparams: CreateFormStoreProps<FieldsValues, ValidationsHandlers>,\r\n\tbaseId: string,\r\n) {\r\n\ttype FormStore = FormStoreShape<FieldsValues, ValidationsHandlers>;\r\n\tif (!params.initValues || typeof params.initValues !== 'object')\r\n\t\tthrow new Error('');\r\n\r\n\tconst metadata = {\r\n\t\tbaseId,\r\n\t\tformId: `${baseId}_form`,\r\n\t\tfieldsNames: {},\r\n\t\tfieldsNamesMap: {},\r\n\t\t//\r\n\t\tvalidatedFieldsNames: [],\r\n\t\tvalidatedFieldsNamesMap: {},\r\n\t\t// //\r\n\t\tmanualValidatedFields: [],\r\n\t\tmanualValidatedFieldsMap: [],\r\n\t\t// //\r\n\t\treferencedValidatedFields: [],\r\n\t\treferencedValidatedFieldsMap: [],\r\n\t} as unknown as FormStore['metadata'];\r\n\r\n\tmetadata.fieldsNames = Object.keys(\r\n\t\tparams.initValues,\r\n\t) as typeof metadata.fieldsNames;\r\n\tfor (const fieldName of metadata.fieldsNames) {\r\n\t\tmetadata.fieldsNamesMap[fieldName] = true;\r\n\t}\r\n\tfor (const key in params.validationsSchema) {\r\n\t\tmetadata.validatedFieldsNames.push(key);\r\n\t\tmetadata.validatedFieldsNamesMap[key] = true;\r\n\r\n\t\tif (key in metadata.fieldsNamesMap) {\r\n\t\t\tmetadata.referencedValidatedFields.push(\r\n\t\t\t\tkey as unknown as (typeof metadata)['referencedValidatedFields'][number],\r\n\t\t\t);\r\n\t\t\tmetadata.referencedValidatedFieldsMap[\r\n\t\t\t\tkey as unknown as (typeof metadata)['referencedValidatedFields'][number]\r\n\t\t\t] = true;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tmetadata.manualValidatedFields.push(\r\n\t\t\tkey as unknown as (typeof metadata)['manualValidatedFields'][number],\r\n\t\t);\r\n\t\t(metadata.manualValidatedFieldsMap as Record<string, true>)[\r\n\t\t\tkey // as unknown as (typeof metadata)['manualValidatedFieldsMap'][number]\r\n\t\t] = true;\r\n\t}\r\n\r\n\treturn metadata;\r\n}\r\n\r\nfunction createFormStoreValidations<FieldsValues, ValidationsHandlers>(\r\n\tparams: CreateFormStoreProps<FieldsValues, ValidationsHandlers>,\r\n\tmetadata: FormStoreShape<FieldsValues, ValidationsHandlers>['metadata'],\r\n) {\r\n\ttype FormStore = FormStoreShape<FieldsValues, ValidationsHandlers>;\r\n\r\n\tlet fieldValidationEvents: NonNullable<typeof params.validationEvents> = {\r\n\t\tsubmit: true,\r\n\t};\r\n\tlet isFieldHavingPassedValidations = false;\r\n\tlet fieldValidationEventKey: ValidationEvents;\r\n\r\n\tconst validations: FormStore['validations'] = {} as FormStore['validations'];\r\n\tfor (const fieldName of metadata.validatedFieldsNames) {\r\n\t\tconst fieldValidationsHandler =\r\n\t\t\tparams.validationsSchema?.[\r\n\t\t\t\tfieldName as keyof GetFromFormStoreShape<FormStore> &\r\n\t\t\t\t\tkeyof GetFromFormStoreShape<FormStore, 'validationHandlers'>\r\n\t\t\t];\r\n\r\n\t\tvalidations[fieldName] = {\r\n\t\t\thandler: !fieldValidationsHandler\r\n\t\t\t\t? undefined\r\n\t\t\t\t: isZodValidator(fieldValidationsHandler)\r\n\t\t\t\t? (value: unknown) => fieldValidationsHandler.parse(value)\r\n\t\t\t\t: fieldValidationsHandler,\r\n\t\t\tfailedAttempts: 0,\r\n\t\t\tpassedAttempts: 0,\r\n\t\t\tevents: {\r\n\t\t\t\t// blur: { failedAttempts: 0, passedAttempts: 0, isActive: false },\r\n\t\t\t\t// mount: { failedAttempts: 0, passedAttempts: 0, isActive: false },\r\n\t\t\t\tchange: {\r\n\t\t\t\t\tfailedAttempts: 0,\r\n\t\t\t\t\tpassedAttempts: 0,\r\n\t\t\t\t\tisActive: false,\r\n\t\t\t\t\tisDirty: false,\r\n\t\t\t\t\tmessage: null,\r\n\t\t\t\t},\r\n\t\t\t\tsubmit: {\r\n\t\t\t\t\tfailedAttempts: 0,\r\n\t\t\t\t\tpassedAttempts: 0,\r\n\t\t\t\t\tisActive: false,\r\n\t\t\t\t\tisDirty: false,\r\n\t\t\t\t\tmessage: null,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\tisDirty: false,\r\n\t\t\tmetadata: { name: fieldName },\r\n\t\t} as NonNullable<FormStore['validations'][keyof FormStore['validations']]>;\r\n\r\n\t\tif (params.validationEvents) {\r\n\t\t\tisFieldHavingPassedValidations = true;\r\n\t\t\tfieldValidationEvents = {\r\n\t\t\t\t...fieldValidationEvents,\r\n\t\t\t\t...params.validationEvents,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (isFieldHavingPassedValidations) {\r\n\t\t\tfor (fieldValidationEventKey in fieldValidationEvents) {\r\n\t\t\t\tvalidations[fieldName].events[fieldValidationEventKey].isActive =\r\n\t\t\t\t\t!!typeof fieldValidationEvents[fieldValidationEventKey];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn validations;\r\n}\r\n\r\nfunction createFormStoreFields<FieldsValues, ValidationsHandlers>(\r\n\tparams: CreateFormStoreProps<FieldsValues, ValidationsHandlers>,\r\n\tbaseId: string,\r\n\tmetadata: FormStoreShape<FieldsValues, ValidationsHandlers>['metadata'],\r\n) {\r\n\ttype FormStore = FormStoreShape<FieldsValues, ValidationsHandlers>;\r\n\r\n\tconst fields = {} as FormStore['fields'];\r\n\tfor (const fieldName of metadata.fieldsNames) {\r\n\t\tfields[fieldName] = {\r\n\t\t\tvalue: params.initValues[fieldName],\r\n\t\t\tisUpdatingValueOnError: params.isUpdatingFieldsValueOnError,\r\n\t\t\tvalueFromFieldToStore: params.valuesFromFieldsToStore?.[fieldName]\r\n\t\t\t\t? params.valuesFromFieldsToStore[fieldName]\r\n\t\t\t\t: undefined,\r\n\t\t\tvalueFromStoreToField: params.valuesFromStoreToFields?.[fieldName]\r\n\t\t\t\t? params.valuesFromStoreToFields[fieldName]\r\n\t\t\t\t: undefined,\r\n\t\t\terrors: null,\r\n\t\t\tisDirty: false,\r\n\t\t\tid: `${baseId}field-${String(fieldName)}`,\r\n\t\t\tmetadata: {\r\n\t\t\t\tname: fieldName,\r\n\t\t\t\tinitialValue: fields[fieldName].value,\r\n\t\t\t},\r\n\t\t} as (typeof fields)[typeof fieldName];\r\n\t}\r\n\r\n\treturn fields;\r\n}\r\n\r\nconst itemsToResetDefaults = {\r\n\tfields: true,\r\n\tvalidations: true,\r\n\tsubmitCounter: false,\r\n};\r\n\r\n// \t{\r\n// isUpdatingFieldsValueOnError = true,\r\n// trackValidationHistory = false,\r\n// valuesFromFieldsToStore,\r\n// valuesFromStoreToFields,\r\n// validationSchema: passedValidationSchema,\r\n// ...params\r\n// \t}\r\nexport function CreateFormStoreBuilder<FieldsValues, ValidationsHandlers>(\r\n\tparams: CreateFormStoreProps<FieldsValues, ValidationsHandlers>,\r\n) {\r\n\t// type FormStore = FormStoreShape<FieldsValues, ValidationsHandlers>;\r\n\r\n\tconst baseId = params.baseId ? `${params.baseId}-` : '';\r\n\tconst metadata = createFormStoreMetadata(params, baseId);\r\n\tconst fields = createFormStoreFields(params, baseId, metadata);\r\n\tconst validations = createFormStoreValidations(params, metadata);\r\n\r\n\treturn (\r\n\t\tset: SetStateInternal<FormStoreShape<FieldsValues, ValidationsHandlers>>,\r\n\t): FormStoreShape<FieldsValues, ValidationsHandlers> => {\r\n\t\treturn {\r\n\t\t\tbaseId,\r\n\t\t\tmetadata,\r\n\t\t\tvalidations,\r\n\t\t\tfields,\r\n\t\t\tid: `${baseId}-form`,\r\n\t\t\tisDirty: false,\r\n\t\t\tisSubmitting: false,\r\n\t\t\tsubmitCounter: 0,\r\n\t\t\tcurrentErrorsCounter: 0,\r\n\t\t\tutils: {\r\n\t\t\t\tsetIsSubmitting(valueOrUpdater) {\r\n\t\t\t\t\tset(function (currentStore) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t...currentStore,\r\n\t\t\t\t\t\t\tisSubmitting:\r\n\t\t\t\t\t\t\t\ttypeof valueOrUpdater === 'function'\r\n\t\t\t\t\t\t\t\t\t? valueOrUpdater(currentStore.isSubmitting)\r\n\t\t\t\t\t\t\t\t\t: valueOrUpdater,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tresetFormStore: function (itemsToReset = itemsToResetDefaults) {\r\n\t\t\t\t\treturn set(function (currentState) {\r\n\t\t\t\t\t\tconst fields = currentState.fields;\r\n\t\t\t\t\t\tconst validations = currentState.validations;\r\n\t\t\t\t\t\tlet isDirty = currentState.isDirty;\r\n\t\t\t\t\t\tlet submitCounter = currentState.submitCounter;\r\n\r\n\t\t\t\t\t\tif (itemsToReset.fields) {\r\n\t\t\t\t\t\t\tfor (const key in fields) {\r\n\t\t\t\t\t\t\t\tfields[key].value = fields[key].metadata.initialValue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (itemsToReset.validations) {\r\n\t\t\t\t\t\t\tfor (const key in validations) {\r\n\t\t\t\t\t\t\t\tvalidations[key].failedAttempts = 0;\r\n\t\t\t\t\t\t\t\tvalidations[key].passedAttempts = 0;\r\n\t\t\t\t\t\t\t\tvalidations[key].isDirty = false;\r\n\r\n\t\t\t\t\t\t\t\tlet eventKey: keyof (typeof validations)[typeof key]['events'];\r\n\t\t\t\t\t\t\t\tfor (eventKey in validations[key].events) {\r\n\t\t\t\t\t\t\t\t\t// validations[key].events[eventKey].\r\n\t\t\t\t\t\t\t\t\tvalidations[key].events[eventKey].failedAttempts = 0;\r\n\t\t\t\t\t\t\t\t\tvalidations[key].events[eventKey].passedAttempts = 0;\r\n\t\t\t\t\t\t\t\t\tvalidations[key].events[eventKey].isDirty = false;\r\n\t\t\t\t\t\t\t\t\tvalidations[key].events[eventKey].message = null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tisDirty = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (itemsToReset.submitCounter) {\r\n\t\t\t\t\t\t\tsubmitCounter = 0;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t...currentState,\r\n\t\t\t\t\t\t\tfields,\r\n\t\t\t\t\t\t\tvalidations,\r\n\t\t\t\t\t\t\tisDirty,\r\n\t\t\t\t\t\t\tsubmitCounter,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\t// errorFormatter: (error) => {\r\n\t\t\t\t// \tif (isZodError(error)) return error.format()._errors;\r\n\r\n\t\t\t\t// \tif (error instanceof Error) return [error.message];\r\n\t\t\t\t// \treturn ['Something went wrong!'];\r\n\t\t\t\t// },\r\n\t\t\t\tsetFieldValue(name, value) {\r\n\t\t\t\t\treturn set(function (currentState) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tfields: {\r\n\t\t\t\t\t\t\t\t...currentState.fields,\r\n\t\t\t\t\t\t\t\t[name]: {\r\n\t\t\t\t\t\t\t\t\t...currentState.fields[name],\r\n\t\t\t\t\t\t\t\t\tvalue:\r\n\t\t\t\t\t\t\t\t\t\ttypeof value === 'function'\r\n\t\t\t\t\t\t\t\t\t\t\t? (value(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentState.fields[name].value,\r\n\t\t\t\t\t\t\t\t\t\t\t  ) as FieldsValues[typeof name])\r\n\t\t\t\t\t\t\t\t\t\t\t: value,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tsetFieldErrors(params) {\r\n\t\t\t\t\tset(function (currentState) {\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t!currentState.validations[params.name].events[\r\n\t\t\t\t\t\t\t\tparams.validationEvent\r\n\t\t\t\t\t\t\t].isActive\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\treturn currentState;\r\n\r\n\t\t\t\t\t\tlet currentErrorsCounter = currentState.currentErrorsCounter;\r\n\t\t\t\t\t\tconst validation = currentState.validations[params.name];\r\n\r\n\t\t\t\t\t\tconst isDirty = !!params.error;\r\n\t\t\t\t\t\tif (isDirty) {\r\n\t\t\t\t\t\t\tvalidation.failedAttempts++;\r\n\t\t\t\t\t\t\tvalidation.currentErrorsCounter++;\r\n\t\t\t\t\t\t\tcurrentErrorsCounter++;\r\n\r\n\t\t\t\t\t\t\tvalidation.events[params.validationEvent].message = params.error;\r\n\t\t\t\t\t\t\tvalidation.events[params.validationEvent].isDirty = isDirty;\r\n\t\t\t\t\t\t\tvalidation.events[params.validationEvent].failedAttempts++;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvalidation.passedAttempts++;\r\n\t\t\t\t\t\t\tvalidation.currentErrorsCounter--;\r\n\t\t\t\t\t\t\tcurrentErrorsCounter--;\r\n\r\n\t\t\t\t\t\t\tvalidation.events[params.validationEvent].message = params.error;\r\n\t\t\t\t\t\t\tvalidation.events[params.validationEvent].isDirty = isDirty;\r\n\t\t\t\t\t\t\tvalidation.events[params.validationEvent].passedAttempts++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvalidation.isDirty = validation.currentErrorsCounter === 0;\r\n\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t...currentState,\r\n\t\t\t\t\t\t\tcurrentErrorsCounter,\r\n\t\t\t\t\t\t\tisDirty: currentErrorsCounter === 0,\r\n\t\t\t\t\t\t\tvalidation,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\terrorFormatter: params.errorFormatter ?? errorFormatter,\r\n\t\t\t\thandleOnInputChange(name, valueOrUpdater, validationName) {\r\n\t\t\t\t\tset(function (currentState) {\r\n\t\t\t\t\t\t// currentState.validations[name]\r\n\t\t\t\t\t\tconst field = currentState.fields[name];\r\n\r\n\t\t\t\t\t\tconst _validationName = (\r\n\t\t\t\t\t\t\tvalidationName\r\n\t\t\t\t\t\t\t\t? validationName\r\n\t\t\t\t\t\t\t\t: // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\t\tcurrentState.metadata.referencedValidatedFieldsMap[\r\n\t\t\t\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t\t\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\t\t\t\tname as (typeof currentState)['metadata']['referencedValidatedFieldsMap']\r\n\t\t\t\t\t\t\t\t  ]\r\n\t\t\t\t\t\t\t\t? name\r\n\t\t\t\t\t\t\t\t: undefined\r\n\t\t\t\t\t\t) as typeof validationName;\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t_validationName &&\r\n\t\t\t\t\t\t\tcurrentState.validations[_validationName].events['change']\r\n\t\t\t\t\t\t\t\t.isActive\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tcurrentState.utils.setFieldValue(\r\n\t\t\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\t\t\tcurrentState.validations[_validationName].handler(\r\n\t\t\t\t\t\t\t\t\t\ttypeof valueOrUpdater === 'function'\r\n\t\t\t\t\t\t\t\t\t\t\t? valueOrUpdater(field.value)\r\n\t\t\t\t\t\t\t\t\t\t\t: field.valueFromFieldToStore\r\n\t\t\t\t\t\t\t\t\t\t\t? field.valueFromFieldToStore(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalueOrUpdater as Parameters<\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tNonNullable<(typeof field)['valueFromFieldToStore']>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t>[0],\r\n\t\t\t\t\t\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t\t\t\t\t\t: valueOrUpdater,\r\n\t\t\t\t\t\t\t\t\t\t'change',\r\n\t\t\t\t\t\t\t\t\t) as Parameters<\r\n\t\t\t\t\t\t\t\t\t\t(typeof currentState)['utils']['setFieldValue']\r\n\t\t\t\t\t\t\t\t\t>[1],\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tcurrentState.utils.setFieldErrors({\r\n\t\t\t\t\t\t\t\t\tname: _validationName,\r\n\t\t\t\t\t\t\t\t\terror: null,\r\n\t\t\t\t\t\t\t\t\tvalidationEvent: 'change',\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\t\tcurrentState.utils.setFieldErrors({\r\n\t\t\t\t\t\t\t\t\tname: _validationName,\r\n\t\t\t\t\t\t\t\t\terror: currentState.utils.errorFormatter(error, 'change'),\r\n\t\t\t\t\t\t\t\t\tvalidationEvent: 'change',\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurrentState.utils.setFieldValue(\r\n\t\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\t\ttypeof valueOrUpdater === 'function'\r\n\t\t\t\t\t\t\t\t\t? valueOrUpdater(field.value)\r\n\t\t\t\t\t\t\t\t\t: field.valueFromFieldToStore\r\n\t\t\t\t\t\t\t\t\t? field.valueFromFieldToStore(\r\n\t\t\t\t\t\t\t\t\t\t\tvalueOrUpdater as Parameters<\r\n\t\t\t\t\t\t\t\t\t\t\t\tNonNullable<(typeof field)['valueFromFieldToStore']>\r\n\t\t\t\t\t\t\t\t\t\t\t>[0],\r\n\t\t\t\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t\t\t\t: valueOrUpdater,\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t...currentState,\r\n\t\t\t\t\t\t\tfields: {\r\n\t\t\t\t\t\t\t\t...currentState.fields,\r\n\t\t\t\t\t\t\t\t[name]: field,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t};\r\n\t};\r\n}\r\n\r\nexport const handlePreSubmit = function <FieldsValues, ValidationsHandlers>(\r\n\tstoreGetter: () => FormStoreShape<FieldsValues, ValidationsHandlers>,\r\n\tcb: THandlePreSubmitCB<FieldsValues, ValidationsHandlers>,\r\n) {\r\n\treturn async function (\r\n\t\tevent: FormEvent<HTMLFormElement>,\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t// @ts-ignore\r\n\t): Promise<unknown> | unknown {\r\n\t\tevent.preventDefault();\r\n\t\t// if (!cb) return;\r\n\t\tconst currentStore = storeGetter();\r\n\r\n\t\tcurrentStore.utils.setIsSubmitting(true);\r\n\r\n\t\tconst metadata = currentStore.metadata;\r\n\t\tconst fields = currentStore.fields;\r\n\t\tconst validations = currentStore.validations;\r\n\t\tconst values: Record<string, unknown> = {}; // as Fields;\r\n\t\tconst validatedValues: Record<string, unknown> = {};\r\n\r\n\t\tconst errors: Record<\r\n\t\t\tstring,\r\n\t\t\t{\r\n\t\t\t\tname: string | number | symbol;\r\n\t\t\t\terror: string | null;\r\n\t\t\t\tvalidationEvent: ValidationEvents;\r\n\t\t\t}\r\n\t\t> = {};\r\n\r\n\t\tlet hasError = false;\r\n\r\n\t\t// let formFieldName: keyof typeof fields & string;\r\n\t\t// for (formFieldName in fields) {\r\n\t\t// \tvalues[formFieldName] = fields[formFieldName].value;\r\n\t\t// }\r\n\t\tlet fieldName: keyof typeof fields & string; // (typeof metadata)['referencedValidatedFieldsMap'];\r\n\t\tfor (fieldName in fields) {\r\n\t\t\tvalues[fieldName] = fields[fieldName].value;\r\n\t\t\ttry {\r\n\t\t\t\tconst validationSchema =\r\n\t\t\t\t\tfieldName in metadata.referencedValidatedFieldsMap &&\r\n\t\t\t\t\tvalidations[fieldName as unknown as keyof typeof validations].handler;\r\n\t\t\t\tif (\r\n\t\t\t\t\tvalidations[fieldName as unknown as keyof typeof validations].events\r\n\t\t\t\t\t\t.submit.isActive &&\r\n\t\t\t\t\ttypeof validationSchema === 'function'\r\n\t\t\t\t) {\r\n\t\t\t\t\tvalidatedValues[fieldName] = validationSchema(\r\n\t\t\t\t\t\tfields[fieldName].value,\r\n\t\t\t\t\t\t'submit',\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\terrors[fieldName] = {\r\n\t\t\t\t\tname: fieldName,\r\n\t\t\t\t\terror: null,\r\n\t\t\t\t\tvalidationEvent: 'submit',\r\n\t\t\t\t};\r\n\t\t\t} catch (error) {\r\n\t\t\t\terrors[fieldName] = {\r\n\t\t\t\t\tname: fieldName,\r\n\t\t\t\t\terror: currentStore.utils.errorFormatter(error, 'submit'),\r\n\t\t\t\t\tvalidationEvent: 'submit',\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// hasError = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet manualFieldName: keyof (typeof metadata)['manualValidatedFieldsMap'];\r\n\t\tfor (manualFieldName of metadata.manualValidatedFields) {\r\n\t\t\ttry {\r\n\t\t\t\tconst validationSchema =\r\n\t\t\t\t\tcurrentStore.validations[manualFieldName].handler;\r\n\t\t\t\tif (typeof validationSchema === 'function') {\r\n\t\t\t\t\tvalidatedValues[manualFieldName as string] = validationSchema(\r\n\t\t\t\t\t\tvalues as FieldsValues,\r\n\t\t\t\t\t\t'submit',\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\terrors[manualFieldName as string] = {\r\n\t\t\t\t\tname: manualFieldName,\r\n\t\t\t\t\terror: null,\r\n\t\t\t\t\tvalidationEvent: 'submit',\r\n\t\t\t\t};\r\n\t\t\t} catch (error) {\r\n\t\t\t\terrors[manualFieldName as string] = {\r\n\t\t\t\t\tname: manualFieldName,\r\n\t\t\t\t\terror: currentStore.utils.errorFormatter(error, 'submit'),\r\n\t\t\t\t\tvalidationEvent: 'submit',\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// hasError = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttype NecessaryEvil = {\r\n\t\t\tvalues: FieldsValues;\r\n\t\t\tvalidatedValues: GetFromFormStoreShape<\r\n\t\t\t\tReturnType<typeof storeGetter>,\r\n\t\t\t\t'validatedValues'\r\n\t\t\t>;\r\n\t\t\terrors: {\r\n\t\t\t\t[Key in keyof (typeof metadata)['validatedFieldsNamesMap']]: {\r\n\t\t\t\t\tname: Key;\r\n\t\t\t\t\terror: string | null;\r\n\t\t\t\t\tvalidationEvent: ValidationEvents;\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tlet errorKey: keyof typeof errors & string;\r\n\t\tfor (errorKey in errors) {\r\n\t\t\tconst errorObj = errors[errorKey]; // as NecessaryEvil['errors'][keyof NecessaryEvil['errors']];\r\n\r\n\t\t\tcurrentStore.utils.setFieldErrors(\r\n\t\t\t\terrors[\r\n\t\t\t\t\terrorKey\r\n\t\t\t\t] as unknown as NecessaryEvil['errors'][keyof NecessaryEvil['errors']],\r\n\t\t\t);\r\n\r\n\t\t\tif (typeof errorObj.error !== 'string') continue;\r\n\r\n\t\t\thasError = true;\r\n\t\t\t// currentStore.utils.setFieldErrors(\r\n\t\t\t// \terrors[errorKey], //  as NecessaryEvil['errors'][keyof NecessaryEvil['errors']],\r\n\t\t\t// );\r\n\t\t}\r\n\r\n\t\tcurrentStore.utils.setIsSubmitting(false);\r\n\r\n\t\tif (hasError) return;\r\n\r\n\t\tawait cb({\r\n\t\t\tevent,\r\n\t\t\tvalues: values as NecessaryEvil['values'],\r\n\t\t\tvalidatedValues: validatedValues as NecessaryEvil['validatedValues'],\r\n\t\t\thasError,\r\n\t\t\terrors: errors as NecessaryEvil['errors'],\r\n\t\t});\r\n\t};\r\n};\r\n"],"mappings":"2CAmBA,SAASA,EACRC,EACAC,EACC,CAED,GAAI,CAACD,EAAO,YAAc,OAAOA,EAAO,YAAe,SACtD,MAAM,IAAI,MAAM,EAAE,EAEnB,IAAME,EAAW,CAChB,OAAAD,EACA,OAAQ,GAAGA,SACX,YAAa,CAAC,EACd,eAAgB,CAAC,EAEjB,qBAAsB,CAAC,EACvB,wBAAyB,CAAC,EAE1B,sBAAuB,CAAC,EACxB,yBAA0B,CAAC,EAE3B,0BAA2B,CAAC,EAC5B,6BAA8B,CAAC,CAChC,EAEAC,EAAS,YAAc,OAAO,KAC7BF,EAAO,UACR,EACA,QAAWG,KAAaD,EAAS,YAChCA,EAAS,eAAeC,CAAS,EAAI,GAEtC,QAAWC,KAAOJ,EAAO,kBAAmB,CAI3C,GAHAE,EAAS,qBAAqB,KAAKE,CAAG,EACtCF,EAAS,wBAAwBE,CAAG,EAAI,GAEpCA,KAAOF,EAAS,eAAgB,CACnCA,EAAS,0BAA0B,KAClCE,CACD,EACAF,EAAS,6BACRE,CACD,EAAI,GACJ,SAGDF,EAAS,sBAAsB,KAC9BE,CACD,EACCF,EAAS,yBACTE,CACD,EAAI,GAGL,OAAOF,CACR,CAEA,SAASG,EACRL,EACAE,EACC,CAGD,IAAII,EAAqE,CACxE,OAAQ,EACT,EACIC,EAAiC,GACjCC,EAEEC,EAAwC,CAAC,EAC/C,QAAWN,KAAaD,EAAS,qBAAsB,CACtD,IAAMQ,EACLV,EAAO,oBACNG,CAED,EAwCD,GAtCAM,EAAYN,CAAS,EAAI,CACxB,QAAUO,EAEPC,EAAeD,CAAuB,EACrCE,GAAmBF,EAAwB,MAAME,CAAK,EACvDF,EAHA,OAIH,eAAgB,EAChB,eAAgB,EAChB,OAAQ,CAGP,OAAQ,CACP,eAAgB,EAChB,eAAgB,EAChB,SAAU,GACV,QAAS,GACT,QAAS,IACV,EACA,OAAQ,CACP,eAAgB,EAChB,eAAgB,EAChB,SAAU,GACV,QAAS,GACT,QAAS,IACV,CACD,EACA,QAAS,GACT,SAAU,CAAE,KAAMP,CAAU,CAC7B,EAEIH,EAAO,mBACVO,EAAiC,GACjCD,EAAwB,CACvB,GAAGA,EACH,GAAGN,EAAO,gBACX,GAGGO,EACH,IAAKC,KAA2BF,EAC/BG,EAAYN,CAAS,EAAE,OAAOK,CAAuB,EAAE,SACtD,CAAC,CAAC,OAAOF,EAAsBE,CAAuB,EAK1D,OAAOC,CACR,CAEA,SAASI,EACRb,EACAC,EACAC,EACC,CAGD,IAAMY,EAAS,CAAC,EAChB,QAAWX,KAAaD,EAAS,YAChCY,EAAOX,CAAS,EAAI,CACnB,MAAOH,EAAO,WAAWG,CAAS,EAClC,uBAAwBH,EAAO,6BAC/B,sBAAuBA,EAAO,0BAA0BG,CAAS,EAC9DH,EAAO,wBAAwBG,CAAS,EACxC,OACH,sBAAuBH,EAAO,0BAA0BG,CAAS,EAC9DH,EAAO,wBAAwBG,CAAS,EACxC,OACH,OAAQ,KACR,QAAS,GACT,GAAI,GAAGF,UAAe,OAAOE,CAAS,IACtC,SAAU,CACT,KAAMA,EACN,aAAcW,EAAOX,CAAS,EAAE,KACjC,CACD,EAGD,OAAOW,CACR,CAEA,IAAMC,EAAuB,CAC5B,OAAQ,GACR,YAAa,GACb,cAAe,EAChB,EAUO,SAASC,EACfhB,EACC,CAGD,IAAMC,EAASD,EAAO,OAAS,GAAGA,EAAO,UAAY,GAC/CE,EAAWH,EAAwBC,EAAQC,CAAM,EACjDa,EAASD,EAAsBb,EAAQC,EAAQC,CAAQ,EACvDO,EAAcJ,EAA2BL,EAAQE,CAAQ,EAE/D,OACCe,IAEO,CACN,OAAAhB,EACA,SAAAC,EACA,YAAAO,EACA,OAAAK,EACA,GAAI,GAAGb,SACP,QAAS,GACT,aAAc,GACd,cAAe,EACf,qBAAsB,EACtB,MAAO,CACN,gBAAgBiB,EAAgB,CAC/BD,EAAI,SAAUE,EAAc,CAC3B,MAAO,CACN,GAAGA,EACH,aACC,OAAOD,GAAmB,WACvBA,EAAeC,EAAa,YAAY,EACxCD,CACL,CACD,CAAC,CACF,EACA,eAAgB,SAAUE,EAAeL,EAAsB,CAC9D,OAAOE,EAAI,SAAUI,EAAc,CAClC,IAAMP,EAASO,EAAa,OACtBZ,EAAcY,EAAa,YAC7BC,EAAUD,EAAa,QACvBE,EAAgBF,EAAa,cAEjC,GAAID,EAAa,OAChB,QAAWhB,KAAOU,EACjBA,EAAOV,CAAG,EAAE,MAAQU,EAAOV,CAAG,EAAE,SAAS,aAI3C,GAAIgB,EAAa,YAAa,CAC7B,QAAWhB,KAAOK,EAAa,CAC9BA,EAAYL,CAAG,EAAE,eAAiB,EAClCK,EAAYL,CAAG,EAAE,eAAiB,EAClCK,EAAYL,CAAG,EAAE,QAAU,GAE3B,IAAIoB,EACJ,IAAKA,KAAYf,EAAYL,CAAG,EAAE,OAEjCK,EAAYL,CAAG,EAAE,OAAOoB,CAAQ,EAAE,eAAiB,EACnDf,EAAYL,CAAG,EAAE,OAAOoB,CAAQ,EAAE,eAAiB,EACnDf,EAAYL,CAAG,EAAE,OAAOoB,CAAQ,EAAE,QAAU,GAC5Cf,EAAYL,CAAG,EAAE,OAAOoB,CAAQ,EAAE,QAAU,KAG9CF,EAAU,GAEX,OAAIF,EAAa,gBAChBG,EAAgB,GAGV,CACN,GAAGF,EACH,OAAAP,EACA,YAAAL,EACA,QAAAa,EACA,cAAAC,CACD,CACD,CAAC,CACF,EAOA,cAAcE,EAAMb,EAAO,CAC1B,OAAOK,EAAI,SAAUI,EAAc,CAClC,MAAO,CACN,OAAQ,CACP,GAAGA,EAAa,OAChB,CAACI,CAAI,EAAG,CACP,GAAGJ,EAAa,OAAOI,CAAI,EAC3B,MACC,OAAOb,GAAU,WACbA,EACDS,EAAa,OAAOI,CAAI,EAAE,KAC1B,EACAb,CACL,CACD,CACD,CACD,CAAC,CACF,EACA,eAAeZ,EAAQ,CACtBiB,EAAI,SAAUI,EAAc,CAC3B,GACC,CAACA,EAAa,YAAYrB,EAAO,IAAI,EAAE,OACtCA,EAAO,eACR,EAAE,SAEF,OAAOqB,EAER,IAAIK,EAAuBL,EAAa,qBAClCM,EAAaN,EAAa,YAAYrB,EAAO,IAAI,EAEjDsB,EAAU,CAAC,CAACtB,EAAO,MACzB,OAAIsB,GACHK,EAAW,iBACXA,EAAW,uBACXD,IAEAC,EAAW,OAAO3B,EAAO,eAAe,EAAE,QAAUA,EAAO,MAC3D2B,EAAW,OAAO3B,EAAO,eAAe,EAAE,QAAUsB,EACpDK,EAAW,OAAO3B,EAAO,eAAe,EAAE,mBAE1C2B,EAAW,iBACXA,EAAW,uBACXD,IAEAC,EAAW,OAAO3B,EAAO,eAAe,EAAE,QAAUA,EAAO,MAC3D2B,EAAW,OAAO3B,EAAO,eAAe,EAAE,QAAUsB,EACpDK,EAAW,OAAO3B,EAAO,eAAe,EAAE,kBAE3C2B,EAAW,QAAUA,EAAW,uBAAyB,EAElD,CACN,GAAGN,EACH,qBAAAK,EACA,QAASA,IAAyB,EAClC,WAAAC,CACD,CACD,CAAC,CACF,EACA,eAAgB3B,EAAO,gBAAkB4B,EACzC,oBAAoBH,EAAMP,EAAgBW,EAAgB,CACzDZ,EAAI,SAAUI,EAAc,CAE3B,IAAMS,EAAQT,EAAa,OAAOI,CAAI,EAEhCM,EACLF,IAICR,EAAa,SAAS,6BAGpBI,CACA,EACAA,EACA,QAEJ,GACCM,GACAV,EAAa,YAAYU,CAAe,EAAE,OAAO,OAC/C,SAEF,GAAI,CACHV,EAAa,MAAM,cAClBI,EACAJ,EAAa,YAAYU,CAAe,EAAE,QACzC,OAAOb,GAAmB,WACvBA,EAAeY,EAAM,KAAK,EAC1BA,EAAM,sBACNA,EAAM,sBACNZ,CAGA,EACAA,EACH,QACD,CAGD,EACAG,EAAa,MAAM,eAAe,CACjC,KAAMU,EACN,MAAO,KACP,gBAAiB,QAClB,CAAC,CACF,OAASC,EAAP,CACDX,EAAa,MAAM,eAAe,CACjC,KAAMU,EACN,MAAOV,EAAa,MAAM,eAAeW,EAAO,QAAQ,EACxD,gBAAiB,QAClB,CAAC,CACF,MAEAX,EAAa,MAAM,cAClBI,EACA,OAAOP,GAAmB,WACvBA,EAAeY,EAAM,KAAK,EAC1BA,EAAM,sBACNA,EAAM,sBACNZ,CAGA,EACAA,CACJ,EAGD,MAAO,CACN,GAAGG,EACH,OAAQ,CACP,GAAGA,EAAa,OAChB,CAACI,CAAI,EAAGK,CACT,CACD,CACD,CAAC,CACF,CACD,CACD,EAEF,CAEO,IAAMG,EAAkB,SAC9BC,EACAC,EACC,CACD,OAAO,eACNC,EAG6B,CAC7BA,EAAM,eAAe,EAErB,IAAMjB,EAAee,EAAY,EAEjCf,EAAa,MAAM,gBAAgB,EAAI,EAEvC,IAAMjB,EAAWiB,EAAa,SACxBL,EAASK,EAAa,OACtBV,EAAcU,EAAa,YAC3BkB,EAAkC,CAAC,EACnCC,EAA2C,CAAC,EAE5CC,EAOF,CAAC,EAEDC,EAAW,GAMXrC,EACJ,IAAKA,KAAaW,EAAQ,CACzBuB,EAAOlC,CAAS,EAAIW,EAAOX,CAAS,EAAE,MACtC,GAAI,CACH,IAAMsC,EACLtC,KAAaD,EAAS,8BACtBO,EAAYN,CAAgD,EAAE,QAE9DM,EAAYN,CAAgD,EAAE,OAC5D,OAAO,UACT,OAAOsC,GAAqB,aAE5BH,EAAgBnC,CAAS,EAAIsC,EAC5B3B,EAAOX,CAAS,EAAE,MAClB,QACD,GAGDoC,EAAOpC,CAAS,EAAI,CACnB,KAAMA,EACN,MAAO,KACP,gBAAiB,QAClB,CACD,OAAS6B,EAAP,CACDO,EAAOpC,CAAS,EAAI,CACnB,KAAMA,EACN,MAAOgB,EAAa,MAAM,eAAea,EAAO,QAAQ,EACxD,gBAAiB,QAClB,CAGD,EAGD,IAAIU,EACJ,IAAKA,KAAmBxC,EAAS,sBAChC,GAAI,CACH,IAAMuC,EACLtB,EAAa,YAAYuB,CAAe,EAAE,QACvC,OAAOD,GAAqB,aAC/BH,EAAgBI,CAAyB,EAAID,EAC5CJ,EACA,QACD,GAGDE,EAAOG,CAAyB,EAAI,CACnC,KAAMA,EACN,MAAO,KACP,gBAAiB,QAClB,CACD,OAASV,EAAP,CACDO,EAAOG,CAAyB,EAAI,CACnC,KAAMA,EACN,MAAOvB,EAAa,MAAM,eAAea,EAAO,QAAQ,EACxD,gBAAiB,QAClB,CAGD,CAkBD,IAAIW,EACJ,IAAKA,KAAYJ,EAAQ,CACxB,IAAMK,EAAWL,EAAOI,CAAQ,EAEhCxB,EAAa,MAAM,eAClBoB,EACCI,CACD,CACD,EAEI,OAAOC,EAAS,OAAU,WAE9BJ,EAAW,IAMZrB,EAAa,MAAM,gBAAgB,EAAK,EAEpC,CAAAqB,GAEJ,MAAML,EAAG,CACR,MAAAC,EACA,OAAQC,EACR,gBAAiBC,EACjB,SAAAE,EACA,OAAQD,CACT,CAAC,CACF,CACD","names":["createFormStoreMetadata","params","baseId","metadata","fieldName","key","createFormStoreValidations","fieldValidationEvents","isFieldHavingPassedValidations","fieldValidationEventKey","validations","fieldValidationsHandler","isZodValidator","value","createFormStoreFields","fields","itemsToResetDefaults","CreateFormStoreBuilder","set","valueOrUpdater","currentStore","itemsToReset","currentState","isDirty","submitCounter","eventKey","name","currentErrorsCounter","validation","errorFormatter","validationName","field","_validationName","error","handlePreSubmit","storeGetter","cb","event","values","validatedValues","errors","hasError","validationSchema","manualFieldName","errorKey","errorObj"]}