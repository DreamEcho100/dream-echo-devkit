{"version":3,"sources":["../src/utils/index.ts","../src/components/TableLoadMore.tsx","../src/utils/internal.ts","../src/components/Table/Query.tsx","../src/components/Table/Basic.tsx"],"sourcesContent":["import { createStore } from 'zustand';\r\n\r\nimport type {\r\n\tTableStore,\r\n\tHandleCreateTableStoreProps,\r\n\tQueryInput,\r\n} from './types';\r\nimport { useRef, useId, useMemo } from 'react';\r\n\r\nexport const handleCreateTableStore = <TData, TQueryInput extends QueryInput>({\r\n\tclassNames = {},\r\n\tpageViewMode = 'PAGING',\r\n\tcanMultiRowSelect = false,\r\n\ttableAutoToFixedOnLoad = false,\r\n\tcolumnVisibility = {},\r\n\tbaseId = '',\r\n\tqueryInput,\r\n}: HandleCreateTableStoreProps<TQueryInput>) =>\r\n\tcreateStore<TableStore<TData, TQueryInput>>((set) => ({\r\n\t\ttable: null,\r\n\t\tbaseId,\r\n\r\n\t\tqueryInput,\r\n\t\tclassNames,\r\n\t\tpageViewMode,\r\n\t\tcanMultiRowSelect,\r\n\t\ttableAutoToFixedOnLoad,\r\n\r\n\t\tcolumnFilters: [],\r\n\t\trowSelection: {},\r\n\t\tcolumnVisibility,\r\n\t\tsorting: [],\r\n\r\n\t\tutils: {\r\n\t\t\tsetPagination: (updaterOrValue) =>\r\n\t\t\t\tset((prevData) => {\r\n\t\t\t\t\tconst pagination =\r\n\t\t\t\t\t\ttypeof updaterOrValue === 'function'\r\n\t\t\t\t\t\t\t? updaterOrValue({\r\n\t\t\t\t\t\t\t\t\tpageIndex: prevData.queryInput.offset || 0,\r\n\t\t\t\t\t\t\t\t\tpageSize: prevData.queryInput.limit || 0,\r\n\t\t\t\t\t\t\t  })\r\n\t\t\t\t\t\t\t: {\r\n\t\t\t\t\t\t\t\t\tpageIndex:\r\n\t\t\t\t\t\t\t\t\t\tupdaterOrValue.pageIndex || prevData.queryInput.offset,\r\n\t\t\t\t\t\t\t\t\tpageSize:\r\n\t\t\t\t\t\t\t\t\t\tupdaterOrValue.pageSize || prevData.queryInput.limit,\r\n\t\t\t\t\t\t\t  };\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tqueryInput: {\r\n\t\t\t\t\t\t\t...prevData.queryInput,\r\n\t\t\t\t\t\t\tlimit: pagination.pageSize,\r\n\t\t\t\t\t\t\toffset: pagination.pageIndex,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\t\t\t\t}),\r\n\t\t\tsetQueryInput: (updaterOrValue) =>\r\n\t\t\t\tset((prevData) => ({\r\n\t\t\t\t\tqueryInput:\r\n\t\t\t\t\t\ttypeof updaterOrValue === 'function'\r\n\t\t\t\t\t\t\t? updaterOrValue(prevData.queryInput)\r\n\t\t\t\t\t\t\t: updaterOrValue,\r\n\t\t\t\t})),\r\n\r\n\t\t\tsetRowSelection: (updaterOrValue) =>\r\n\t\t\t\tset((prevData) => ({\r\n\t\t\t\t\trowSelection:\r\n\t\t\t\t\t\ttypeof updaterOrValue === 'function'\r\n\t\t\t\t\t\t\t? updaterOrValue(prevData.rowSelection)\r\n\t\t\t\t\t\t\t: updaterOrValue,\r\n\t\t\t\t})),\r\n\t\t\tsetColumnFilters: (updaterOrValue) =>\r\n\t\t\t\tset((prevData) => ({\r\n\t\t\t\t\tcolumnFilters:\r\n\t\t\t\t\t\ttypeof updaterOrValue === 'function'\r\n\t\t\t\t\t\t\t? updaterOrValue(prevData.columnFilters)\r\n\t\t\t\t\t\t\t: updaterOrValue,\r\n\t\t\t\t})),\r\n\t\t\tsetColumnVisibility: (updaterOrValue) =>\r\n\t\t\t\tset((prevData) => ({\r\n\t\t\t\t\tcolumnVisibility:\r\n\t\t\t\t\t\ttypeof updaterOrValue === 'function'\r\n\t\t\t\t\t\t\t? updaterOrValue(prevData.columnVisibility)\r\n\t\t\t\t\t\t\t: updaterOrValue,\r\n\t\t\t\t})),\r\n\t\t\tsetSorting: (updaterOrValue) =>\r\n\t\t\t\tset((prevData) => ({\r\n\t\t\t\t\tsorting:\r\n\t\t\t\t\t\ttypeof updaterOrValue === 'function'\r\n\t\t\t\t\t\t\t? updaterOrValue(prevData.sorting)\r\n\t\t\t\t\t\t\t: updaterOrValue,\r\n\t\t\t\t})),\r\n\t\t},\r\n\t}));\r\n\r\nexport const useCreateTableStore = <TData, TQueryInput extends QueryInput>(\r\n\tprops: Omit<HandleCreateTableStoreProps<TQueryInput>, 'baseId'> & {\r\n\t\tbaseId?: HandleCreateTableStoreProps<TQueryInput>['baseId'];\r\n\t},\r\n) => {\r\n\tconst baseId = useId();\r\n\r\n\tconst storeRef = useRef(\r\n\t\thandleCreateTableStore<TData, TQueryInput>({\r\n\t\t\t...props,\r\n\t\t\tbaseId: props.baseId || baseId,\r\n\t\t}),\r\n\t);\r\n\r\n\tuseMemo(() => {\r\n\t\tif (\r\n\t\t\tstoreRef.current.getState().queryInput.limit !== props.queryInput.limit ||\r\n\t\t\tstoreRef.current.getState().baseId !== props.baseId\r\n\t\t)\r\n\t\t\tstoreRef.current.setState(() => ({\r\n\t\t\t\tlimit: props.queryInput.limit,\r\n\t\t\t\tbaseId: props.baseId,\r\n\t\t\t}));\r\n\t}, [props.baseId, props.queryInput.limit]);\r\n\r\n\treturn storeRef.current;\r\n};\r\n","import { useMemo } from 'react';\r\nimport { type StoreApi, useStore } from 'zustand';\r\nimport type { InfiniteQuery, QueryInput, TableStore } from '../utils/types';\r\nimport { cx } from '../utils/internal';\r\n\r\nconst TableLoadMore = <\r\n\tTData,\r\n\tTQueryInput extends QueryInput,\r\n\tTError = unknown,\r\n>({\r\n\tinfiniteQuery,\r\n\tstore,\r\n\tclassNames = {\r\n\t\tcontainer: '',\r\n\t\tloadMoreButton: '',\r\n\t},\r\n}: {\r\n\tinfiniteQuery: InfiniteQuery<TData, TError>;\r\n\tstore: StoreApi<TableStore<TData, TQueryInput>>;\r\n\tclassNames?: {\r\n\t\tcontainer: string;\r\n\t\tloadMoreButton: string;\r\n\t};\r\n}) => {\r\n\tconst offset = useStore(store, (state) => state.queryInput.offset || 0);\r\n\r\n\tconst storeUtils = useStore(store, (state) => state.utils);\r\n\r\n\tconst { isLastPageEmpty, isInBeforeLastPage } = useMemo(() => {\r\n\t\tconst isLastPageEmpty =\r\n\t\t\tinfiniteQuery?.data?.pages?.[infiniteQuery.data.pages.length - 1]?.items\r\n\t\t\t\t.length === 0;\r\n\r\n\t\tconst isInFirstPage = offset === 0;\r\n\t\tconst isInLastPage = offset + 1 === infiniteQuery?.data?.pages?.length;\r\n\t\tconst isInBeforeLastPage =\r\n\t\t\ttypeof infiniteQuery?.data?.pages?.length === 'number' &&\r\n\t\t\tinfiniteQuery.data.pages.length !== 0 &&\r\n\t\t\toffset + 1 === infiniteQuery.data.pages.length - 1;\r\n\r\n\t\tlet pagesLength = infiniteQuery?.data?.pages?.length || 0;\r\n\t\tif (isLastPageEmpty && pagesLength !== 0) pagesLength--;\r\n\t\treturn {\r\n\t\t\tisLastPageEmpty,\r\n\t\t\tisInBeforeLastPage,\r\n\t\t\tisInLastPage,\r\n\t\t\tisInFirstPage,\r\n\t\t\tpagesLength,\r\n\t\t};\r\n\t}, [offset, infiniteQuery?.data?.pages]);\r\n\r\n\tconst isLoadMoreButtonDisabled = useMemo(\r\n\t\t() =>\r\n\t\t\t(!infiniteQuery.hasNextPage &&\r\n\t\t\t\toffset + 1 === infiniteQuery.data?.pages.length) ||\r\n\t\t\tinfiniteQuery.isFetching ||\r\n\t\t\t(isInBeforeLastPage && isLastPageEmpty),\r\n\t\t[\r\n\t\t\toffset,\r\n\t\t\tinfiniteQuery.data?.pages.length,\r\n\t\t\tinfiniteQuery.hasNextPage,\r\n\t\t\tinfiniteQuery.isFetching,\r\n\t\t\tisInBeforeLastPage,\r\n\t\t\tisLastPageEmpty,\r\n\t\t],\r\n\t);\r\n\r\n\tif (!infiniteQuery.hasNextPage) return <></>;\r\n\r\n\treturn (\r\n\t\t<div className={cx(classNames?.container)}>\r\n\t\t\t<button\r\n\t\t\t\ttitle={\r\n\t\t\t\t\tisLoadMoreButtonDisabled ? 'There is no more next page' : 'Next page'\r\n\t\t\t\t}\r\n\t\t\t\tdisabled={isLoadMoreButtonDisabled}\r\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n\t\t\t\tonClick={async () => {\r\n\t\t\t\t\tif (isLoadMoreButtonDisabled) return;\r\n\r\n\t\t\t\t\tawait infiniteQuery.fetchNextPage().then((res) => {\r\n\t\t\t\t\t\tif (res.data && Array.isArray(res.data?.pages)) {\r\n\t\t\t\t\t\t\tconst lastPage = res.data.pages[res.data.pages.length - 1];\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t!lastPage ||\r\n\t\t\t\t\t\t\t\t(isInBeforeLastPage && lastPage.items.length === 0)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tstoreUtils.setQueryInput((prev) => ({\r\n\t\t\t\t\t\t\t...prev,\r\n\t\t\t\t\t\t\toffset: (prev.offset || 0) + 1,\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t});\r\n\t\t\t\t}}\r\n\t\t\t\tclassName={cx(classNames?.loadMoreButton)}\r\n\t\t\t\t// eslint-disable-next-line react/no-children-prop\r\n\t\t\t\tchildren='load more'\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TableLoadMore;\r\n","import { useMemo } from 'react';\r\nimport { useStore } from 'zustand';\r\nimport {\r\n\ttype QueryInput,\r\n\ttype UseGetTableCurrentPageAndPaginationProps,\r\n} from './types';\r\n\r\nexport const cx = (...classesArr: (string | undefined)[]) => {\r\n\tlet classesStr = '';\r\n\tlet className: string | undefined;\r\n\tfor (className of classesArr) {\r\n\t\tif (typeof className === 'string') classesStr += className + ' ';\r\n\t}\r\n\r\n\treturn classesStr.trimEnd();\r\n};\r\n\r\nexport const useGetTableCurrentPageAndPagination = <\r\n\tTData,\r\n\tTQueryInput extends QueryInput,\r\n>(\r\n\tprops: UseGetTableCurrentPageAndPaginationProps<TData, TQueryInput>,\r\n) => {\r\n\tconst pageViewMode = useStore(props.store, (state) => state.pageViewMode);\r\n\tconst offset = useStore(props.store, (state) => state.queryInput.offset || 0);\r\n\tconst defaultPage = useMemo(() => [], []);\r\n\tconst currentPage = useMemo(() => {\r\n\t\tif (pageViewMode === 'INFINITE_SCROLL')\r\n\t\t\treturn (props.infiniteQuery?.data?.pages || defaultPage)\r\n\t\t\t\t.map((page) => page.items)\r\n\t\t\t\t.flat(1);\r\n\r\n\t\treturn props.infiniteQuery?.data?.pages?.[offset]?.items || defaultPage;\r\n\t}, [offset, props.infiniteQuery.data?.pages, pageViewMode, defaultPage]);\r\n\r\n\tconst pagination = useMemo(\r\n\t\t() => ({\r\n\t\t\toffset,\r\n\t\t\tlimit: props.infiniteQuery?.data?.pages.length || 0,\r\n\t\t}),\r\n\t\t[offset, props.infiniteQuery?.data?.pages.length],\r\n\t);\r\n\r\n\tconst res = useMemo(\r\n\t\t() => ({\r\n\t\t\tcurrentPage,\r\n\t\t\tpagination: {\r\n\t\t\t\tpageSize: pagination.limit,\r\n\t\t\t\tpageIndex: pagination.offset,\r\n\t\t\t},\r\n\t\t}),\r\n\t\t[currentPage, pagination.limit, pagination.offset],\r\n\t);\r\n\r\n\treturn res;\r\n};\r\n","import { useEffect, useMemo } from 'react';\r\nimport {\r\n\tflexRender,\r\n\tgetCoreRowModel,\r\n\tgetFilteredRowModel,\r\n\tgetPaginationRowModel,\r\n\tgetSortedRowModel,\r\n\tuseReactTable,\r\n} from '@tanstack/react-table';\r\nimport {\r\n\tIndeterminateCheckbox,\r\n\tTable,\r\n\tTableBody,\r\n\tTableCell,\r\n\tTableHead,\r\n\tTableHeader,\r\n\tTableRow,\r\n} from './Basic';\r\nimport { useStore } from 'zustand';\r\nimport {\r\n\ttype CustomTableHeaderProps,\r\n\ttype CustomTableBodyProps,\r\n\ttype DataTableProps,\r\n\ttype QueryInput,\r\n} from '../../utils/types';\r\nimport { useGetTableCurrentPageAndPagination } from '../../utils/internal';\r\n\r\nconst CustomTableHeader = <TData, TQueryInput extends QueryInput>({\r\n\ttable,\r\n\tstore,\r\n}: CustomTableHeaderProps<TData, TQueryInput>) => {\r\n\tconst classNames = useStore(store, (store) => store.classNames.thead);\r\n\r\n\treturn (\r\n\t\t<TableHeader className={classNames?._}>\r\n\t\t\t{table.getHeaderGroups().map((headerGroup) => (\r\n\t\t\t\t<TableRow key={headerGroup.id} className={classNames?.tr}>\r\n\t\t\t\t\t{headerGroup.headers.map((header) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<TableHead\r\n\t\t\t\t\t\t\t\tkey={header.id}\r\n\t\t\t\t\t\t\t\tdata-id={header.id}\r\n\t\t\t\t\t\t\t\tclassName={classNames?.th?._}\r\n\t\t\t\t\t\t\t\tdata-select-th={header.id === 'select' ? true : undefined}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{header.isPlaceholder\r\n\t\t\t\t\t\t\t\t\t? null\r\n\t\t\t\t\t\t\t\t\t: flexRender(\r\n\t\t\t\t\t\t\t\t\t\t\theader.column.columnDef.header,\r\n\t\t\t\t\t\t\t\t\t\t\theader.getContext(),\r\n\t\t\t\t\t\t\t\t\t  )}\r\n\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</TableRow>\r\n\t\t\t))}\r\n\t\t</TableHeader>\r\n\t);\r\n};\r\n\r\nconst CustomTableBody = <TData, TQueryInput extends QueryInput>({\r\n\ttable,\r\n\tcolumnsLength,\r\n\tstore,\r\n}: CustomTableBodyProps<TData, TQueryInput>) => {\r\n\tconst classNames = useStore(store, (store) => store.classNames.tbody);\r\n\r\n\treturn (\r\n\t\t<TableBody\r\n\t\t\tclassName={classNames?._}\r\n\t\t\tdata-state={table.getRowModel().rows?.length > 0 ? undefined : 'empty'}\r\n\t\t>\r\n\t\t\t{table.getRowModel().rows?.length > 0 ? (\r\n\t\t\t\ttable.getRowModel().rows.map((row) => (\r\n\t\t\t\t\t<TableRow\r\n\t\t\t\t\t\tkey={row.id}\r\n\t\t\t\t\t\tdata-state={row.getIsSelected() && 'selected'}\r\n\t\t\t\t\t\tclassName={classNames?.tr}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{row.getVisibleCells().map((cell) => (\r\n\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\tkey={cell.id}\r\n\t\t\t\t\t\t\t\tclassName={classNames?.td?._}\r\n\t\t\t\t\t\t\t\tdata-select-td={cell.column.id === 'select' ? true : undefined}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</TableRow>\r\n\t\t\t\t))\r\n\t\t\t) : (\r\n\t\t\t\t<TableRow data-state='empty'>\r\n\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\tcolSpan={columnsLength}\r\n\t\t\t\t\t\tdata-state='empty'\r\n\t\t\t\t\t\tclassName='h-24 text-center'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tNo results.\r\n\t\t\t\t\t</TableCell>\r\n\t\t\t\t</TableRow>\r\n\t\t\t)}\r\n\t\t</TableBody>\r\n\t);\r\n};\r\n\r\nconst QueryTable = <TData, TQueryInput extends QueryInput, TError = unknown>({\r\n\tcolumns,\r\n\tstore,\r\n\tinfiniteQuery,\r\n}: DataTableProps<TData, TQueryInput, TError>) => {\r\n\t//\r\n\tconst storeUtils = useStore(store, (store) => store.utils);\r\n\tconst canMultiRowSelect = useStore(store, (state) => state.canMultiRowSelect);\r\n\tconst modifiedColumns: typeof columns = useMemo(() => {\r\n\t\treturn [\r\n\t\t\t{\r\n\t\t\t\tid: 'select',\r\n\t\t\t\theader: ({ table }) => (\r\n\t\t\t\t\t<IndeterminateCheckbox\r\n\t\t\t\t\t\tchecked={table.getIsAllRowsSelected()}\r\n\t\t\t\t\t\tindeterminate={table.getIsSomeRowsSelected()}\r\n\t\t\t\t\t\tonChange={table.getToggleAllRowsSelectedHandler()}\r\n\t\t\t\t\t\ttContainerType='thead'\r\n\t\t\t\t\t\tstore={store}\r\n\t\t\t\t\t\t// className={cx(classNames.thead?.th?.checkboxContainer?.checkBox)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t),\r\n\t\t\t\tcell: ({ row }) => (\r\n\t\t\t\t\t<IndeterminateCheckbox\r\n\t\t\t\t\t\tchecked={row.getIsSelected()}\r\n\t\t\t\t\t\tindeterminate={row.getIsSomeSelected()}\r\n\t\t\t\t\t\tonChange={row.getToggleSelectedHandler()}\r\n\t\t\t\t\t\ttContainerType='tbody'\r\n\t\t\t\t\t\tstore={store}\r\n\t\t\t\t\t\t// className={cx(classNames.tbody?.td?.checkboxContainer?.checkBox)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t),\r\n\t\t\t\tenableSorting: false,\r\n\t\t\t\tenableHiding: canMultiRowSelect,\r\n\t\t\t},\r\n\t\t\t...columns,\r\n\t\t];\r\n\t}, [canMultiRowSelect, columns, store]);\r\n\r\n\t//\r\n\tconst sorting = useStore(store, (store) => store.sorting);\r\n\tconst columnFilters = useStore(store, (store) => store.columnFilters);\r\n\tconst columnVisibility = useStore(store, (store) => store.columnVisibility);\r\n\tconst rowSelection = useStore(store, (store) => store.rowSelection);\r\n\r\n\tconst currentPageAndPagination = useGetTableCurrentPageAndPagination({\r\n\t\tinfiniteQuery,\r\n\t\tstore,\r\n\t});\r\n\r\n\tconst table = useReactTable({\r\n\t\tdata: currentPageAndPagination.currentPage,\r\n\t\tcolumns: modifiedColumns,\r\n\t\tonSortingChange: storeUtils.setSorting,\r\n\t\tonColumnFiltersChange: storeUtils.setColumnFilters,\r\n\t\tgetCoreRowModel: getCoreRowModel(),\r\n\t\tgetPaginationRowModel: getPaginationRowModel(),\r\n\t\tgetSortedRowModel: getSortedRowModel(),\r\n\t\tgetFilteredRowModel: getFilteredRowModel(),\r\n\t\tonPaginationChange: storeUtils.setPagination,\r\n\t\tonColumnVisibilityChange: storeUtils.setColumnVisibility,\r\n\t\tonRowSelectionChange: storeUtils.setRowSelection,\r\n\t\tmanualPagination: true,\r\n\t\tmanualFiltering: true,\r\n\t\tmanualSorting: true,\r\n\t\tstate: {\r\n\t\t\tpagination: currentPageAndPagination.pagination,\r\n\t\t\tsorting,\r\n\t\t\tcolumnFilters,\r\n\t\t\tcolumnVisibility,\r\n\t\t\trowSelection,\r\n\t\t},\r\n\t});\r\n\r\n\tuseEffect(() => store.setState({ table }), [store, table]);\r\n\r\n\treturn (\r\n\t\t<Table store={store}>\r\n\t\t\t<CustomTableHeader table={table} store={store} />\r\n\t\t\t<CustomTableBody\r\n\t\t\t\ttable={table}\r\n\t\t\t\tcolumnsLength={columns.length}\r\n\t\t\t\tstore={store}\r\n\t\t\t/>\r\n\t\t</Table>\r\n\t);\r\n};\r\n\r\nexport default QueryTable;\r\n","import {\r\n\ttype HTMLAttributes,\r\n\ttype ThHTMLAttributes,\r\n\ttype TdHTMLAttributes,\r\n\ttype HTMLProps,\r\n\tuseEffect,\r\n\tuseRef,\r\n} from 'react';\r\nimport { useStore, type StoreApi } from 'zustand';\r\nimport { type QueryInput, type TableStore } from '../../utils/types';\r\n\r\nconst Table = <TData, TQueryInput extends QueryInput>({\r\n\tstore,\r\n\t...props\r\n}: HTMLAttributes<HTMLTableElement> & {\r\n\tstore: StoreApi<TableStore<TData, TQueryInput>>;\r\n}) => {\r\n\tconst className = useStore(store, (store) => store.classNames?.table);\r\n\r\n\treturn (\r\n\t\t<table\r\n\t\t\t// className={cx('w-full caption-bottom text-sm', className)}\r\n\t\t\t{...props}\r\n\t\t\tclassName={className}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\n// <div className='w-full overflow-auto'>\r\n// </div>\r\n\r\nconst TableHeader = (props: HTMLAttributes<HTMLTableSectionElement>) => (\r\n\t<thead\r\n\t\t// className={cx('[&_tr]:border-b', className)}\r\n\t\t{...props}\r\n\t/>\r\n);\r\n\r\nconst TableBody = (props: HTMLAttributes<HTMLTableSectionElement>) => (\r\n\t<tbody\r\n\t\t// className={cx('[&_tr:last-child]:border-0', className)}\r\n\t\t{...props}\r\n\t/>\r\n);\r\n\r\nconst TableFooter = (props: HTMLAttributes<HTMLTableSectionElement>) => (\r\n\t<tfoot\r\n\t\t// className={cx('bg-primary text-primary-foreground font-medium', className)}\r\n\t\t{...props}\r\n\t/>\r\n);\r\n\r\nconst TableRow = (props: HTMLAttributes<HTMLTableRowElement>) => (\r\n\t<tr\r\n\t\t// className={cx(\r\n\t\t// \t'hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors',\r\n\t\t// \tclassName,\r\n\t\t// )}\r\n\t\t{...props}\r\n\t/>\r\n);\r\n\r\nconst TableHead = (props: ThHTMLAttributes<HTMLTableCellElement>) => (\r\n\t<th\r\n\t\t// className={cx(\r\n\t\t// \t'text-muted-foreground h-12 px-4 text-left align-middle font-medium [&:has([role=checkbox])]:pr-0',\r\n\t\t// \tclassName,\r\n\t\t// )}\r\n\t\t{...props}\r\n\t/>\r\n);\r\n\r\nconst TableCell = (props: TdHTMLAttributes<HTMLTableCellElement>) => (\r\n\t<td {...props} />\r\n);\r\n\r\nconst IndeterminateCheckbox = <TData, TQueryInput extends QueryInput>({\r\n\tindeterminate,\r\n\tstore,\r\n\ttContainerType,\r\n\t...props\r\n}: {\r\n\tindeterminate?: boolean;\r\n\ttContainerType: 'thead' | 'tbody';\r\n\tstore: StoreApi<TableStore<TData, TQueryInput>>;\r\n} & HTMLProps<HTMLInputElement>) => {\r\n\tconst selectCheckBoxContainerClassName = useStore(store, (store) =>\r\n\t\ttContainerType === 'thead'\r\n\t\t\t? store.classNames?.thead?.th?.selectCheckBoxContainer\r\n\t\t\t: store.classNames?.tbody?.td?.selectCheckBoxContainer,\r\n\t);\r\n\tconst ref = useRef<HTMLInputElement>(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!ref.current) return;\r\n\r\n\t\tif (typeof indeterminate === 'boolean') {\r\n\t\t\tref.current.indeterminate = !props.checked && indeterminate;\r\n\t\t}\r\n\t}, [indeterminate, props.checked]);\r\n\r\n\treturn (\r\n\t\t<div className={selectCheckBoxContainerClassName?._}>\r\n\t\t\t<input\r\n\t\t\t\ttype='checkbox'\r\n\t\t\t\tref={ref}\r\n\t\t\t\tclassName={selectCheckBoxContainerClassName?.checkbox}\r\n\t\t\t\t{...props}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n// const TableCaption = forwardRef<\r\n// \tHTMLTableCaptionElement,\r\n// \tHTMLAttributes<HTMLTableCaptionElement>\r\n// >(({ className, ...props }, ref) => (\r\n// \t<caption\r\n// \t\tref={ref}\r\n// \t\tclassName={cx('text-muted-foreground mt-4 text-sm', className)}\r\n// \t\t{...props}\r\n// \t/>\r\n// ));\r\n// TableCaption.displayName = 'TableCaption';\r\n\r\nexport {\r\n\tTable,\r\n\tTableHeader,\r\n\tTableBody,\r\n\tTableFooter,\r\n\tTableHead,\r\n\tTableRow,\r\n\tTableCell,\r\n\tIndeterminateCheckbox,\r\n};\r\n"],"mappings":"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","names":["useMemo","useStore","useMemo","useStore","useMemo","isLastPageEmpty","isInBeforeLastPage","useEffect","useMemo","useRef","useStore","jsx","store","jsx","useStore","store","useRef","useStore","jsx","useStore","store","useMemo","table","useEffect"]}