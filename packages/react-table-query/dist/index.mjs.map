{"version":3,"sources":["../src/utils/index.ts","../src/components/TableLoadMore.tsx","../src/utils/internal.ts","../src/components/Table/Query.tsx","../src/components/Table/Basic.tsx"],"names":["createStore","useRef","useId","useMemo","handleCreateTableStore","classNames","pageViewMode","canMultiRowSelect","tableAutoToFixedOnLoad","columnVisibility","baseId","queryInput","set","updaterOrValue","prevData","pagination","useCreateTableStore","props","storeRef","useStore","cx","classesArr","classesStr","className","useGetTableCurrentPageAndPagination","state","offset","defaultPage","currentPage","page","Fragment","jsx","TableLoadMore","infiniteQuery","store","storeUtils","isLastPageEmpty","isInBeforeLastPage","isInFirstPage","isInLastPage","pagesLength","isLoadMoreButtonDisabled","res","lastPage","prev","TableLoadMore_default","useEffect","flexRender","getCoreRowModel","getFilteredRowModel","getPaginationRowModel","getSortedRowModel","useReactTable","Table","TableHeader","TableBody","TableRow","TableHead","TableCell","IndeterminateCheckbox","indeterminate","tContainerType","selectCheckBoxContainerClassName","ref","jsxs","CustomTableHeader","table","headerGroup","header","CustomTableBody","columnsLength","row","cell","QueryTable","columns","modifiedColumns","sorting","columnFilters","rowSelection","currentPageAndPagination","Query_default"],"mappings":"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","sourcesContent":["import { createStore } from 'zustand';\r\n\r\nimport type {\r\n\tTableStore,\r\n\tHandleCreateTableStoreProps,\r\n\tQueryInput,\r\n} from './types';\r\nimport { useRef, useId, useMemo } from 'react';\r\n\r\nexport const handleCreateTableStore = <TData, TQueryInput extends QueryInput>({\r\n\tclassNames = {},\r\n\tpageViewMode = 'PAGING',\r\n\tcanMultiRowSelect = false,\r\n\ttableAutoToFixedOnLoad = false,\r\n\tcolumnVisibility = {},\r\n\tbaseId = '',\r\n\tqueryInput,\r\n}: HandleCreateTableStoreProps<TQueryInput>) =>\r\n\tcreateStore<TableStore<TData, TQueryInput>>((set) => ({\r\n\t\ttable: null,\r\n\t\tbaseId,\r\n\r\n\t\tqueryInput,\r\n\t\tclassNames,\r\n\t\tpageViewMode,\r\n\t\tcanMultiRowSelect,\r\n\t\ttableAutoToFixedOnLoad,\r\n\r\n\t\tcolumnFilters: [],\r\n\t\trowSelection: {},\r\n\t\tcolumnVisibility,\r\n\t\tsorting: [],\r\n\r\n\t\tsetPagination: (updaterOrValue) =>\r\n\t\t\tset((prevData) => {\r\n\t\t\t\tconst pagination =\r\n\t\t\t\t\ttypeof updaterOrValue === 'function'\r\n\t\t\t\t\t\t? updaterOrValue({\r\n\t\t\t\t\t\t\t\tpageIndex: prevData.queryInput.offset || 0,\r\n\t\t\t\t\t\t\t\tpageSize: prevData.queryInput.limit || 0,\r\n\t\t\t\t\t\t  })\r\n\t\t\t\t\t\t: {\r\n\t\t\t\t\t\t\t\tpageIndex:\r\n\t\t\t\t\t\t\t\t\tupdaterOrValue.pageIndex || prevData.queryInput.offset,\r\n\t\t\t\t\t\t\t\tpageSize: updaterOrValue.pageSize || prevData.queryInput.limit,\r\n\t\t\t\t\t\t  };\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tqueryInput: {\r\n\t\t\t\t\t\t...prevData.queryInput,\r\n\t\t\t\t\t\tlimit: pagination.pageSize,\r\n\t\t\t\t\t\toffset: pagination.pageIndex,\r\n\t\t\t\t\t},\r\n\t\t\t\t};\r\n\t\t\t}),\r\n\t\tsetQueryInput: (updaterOrValue) =>\r\n\t\t\tset((prevData) => ({\r\n\t\t\t\tqueryInput:\r\n\t\t\t\t\ttypeof updaterOrValue === 'function'\r\n\t\t\t\t\t\t? updaterOrValue(prevData.queryInput)\r\n\t\t\t\t\t\t: updaterOrValue,\r\n\t\t\t})),\r\n\r\n\t\tsetRowSelection: (updaterOrValue) =>\r\n\t\t\tset((prevData) => ({\r\n\t\t\t\trowSelection:\r\n\t\t\t\t\ttypeof updaterOrValue === 'function'\r\n\t\t\t\t\t\t? updaterOrValue(prevData.rowSelection)\r\n\t\t\t\t\t\t: updaterOrValue,\r\n\t\t\t})),\r\n\t\tsetColumnFilters: (updaterOrValue) =>\r\n\t\t\tset((prevData) => ({\r\n\t\t\t\tcolumnFilters:\r\n\t\t\t\t\ttypeof updaterOrValue === 'function'\r\n\t\t\t\t\t\t? updaterOrValue(prevData.columnFilters)\r\n\t\t\t\t\t\t: updaterOrValue,\r\n\t\t\t})),\r\n\t\tsetColumnVisibility: (updaterOrValue) =>\r\n\t\t\tset((prevData) => ({\r\n\t\t\t\tcolumnVisibility:\r\n\t\t\t\t\ttypeof updaterOrValue === 'function'\r\n\t\t\t\t\t\t? updaterOrValue(prevData.columnVisibility)\r\n\t\t\t\t\t\t: updaterOrValue,\r\n\t\t\t})),\r\n\t\tsetSorting: (updaterOrValue) =>\r\n\t\t\tset((prevData) => ({\r\n\t\t\t\tsorting:\r\n\t\t\t\t\ttypeof updaterOrValue === 'function'\r\n\t\t\t\t\t\t? updaterOrValue(prevData.sorting)\r\n\t\t\t\t\t\t: updaterOrValue,\r\n\t\t\t})),\r\n\t}));\r\n\r\nexport const useCreateTableStore = <TData, TQueryInput extends QueryInput>(\r\n\tprops: Omit<HandleCreateTableStoreProps<TQueryInput>, 'baseId'> & {\r\n\t\tbaseId?: HandleCreateTableStoreProps<TQueryInput>['baseId'];\r\n\t},\r\n) => {\r\n\tconst baseId = useId();\r\n\r\n\tconst storeRef = useRef(\r\n\t\thandleCreateTableStore<TData, TQueryInput>({\r\n\t\t\t...props,\r\n\t\t\tbaseId: props.baseId || baseId,\r\n\t\t}),\r\n\t);\r\n\r\n\tuseMemo(() => {\r\n\t\tif (\r\n\t\t\tstoreRef.current.getState().queryInput.limit !== props.queryInput.limit ||\r\n\t\t\tstoreRef.current.getState().baseId !== props.baseId\r\n\t\t)\r\n\t\t\tstoreRef.current.setState(() => ({\r\n\t\t\t\tlimit: props.queryInput.limit,\r\n\t\t\t\tbaseId: props.baseId,\r\n\t\t\t}));\r\n\t}, [props.baseId, props.queryInput.limit]);\r\n\r\n\treturn storeRef.current;\r\n};\r\n","import { useMemo } from 'react';\r\nimport { type StoreApi, useStore } from 'zustand';\r\nimport type { InfiniteQuery, QueryInput, TableStore } from '../utils/types';\r\nimport { cx } from '../utils/internal';\r\n\r\nconst TableLoadMore = <\r\n\tTData,\r\n\tTQueryInput extends QueryInput,\r\n\tTError = unknown,\r\n>({\r\n\tinfiniteQuery,\r\n\tstore,\r\n\tclassNames = {\r\n\t\tcontainer: '',\r\n\t\tloadMoreButton: '',\r\n\t},\r\n}: {\r\n\tinfiniteQuery: InfiniteQuery<TData, TError>;\r\n\tstore: StoreApi<TableStore<TData, TQueryInput>>;\r\n\tclassNames?: {\r\n\t\tcontainer: string;\r\n\t\tloadMoreButton: string;\r\n\t};\r\n}) => {\r\n\tconst offset = useStore(store, (state) => state.queryInput.offset || 0);\r\n\r\n\tconst storeUtils = useStore(store, (state) => state);\r\n\r\n\tconst { isLastPageEmpty, isInBeforeLastPage } = useMemo(() => {\r\n\t\tconst isLastPageEmpty =\r\n\t\t\tinfiniteQuery?.data?.pages?.[infiniteQuery.data.pages.length - 1]?.items\r\n\t\t\t\t.length === 0;\r\n\r\n\t\tconst isInFirstPage = offset === 0;\r\n\t\tconst isInLastPage = offset + 1 === infiniteQuery?.data?.pages?.length;\r\n\t\tconst isInBeforeLastPage =\r\n\t\t\ttypeof infiniteQuery?.data?.pages?.length === 'number' &&\r\n\t\t\tinfiniteQuery.data.pages.length !== 0 &&\r\n\t\t\toffset + 1 === infiniteQuery.data.pages.length - 1;\r\n\r\n\t\tlet pagesLength = infiniteQuery?.data?.pages?.length || 0;\r\n\t\tif (isLastPageEmpty && pagesLength !== 0) pagesLength--;\r\n\t\treturn {\r\n\t\t\tisLastPageEmpty,\r\n\t\t\tisInBeforeLastPage,\r\n\t\t\tisInLastPage,\r\n\t\t\tisInFirstPage,\r\n\t\t\tpagesLength,\r\n\t\t};\r\n\t}, [offset, infiniteQuery?.data?.pages]);\r\n\r\n\tconst isLoadMoreButtonDisabled = useMemo(\r\n\t\t() =>\r\n\t\t\t(!infiniteQuery.hasNextPage &&\r\n\t\t\t\toffset + 1 === infiniteQuery.data?.pages.length) ||\r\n\t\t\tinfiniteQuery.isFetching ||\r\n\t\t\t(isInBeforeLastPage && isLastPageEmpty),\r\n\t\t[\r\n\t\t\toffset,\r\n\t\t\tinfiniteQuery.data?.pages.length,\r\n\t\t\tinfiniteQuery.hasNextPage,\r\n\t\t\tinfiniteQuery.isFetching,\r\n\t\t\tisInBeforeLastPage,\r\n\t\t\tisLastPageEmpty,\r\n\t\t],\r\n\t);\r\n\r\n\tif (!infiniteQuery.hasNextPage) return <></>;\r\n\r\n\treturn (\r\n\t\t<div className={cx(classNames?.container)}>\r\n\t\t\t<button\r\n\t\t\t\ttitle={\r\n\t\t\t\t\tisLoadMoreButtonDisabled ? 'There is no more next page' : 'Next page'\r\n\t\t\t\t}\r\n\t\t\t\tdisabled={isLoadMoreButtonDisabled}\r\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n\t\t\t\tonClick={async () => {\r\n\t\t\t\t\tif (isLoadMoreButtonDisabled) return;\r\n\r\n\t\t\t\t\tawait infiniteQuery.fetchNextPage().then((res) => {\r\n\t\t\t\t\t\tif (res.data && Array.isArray(res.data?.pages)) {\r\n\t\t\t\t\t\t\tconst lastPage = res.data.pages[res.data.pages.length - 1];\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t!lastPage ||\r\n\t\t\t\t\t\t\t\t(isInBeforeLastPage && lastPage.items.length === 0)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tstoreUtils.setQueryInput((prev) => ({\r\n\t\t\t\t\t\t\t...prev,\r\n\t\t\t\t\t\t\toffset: (prev.offset || 0) + 1,\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t});\r\n\t\t\t\t}}\r\n\t\t\t\tclassName={cx(classNames?.loadMoreButton)}\r\n\t\t\t\t// eslint-disable-next-line react/no-children-prop\r\n\t\t\t\tchildren='load more'\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TableLoadMore;\r\n","import { useMemo } from 'react';\r\nimport { useStore } from 'zustand';\r\nimport {\r\n\ttype QueryInput,\r\n\ttype UseGetTableCurrentPageAndPaginationProps,\r\n} from './types';\r\n\r\nexport const cx = (...classesArr: (string | undefined)[]) => {\r\n\tlet classesStr = '';\r\n\tlet className: string | undefined;\r\n\tfor (className of classesArr) {\r\n\t\tif (typeof className === 'string') classesStr += className + ' ';\r\n\t}\r\n\r\n\treturn classesStr.trimEnd();\r\n};\r\n\r\nexport const useGetTableCurrentPageAndPagination = <\r\n\tTData,\r\n\tTQueryInput extends QueryInput,\r\n>(\r\n\tprops: UseGetTableCurrentPageAndPaginationProps<TData, TQueryInput>,\r\n) => {\r\n\tconst pageViewMode = useStore(props.store, (state) => state.pageViewMode);\r\n\tconst offset = useStore(props.store, (state) => state.queryInput.offset || 0);\r\n\tconst defaultPage = useMemo(() => [], []);\r\n\tconst currentPage = useMemo(() => {\r\n\t\tif (pageViewMode === 'INFINITE_SCROLL')\r\n\t\t\treturn (props.infiniteQuery?.data?.pages || defaultPage)\r\n\t\t\t\t.map((page) => page.items)\r\n\t\t\t\t.flat(1);\r\n\r\n\t\treturn props.infiniteQuery?.data?.pages?.[offset]?.items || defaultPage;\r\n\t}, [offset, props.infiniteQuery.data?.pages, pageViewMode, defaultPage]);\r\n\r\n\tconst pagination = useMemo(\r\n\t\t() => ({\r\n\t\t\toffset,\r\n\t\t\tlimit: props.infiniteQuery?.data?.pages.length || 0,\r\n\t\t}),\r\n\t\t[offset, props.infiniteQuery?.data?.pages.length],\r\n\t);\r\n\r\n\tconst res = useMemo(\r\n\t\t() => ({\r\n\t\t\tcurrentPage,\r\n\t\t\tpagination: {\r\n\t\t\t\tpageSize: pagination.limit,\r\n\t\t\t\tpageIndex: pagination.offset,\r\n\t\t\t},\r\n\t\t}),\r\n\t\t[currentPage, pagination.limit, pagination.offset],\r\n\t);\r\n\r\n\treturn res;\r\n};\r\n","import { useEffect, useMemo } from 'react';\r\nimport {\r\n\tflexRender,\r\n\tgetCoreRowModel,\r\n\tgetFilteredRowModel,\r\n\tgetPaginationRowModel,\r\n\tgetSortedRowModel,\r\n\tuseReactTable,\r\n} from '@tanstack/react-table';\r\nimport {\r\n\tIndeterminateCheckbox,\r\n\tTable,\r\n\tTableBody,\r\n\tTableCell,\r\n\tTableHead,\r\n\tTableHeader,\r\n\tTableRow,\r\n} from './Basic';\r\nimport { useStore } from 'zustand';\r\nimport {\r\n\ttype CustomTableHeaderProps,\r\n\ttype CustomTableBodyProps,\r\n\ttype DataTableProps,\r\n\ttype QueryInput,\r\n} from '../../utils/types';\r\nimport { useGetTableCurrentPageAndPagination } from '../../utils/internal';\r\n\r\nconst CustomTableHeader = <TData, TQueryInput extends QueryInput>({\r\n\ttable,\r\n\tstore,\r\n}: CustomTableHeaderProps<TData, TQueryInput>) => {\r\n\tconst classNames = useStore(store, (store) => store.classNames.thead);\r\n\r\n\treturn (\r\n\t\t<TableHeader className={classNames?._}>\r\n\t\t\t{table.getHeaderGroups().map((headerGroup) => (\r\n\t\t\t\t<TableRow key={headerGroup.id} className={classNames?.tr}>\r\n\t\t\t\t\t{headerGroup.headers.map((header) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<TableHead\r\n\t\t\t\t\t\t\t\tkey={header.id}\r\n\t\t\t\t\t\t\t\tdata-id={header.id}\r\n\t\t\t\t\t\t\t\tclassName={classNames?.th?._}\r\n\t\t\t\t\t\t\t\tdata-select-th={header.id === 'select' ? true : undefined}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{header.isPlaceholder\r\n\t\t\t\t\t\t\t\t\t? null\r\n\t\t\t\t\t\t\t\t\t: flexRender(\r\n\t\t\t\t\t\t\t\t\t\t\theader.column.columnDef.header,\r\n\t\t\t\t\t\t\t\t\t\t\theader.getContext(),\r\n\t\t\t\t\t\t\t\t\t  )}\r\n\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</TableRow>\r\n\t\t\t))}\r\n\t\t</TableHeader>\r\n\t);\r\n};\r\n\r\nconst CustomTableBody = <TData, TQueryInput extends QueryInput>({\r\n\ttable,\r\n\tcolumnsLength,\r\n\tstore,\r\n}: CustomTableBodyProps<TData, TQueryInput>) => {\r\n\tconst classNames = useStore(store, (store) => store.classNames.tbody);\r\n\r\n\treturn (\r\n\t\t<TableBody\r\n\t\t\tclassName={classNames?._}\r\n\t\t\tdata-state={table.getRowModel().rows?.length > 0 ? undefined : 'empty'}\r\n\t\t>\r\n\t\t\t{table.getRowModel().rows?.length > 0 ? (\r\n\t\t\t\ttable.getRowModel().rows.map((row) => (\r\n\t\t\t\t\t<TableRow\r\n\t\t\t\t\t\tkey={row.id}\r\n\t\t\t\t\t\tdata-state={row.getIsSelected() && 'selected'}\r\n\t\t\t\t\t\tclassName={classNames?.tr}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{row.getVisibleCells().map((cell) => (\r\n\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\tkey={cell.id}\r\n\t\t\t\t\t\t\t\tclassName={classNames?.td?._}\r\n\t\t\t\t\t\t\t\tdata-select-td={cell.column.id === 'select' ? true : undefined}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</TableRow>\r\n\t\t\t\t))\r\n\t\t\t) : (\r\n\t\t\t\t<TableRow data-state='empty'>\r\n\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\tcolSpan={columnsLength}\r\n\t\t\t\t\t\tdata-state='empty'\r\n\t\t\t\t\t\tclassName='h-24 text-center'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tNo results.\r\n\t\t\t\t\t</TableCell>\r\n\t\t\t\t</TableRow>\r\n\t\t\t)}\r\n\t\t</TableBody>\r\n\t);\r\n};\r\n\r\nconst QueryTable = <TData, TQueryInput extends QueryInput, TError = unknown>({\r\n\tcolumns,\r\n\tstore,\r\n\tinfiniteQuery,\r\n}: DataTableProps<TData, TQueryInput, TError>) => {\r\n\t//\r\n\tconst storeUtils = useStore(store, (store) => store);\r\n\tconst canMultiRowSelect = useStore(store, (state) => state.canMultiRowSelect);\r\n\tconst modifiedColumns: typeof columns = useMemo(() => {\r\n\t\treturn [\r\n\t\t\t{\r\n\t\t\t\tid: 'select',\r\n\t\t\t\theader: ({ table }) => (\r\n\t\t\t\t\t<IndeterminateCheckbox\r\n\t\t\t\t\t\tchecked={table.getIsAllRowsSelected()}\r\n\t\t\t\t\t\tindeterminate={table.getIsSomeRowsSelected()}\r\n\t\t\t\t\t\tonChange={table.getToggleAllRowsSelectedSchema()}\r\n\t\t\t\t\t\ttContainerType='thead'\r\n\t\t\t\t\t\tstore={store}\r\n\t\t\t\t\t\t// className={cx(classNames.thead?.th?.checkboxContainer?.checkBox)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t),\r\n\t\t\t\tcell: ({ row }) => (\r\n\t\t\t\t\t<IndeterminateCheckbox\r\n\t\t\t\t\t\tchecked={row.getIsSelected()}\r\n\t\t\t\t\t\tindeterminate={row.getIsSomeSelected()}\r\n\t\t\t\t\t\tonChange={row.getToggleSelectedSchema()}\r\n\t\t\t\t\t\ttContainerType='tbody'\r\n\t\t\t\t\t\tstore={store}\r\n\t\t\t\t\t\t// className={cx(classNames.tbody?.td?.checkboxContainer?.checkBox)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t),\r\n\t\t\t\tenableSorting: false,\r\n\t\t\t\tenableHiding: canMultiRowSelect,\r\n\t\t\t},\r\n\t\t\t...columns,\r\n\t\t];\r\n\t}, [canMultiRowSelect, columns, store]);\r\n\r\n\t//\r\n\tconst sorting = useStore(store, (store) => store.sorting);\r\n\tconst columnFilters = useStore(store, (store) => store.columnFilters);\r\n\tconst columnVisibility = useStore(store, (store) => store.columnVisibility);\r\n\tconst rowSelection = useStore(store, (store) => store.rowSelection);\r\n\r\n\tconst currentPageAndPagination = useGetTableCurrentPageAndPagination({\r\n\t\tinfiniteQuery,\r\n\t\tstore,\r\n\t});\r\n\r\n\tconst table = useReactTable({\r\n\t\tdata: currentPageAndPagination.currentPage,\r\n\t\tcolumns: modifiedColumns,\r\n\t\tonSortingChange: storeUtils.setSorting,\r\n\t\tonColumnFiltersChange: storeUtils.setColumnFilters,\r\n\t\tgetCoreRowModel: getCoreRowModel(),\r\n\t\tgetPaginationRowModel: getPaginationRowModel(),\r\n\t\tgetSortedRowModel: getSortedRowModel(),\r\n\t\tgetFilteredRowModel: getFilteredRowModel(),\r\n\t\tonPaginationChange: storeUtils.setPagination,\r\n\t\tonColumnVisibilityChange: storeUtils.setColumnVisibility,\r\n\t\tonRowSelectionChange: storeUtils.setRowSelection,\r\n\t\tmanualPagination: true,\r\n\t\tmanualFiltering: true,\r\n\t\tmanualSorting: true,\r\n\t\tstate: {\r\n\t\t\tpagination: currentPageAndPagination.pagination,\r\n\t\t\tsorting,\r\n\t\t\tcolumnFilters,\r\n\t\t\tcolumnVisibility,\r\n\t\t\trowSelection,\r\n\t\t},\r\n\t});\r\n\r\n\tuseEffect(() => store.setState({ table }), [store, table]);\r\n\r\n\treturn (\r\n\t\t<Table store={store}>\r\n\t\t\t<CustomTableHeader table={table} store={store} />\r\n\t\t\t<CustomTableBody\r\n\t\t\t\ttable={table}\r\n\t\t\t\tcolumnsLength={columns.length}\r\n\t\t\t\tstore={store}\r\n\t\t\t/>\r\n\t\t</Table>\r\n\t);\r\n};\r\n\r\nexport default QueryTable;\r\n","import {\r\n\ttype HTMLAttributes,\r\n\ttype ThHTMLAttributes,\r\n\ttype TdHTMLAttributes,\r\n\ttype HTMLProps,\r\n\tuseEffect,\r\n\tuseRef,\r\n} from 'react';\r\nimport { useStore, type StoreApi } from 'zustand';\r\nimport { type QueryInput, type TableStore } from '../../utils/types';\r\n\r\nconst Table = <TData, TQueryInput extends QueryInput>({\r\n\tstore,\r\n\t...props\r\n}: HTMLAttributes<HTMLTableElement> & {\r\n\tstore: StoreApi<TableStore<TData, TQueryInput>>;\r\n}) => {\r\n\tconst className = useStore(store, (store) => store.classNames?.table);\r\n\r\n\treturn (\r\n\t\t<table\r\n\t\t\t// className={cx('w-full caption-bottom text-sm', className)}\r\n\t\t\t{...props}\r\n\t\t\tclassName={className}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\n// <div className='w-full overflow-auto'>\r\n// </div>\r\n\r\nconst TableHeader = (props: HTMLAttributes<HTMLTableSectionElement>) => (\r\n\t<thead\r\n\t\t// className={cx('[&_tr]:border-b', className)}\r\n\t\t{...props}\r\n\t/>\r\n);\r\n\r\nconst TableBody = (props: HTMLAttributes<HTMLTableSectionElement>) => (\r\n\t<tbody\r\n\t\t// className={cx('[&_tr:last-child]:border-0', className)}\r\n\t\t{...props}\r\n\t/>\r\n);\r\n\r\nconst TableFooter = (props: HTMLAttributes<HTMLTableSectionElement>) => (\r\n\t<tfoot\r\n\t\t// className={cx('bg-primary text-primary-foreground font-medium', className)}\r\n\t\t{...props}\r\n\t/>\r\n);\r\n\r\nconst TableRow = (props: HTMLAttributes<HTMLTableRowElement>) => (\r\n\t<tr\r\n\t\t// className={cx(\r\n\t\t// \t'hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors',\r\n\t\t// \tclassName,\r\n\t\t// )}\r\n\t\t{...props}\r\n\t/>\r\n);\r\n\r\nconst TableHead = (props: ThHTMLAttributes<HTMLTableCellElement>) => (\r\n\t<th\r\n\t\t// className={cx(\r\n\t\t// \t'text-muted-foreground h-12 px-4 text-left align-middle font-medium [&:has([role=checkbox])]:pr-0',\r\n\t\t// \tclassName,\r\n\t\t// )}\r\n\t\t{...props}\r\n\t/>\r\n);\r\n\r\nconst TableCell = (props: TdHTMLAttributes<HTMLTableCellElement>) => (\r\n\t<td {...props} />\r\n);\r\n\r\nconst IndeterminateCheckbox = <TData, TQueryInput extends QueryInput>({\r\n\tindeterminate,\r\n\tstore,\r\n\ttContainerType,\r\n\t...props\r\n}: {\r\n\tindeterminate?: boolean;\r\n\ttContainerType: 'thead' | 'tbody';\r\n\tstore: StoreApi<TableStore<TData, TQueryInput>>;\r\n} & HTMLProps<HTMLInputElement>) => {\r\n\tconst selectCheckBoxContainerClassName = useStore(store, (store) =>\r\n\t\ttContainerType === 'thead'\r\n\t\t\t? store.classNames?.thead?.th?.selectCheckBoxContainer\r\n\t\t\t: store.classNames?.tbody?.td?.selectCheckBoxContainer,\r\n\t);\r\n\tconst ref = useRef<HTMLInputElement>(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!ref.current) return;\r\n\r\n\t\tif (typeof indeterminate === 'boolean') {\r\n\t\t\tref.current.indeterminate = !props.checked && indeterminate;\r\n\t\t}\r\n\t}, [indeterminate, props.checked]);\r\n\r\n\treturn (\r\n\t\t<div className={selectCheckBoxContainerClassName?._}>\r\n\t\t\t<input\r\n\t\t\t\ttype='checkbox'\r\n\t\t\t\tref={ref}\r\n\t\t\t\tclassName={selectCheckBoxContainerClassName?.checkbox}\r\n\t\t\t\t{...props}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n// const TableCaption = forwardRef<\r\n// \tHTMLTableCaptionElement,\r\n// \tHTMLAttributes<HTMLTableCaptionElement>\r\n// >(({ className, ...props }, ref) => (\r\n// \t<caption\r\n// \t\tref={ref}\r\n// \t\tclassName={cx('text-muted-foreground mt-4 text-sm', className)}\r\n// \t\t{...props}\r\n// \t/>\r\n// ));\r\n// TableCaption.displayName = 'TableCaption';\r\n\r\nexport {\r\n\tTable,\r\n\tTableHeader,\r\n\tTableBody,\r\n\tTableFooter,\r\n\tTableHead,\r\n\tTableRow,\r\n\tTableCell,\r\n\tIndeterminateCheckbox,\r\n};\r\n"]}